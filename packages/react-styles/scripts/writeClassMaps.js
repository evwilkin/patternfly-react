/*
This code generates JavaScript modules that export maps of CSS classes as key-value pairs, where the keys are the formatted class names and the values are the original class names. 
This is achieved by parsing CSS files and extracting the class names, formatting the class names using camelCase, and organizing them into maps. 
The generated modules can be imported into JavaScript code to allow the use of CSS classes in a more type-safe way.

The code accomplishes this by doing the following:

1 - Importing necessary modules: path, fs-extra, and generateClassMaps.
2 - Defining the output directory path for the generated JavaScript modules using path.resolve.
3 - Defining functions to write the generated class maps to files in various formats (CommonJS, ESM, and TypeScript). These functions use fs-extra to write the files to disk.
4 - Defining a function to write the class maps to files using the previously defined functions. This function takes a map of file names to class maps as its argument.
5 - Calling the writeClassMaps function with the result of calling the generateClassMaps function, which generates the class maps by parsing CSS files.
6 - The writeClassMaps function iterates over each file in the classMaps object generated by generateClassMaps, determines the output path relative to the output directory, and calls the previously defined functions to write the class maps to files.
7 - The function also copies the original CSS files to the output directory.
8 - Finally, the function logs a message indicating how many files were written.
*/

const { join, basename, resolve, relative, dirname } = require('path');
const { outputFileSync, copyFileSync } = require('fs-extra');
const { generateClassMaps } = require('./generateClassMaps');

const outDir = resolve(__dirname, '../css');

const writeCJSExport = (file, classMap) =>
  outputFileSync(
    join(outDir, file.replace(/.css$/, '.js')),
    `
"use strict";
exports.__esModule = true;
require('./${basename(file, '.css.js')}');
exports.default = ${JSON.stringify(classMap, null, 2)};
`.trim()
  );

const writeESMExport = (file, classMap) =>
  outputFileSync(
    join(outDir, file.replace(/.css$/, '.mjs')),
    `
import './${basename(file, '.css.js')}';
export default ${JSON.stringify(classMap, null, 2)};
`.trim()
  );

const writeDTSExport = (file, classMap) =>
  outputFileSync(
    join(outDir, file.replace(/.css$/, '.d.ts')),
    `
import './${basename(file, '.css.js')}';
declare const _default: ${JSON.stringify(classMap, null, 2)};
export default _default;
`.trim()
  );

/**
 * @param {any} classMaps Map of file names to classMaps
 */
function writeClassMaps(classMaps) {
  const pfStylesDir = dirname(require.resolve('@patternfly/patternfly/patternfly.css'));

  Object.entries(classMaps).forEach(([file, classMap]) => {
    const outPath = file.includes(pfStylesDir) ? relative(pfStylesDir, file) : relative('src/css', file);

    writeCJSExport(outPath, classMap);
    writeDTSExport(outPath, classMap);
    writeESMExport(outPath, classMap);
    copyFileSync(file, join(outDir, outPath));
  });

  // eslint-disable-next-line no-console
  console.log('Wrote', Object.keys(classMaps).length * 3, 'CSS-in-JS files');
}

writeClassMaps(generateClassMaps());
