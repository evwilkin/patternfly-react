{"react":{"Wizard":{"id":"Wizard","title":"Wizard","source":"react","tabName":null,"slug":"/components/wizard/react","propComponents":[{"name":"Wizard","description":"Wrapper for all steps and hosts state, including navigation helpers, within context.\nThe WizardContext provided by default gives any child of wizard access to those resources.","props":[{"name":"children","type":"React.ReactNode","description":"Step components","required":true},{"name":"className","type":"string","description":"Additional classes spread to the wizard"},{"name":"footer","type":"WizardFooterType","description":"Wizard footer"},{"name":"header","type":"React.ReactNode","description":"Wizard header"},{"name":"height","type":"number | string","description":"Custom height of the wizard"},{"name":"isProgressive","type":"boolean","description":"Progressively shows steps, where all steps following the active step are hidden. Defaults to false.","defaultValue":"false"},{"name":"isVisitRequired","type":"boolean","description":"Disables steps that haven't been visited. Defaults to false.","defaultValue":"false"},{"name":"nav","type":"WizardNavType","description":"Wizard navigation"},{"name":"navAriaLabel","type":"string","description":"Aria-label for the Nav"},{"name":"onClose","type":"(event: React.MouseEvent<HTMLButtonElement>) => void","description":"Callback function to close the wizard"},{"name":"onSave","type":"(event: React.MouseEvent<HTMLButtonElement>) => void | Promise<void>","description":"Callback function to save at the end of the wizard, if not specified uses onClose"},{"name":"onStepChange","type":"(\n  event: React.MouseEvent<HTMLButtonElement>,\n  currentStep: WizardStepType,\n  prevStep: WizardStepType,\n  scope: WizardStepChangeScope\n) => void | Promise<void>","description":"Callback function when navigating between steps"},{"name":"shouldFocusContent","type":"boolean","description":"Flag indicating whether the wizard content should be focused after the onNext or onBack callbacks\nare called.","defaultValue":"true"},{"name":"startIndex","type":"number","description":"The initial index the wizard is to start on (1 or higher). Defaults to 1.","defaultValue":"1"},{"name":"width","type":"number | string","description":"Custom width of the wizard"}]},{"name":"WizardFooter","description":"Hosts the standard structure of a footer with ties to the active step so that text for buttons can vary from step to step.","props":[{"name":"activeStep","type":"WizardStepType","description":"The active step","required":true},{"name":"backButtonProps","type":"Omit<WizardFooterButtonProps, 'isDisabled'>","description":"Additional props for the Back button."},{"name":"backButtonText","type":"React.ReactNode","description":"Custom text for the Back button"},{"name":"cancelButtonProps","type":"WizardFooterButtonProps","description":"Additional props for the Cancel button."},{"name":"cancelButtonText","type":"React.ReactNode","description":"Custom text for the Cancel link"},{"name":"className","type":"string","description":"Additional classes spread to the wizard footer"},{"name":"isBackDisabled","type":"boolean","description":"Flag to disable the back button"},{"name":"isBackHidden","type":"boolean","description":"Flag to hide the back button"},{"name":"isCancelHidden","type":"boolean","description":"Flag to hide the cancel button"},{"name":"isNextDisabled","type":"boolean","description":"Flag to disable the next button"},{"name":"nextButtonProps","type":"Omit<WizardFooterButtonProps, 'isDisabled' | 'type'>","description":"Additional props for the Next button."},{"name":"nextButtonText","type":"React.ReactNode","description":"Custom text for the Next button. The current step's nextButtonText takes precedence."},{"name":"onBack","type":"(event: React.MouseEvent<HTMLButtonElement>) => void | Promise<void>","description":"Back button callback","required":true},{"name":"onClose","type":"(event: React.MouseEvent<HTMLButtonElement>) => void","description":"Cancel link callback","required":true},{"name":"onNext","type":"(event: React.MouseEvent<HTMLButtonElement>) => void | Promise<void>","description":"Next button callback","required":true}]},{"name":"WizardFooterWrapper","description":"Applies default wizard footer styling any number of child elements.","props":[{"name":"children","type":"React.ReactNode","description":"","required":true},{"name":"className","type":"string","description":""}]},{"name":"WizardToggle","description":"Used to toggle between step content, including the body and footer. This is also where the navigation and its expandability is controlled.","props":[{"name":"activeStep","type":"WizardStepType","description":"The current step","required":true},{"name":"aria-label","type":"string","description":"The expandable dropdown button's aria-label","defaultValue":"'Wizard toggle'"},{"name":"footer","type":"React.ReactElement","description":"Wizard footer","required":true},{"name":"isNavExpanded","type":"boolean","description":"Flag to determine whether the dropdown navigation is expanded"},{"name":"nav","type":"React.ReactElement<WizardNavProps>","description":"Wizard navigation","required":true},{"name":"steps","type":"WizardStepType[]","description":"List of steps and/or sub-steps","required":true},{"name":"toggleNavExpanded","type":"(event: React.MouseEvent<HTMLButtonElement> | KeyboardEvent) => void","description":"Callback to expand or collapse the dropdown navigation"}]},{"name":"WizardStep","description":"The primary child component for Wizard. Step props are used for the list of steps managed in context.","props":[{"name":"body","type":"Omit<Omit<WizardBodyProps, 'children'>, 'children'>","description":"Props for WizardBody that wraps content by default."},{"name":"children","type":"React.ReactNode | undefined","description":"Optional for when the step is used as a parent to sub-steps"},{"name":"footer","type":"React.ReactElement | Partial<WizardFooterProps>","description":"Replaces the step's footer. The step's footer takes precedance over the wizard's footer."},{"name":"id","type":"string | number","description":"Unique identifier","required":true},{"name":"isDisabled","type":"boolean","description":"Flag to disable the step's navigation item"},{"name":"isExpandable","type":"boolean","description":"Flag to determine whether parent steps can expand or not. Defaults to false."},{"name":"isHidden","type":"boolean","description":"Flag to determine whether the step is hidden"},{"name":"name","type":"React.ReactNode","description":"Name of the step's navigation item","required":true},{"name":"navItem","type":"WizardNavItemType","description":"Replaces the step's navigation item or its properties."},{"name":"status","type":"'default' | 'error' | 'success'","description":"Used to determine icon next to the step's navigation item"},{"name":"steps","type":"React.ReactElement<WizardStepProps>[]","description":"Optional list of sub-steps"}]},{"name":"WizardBody","description":"Used as a wrapper for WizardStep content, where the wrapping element is customizable.","props":[{"name":"aria-label","type":"string","description":"Adds an accessible name to the wrapper element when the content overflows and renders\na scrollbar."},{"name":"aria-labelledby","type":"string","description":"Adds an accessible name to the wrapper element by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the content overflows and renders a scrollbar."},{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered in the Wizard body","required":true},{"name":"className","type":"string","description":"Additional classes spread to the wizard body"},{"name":"component","type":"React.ElementType","description":"Component used as the wrapping content container","defaultValue":"'div'"},{"name":"hasNoPadding","type":"boolean","description":"Flag to remove the default body padding","defaultValue":"false"}]},{"name":"WizardHeader","description":"","props":[{"name":"className","type":"string","description":"Additional classes spread to the wizard header"},{"name":"closeButtonAriaLabel","type":"string","description":"Aria-label applied to the X (Close) button"},{"name":"description","type":"React.ReactNode","description":"Description of the wizard"},{"name":"descriptionComponent","type":"'div' | 'p'","description":"Component type of the description","defaultValue":"'div'"},{"name":"descriptionId","type":"string","description":"id for the description"},{"name":"isCloseHidden","type":"boolean","description":"Flag indicating whether the close button should be in the header"},{"name":"onClose","type":"(event: React.MouseEvent<HTMLButtonElement>) => void","description":"Callback function called when the X (Close) button is clicked","defaultValue":"() => undefined"},{"name":"title","type":"string","description":"Title of the wizard","required":true},{"name":"titleId","type":"string","description":"id for the title"}]},{"name":"WizardNav","description":"","props":[{"name":"aria-label","type":"string","description":"Aria-label applied to the navigation element"},{"name":"aria-labelledby","type":"string","description":"Sets the aria-labelledby attribute on the navigation element"},{"name":"children","type":"any","description":"children should be WizardNavItem components"},{"name":"className","type":"string","description":"Additional classes spread to the wizard nav"},{"name":"isExpanded","type":"boolean","description":"Whether the navigation is expanded","defaultValue":"false"},{"name":"isInnerList","type":"boolean","description":"True to return the inner list without the wrapping navigation element","defaultValue":"false"}]},{"name":"WizardNavItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Can nest a WizardNav component for substeps","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes spread to the wizard nav item"},{"name":"component","type":"'button' | 'a'","description":"Component used to render WizardNavItem","defaultValue":"'button'"},{"name":"content","type":"React.ReactNode","description":"The content to display in the navigation item","defaultValue":"''"},{"name":"href","type":"string","description":"An optional url to use for when using an anchor component"},{"name":"id","type":"string | number","description":"The id for the navigation item"},{"name":"isCurrent","type":"boolean","description":"Whether the navigation item is the currently active item","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Whether the navigation item is disabled","defaultValue":"false"},{"name":"isExpandable","type":"boolean","description":"Flag indicating that this NavItem has child steps and is expandable","defaultValue":"false"},{"name":"isVisited","type":"boolean","description":"Whether the navigation item has been visited","defaultValue":"false"},{"name":"onClick","type":"(event: React.MouseEvent<HTMLButtonElement> | React.MouseEvent<HTMLAnchorElement>, index: number) => any","description":"Callback for when the navigation item is clicked"},{"name":"ouiaSafe","type":"No type info","defaultValue":"true"},{"name":"status","type":"'default' | 'error' | 'success'","description":"Used to determine the icon displayed next to content. Default has no icon.","defaultValue":"'default'"},{"name":"stepIndex","type":"number","description":"The step index passed into the onNavItemClick callback","required":true},{"name":"target","type":"React.HTMLAttributeAnchorTarget","description":"Where to display the linked URL when using an anchor component"}]},{"name":"WizardContextProps","description":"","props":[{"name":"activeStep","type":"WizardStepType","description":"Current step","required":true},{"name":"close","type":"() => void","description":"Close the wizard","required":true},{"name":"footer","type":"React.ReactElement","description":"Footer element","required":true},{"name":"getStep","type":"(stepId: number | string) => WizardStepType","description":"Get step by ID","required":true},{"name":"goToNextStep","type":"() => void | Promise<void>","description":"Navigate to the next step","required":true},{"name":"goToPrevStep","type":"() => void | Promise<void>","description":"Navigate to the previous step","required":true},{"name":"goToStepById","type":"(id: number | string) => void","description":"Navigate to step by ID","required":true},{"name":"goToStepByIndex","type":"(index: number) => void","description":"Navigate to step by index","required":true},{"name":"goToStepByName","type":"(name: string) => void","description":"Navigate to step by name","required":true},{"name":"mainWrapperRef","type":"React.RefObject<HTMLElement>","description":"Ref for main wizard content element.","required":true},{"name":"setFooter","type":"(footer: React.ReactElement | Partial<WizardFooterProps>) => void","description":"Update the footer with any react element","required":true},{"name":"setStep","type":"(step: Pick<WizardStepType, 'id'> & Partial<WizardStepType>) => void","description":"Set step by ID","required":true},{"name":"shouldFocusContent","type":"boolean","description":"Flag indicating whether the wizard content should be focused after the onNext or onBack callbacks\nare called.","required":true},{"name":"steps","type":"WizardStepType[]","description":"List of steps","required":true}]},{"name":"WizardBasicStep","description":"Type used to define 'basic' steps, or in other words, steps that are neither parents or children of parents.","props":[{"name":"component","type":"React.ReactElement","description":"Content shown when the step's navigation item is selected. When treated as a parent step, only sub-step content will be shown."},{"name":"footer","type":"React.ReactElement | Partial<WizardFooterProps>","description":"Replaces the step's footer. The step's footer takes precedance over the wizard's footer."},{"name":"id","type":"string | number","description":"Unique identifier","required":true},{"name":"index","type":"number","description":"Order index of step (starts at 1)","required":true},{"name":"isDisabled","type":"boolean","description":"Flag to disable the step's navigation item"},{"name":"isHidden","type":"boolean","description":"Flag to determine whether the step is hidden"},{"name":"isVisited","type":"boolean","description":"Flag to represent whether the step has been visited (navigated to)"},{"name":"name","type":"React.ReactNode","description":"Name of the step's navigation item","required":true},{"name":"navItem","type":"WizardNavItemType","description":"Replaces the step's navigation item or its properties."},{"name":"status","type":"'default' | 'error' | 'success'","description":"Used to determine icon next to the step's navItem"}]},{"name":"WizardParentStep","description":"Type used to define parent steps.","props":[{"name":"isExpandable","type":"boolean","description":"Flag to determine whether the step can expand or not."},{"name":"subStepIds","type":"(string | number)[]","description":"Nested step IDs","required":true}]},{"name":"WizardSubStep","description":"Type used to define sub-steps.","props":[{"name":"parentId","type":"string | number","description":"Unique identifier of the parent step","required":true}]}]},"Truncate":{"id":"Truncate","title":"Truncate","source":"react","tabName":null,"slug":"/components/truncate/react","propComponents":[{"name":"Truncate","description":"","props":[{"name":"className","type":"string","description":"Class to add to outer span"},{"name":"content","type":"string","description":"Text to truncate","required":true},{"name":"position","type":"'start' | 'middle' | 'end'","description":"Where the text will be truncated","defaultValue":"'end'"},{"name":"tooltipPosition","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Tooltip position","defaultValue":"'top'"},{"name":"trailingNumChars","type":"number","description":"The number of characters displayed in the second half of the truncation","defaultValue":"7"}]}]},"Tree view":{"id":"Tree view","title":"Tree view","source":"react","tabName":null,"slug":"/components/tree-view/react","propComponents":[{"name":"TreeView","description":"The main tree view component.","props":[{"name":"activeItems","type":"TreeViewDataItem[]","description":"Active items of tree view."},{"name":"allExpanded","type":"boolean","description":"Sets the expanded state on all tree nodes, overriding default behavior and current\ninternal state."},{"name":"aria-label","type":"string","description":"A text string that sets the accessible name of the tree view list. Either this or the aria-labelledby property must\nbe passed in."},{"name":"aria-labelledby","type":"string","description":"A space separated list of element id's that sets the accessible name of the tree view list. Either\nthis or the aria-label property must be passed in."},{"name":"className","type":"string","description":"Class to add if not passed a parentItem property."},{"name":"compareItems","type":"(item: TreeViewDataItem, itemToCheck: TreeViewDataItem) => boolean","description":"Comparison function for determining active items.","defaultValue":"(item, itemToCheck) => item.id === itemToCheck.id"},{"name":"data","type":"TreeViewDataItem[]","description":"Data of the tree view.","required":true},{"name":"defaultAllExpanded","type":"boolean","description":"Sets the default expanded behavior.","defaultValue":"false"},{"name":"expandedIcon","type":"React.ReactNode","description":"Icon for all expanded node items."},{"name":"hasBadges","type":"boolean","description":"Flag indicating if all nodes in the tree view should have badges.","defaultValue":"false"},{"name":"hasCheckboxes","type":"boolean","description":"Flag indicating if all nodes in the tree view should have checkboxes.","defaultValue":"false"},{"name":"hasGuides","type":"boolean","description":"Flag indicating if the tree view has guide lines.","defaultValue":"false"},{"name":"hasSelectableNodes","type":"boolean","description":"Flag indicating that tree nodes should be independently selectable, even when having\nchildren.","defaultValue":"false"},{"name":"icon","type":"React.ReactNode","description":"Icon for all leaf or unexpanded node items."},{"name":"id","type":"string","description":"ID of the tree view."},{"name":"isMultiSelectable","type":"boolean","description":"Flag indicating whether multiple nodes can be selected in the tree view. This will also set the\naria-multiselectable attribute on the tree view list which is required to be true when multiple selection is intended.\nCan only be applied to the root tree view list.","defaultValue":"false"},{"name":"isNested","type":"boolean","description":"Flag indicating if the tree view is nested.","defaultValue":"false"},{"name":"onCheck","type":"(event: React.ChangeEvent<HTMLInputElement>, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void","description":"Callback for item checkbox selection."},{"name":"onCollapse","type":"(event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void","description":"Callback for collapsing a node with children."},{"name":"onExpand","type":"(event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void","description":"Callback for expanding a node with children."},{"name":"onSelect","type":"(event: React.MouseEvent, item: TreeViewDataItem, parentItem: TreeViewDataItem) => void","description":"Callback for item selection."},{"name":"parentItem","type":"TreeViewDataItem","description":"Internal. Parent item of a tree view list item."},{"name":"toolbar","type":"React.ReactNode","description":"Toolbar to display above the tree view."},{"name":"useMemo","type":"boolean","description":"Flag indicating the tree view should utilize memoization to help render large data sets.\nSetting this property requires that the activeItems property is passed an array containing\nevery node in the selected item's path."},{"name":"variant","type":"'default' | 'compact' | 'compactNoBackground'","description":"Variant presentation styles for the tree view.","defaultValue":"'default'"}]},{"name":"TreeViewDataItem","description":"Properties that make up a tree view data item. These properties should be passed in as an\nobject to one of the various tree view component properties which accept TreeViewDataItem as\na type.","props":[{"name":"action","type":"React.ReactNode","description":"Action of a tree view item, which can be either a button or dropdown component."},{"name":"badgeProps","type":"any","description":"Additional properties of the tree view item badge."},{"name":"checkProps","type":"TreeViewCheckProps","description":"Additional properties of the tree view item checkbox."},{"name":"children","type":"TreeViewDataItem[]","description":"Child nodes of a tree view item."},{"name":"customBadgeContent","type":"React.ReactNode","description":"Optional prop for a custom badge."},{"name":"defaultExpanded","type":"boolean","description":"Flag indicating if node is expanded by default."},{"name":"expandedIcon","type":"React.ReactNode","description":"Expanded icon of a tree view item."},{"name":"hasBadge","type":"boolean","description":"Flag indicating if a tree view item has a badge."},{"name":"hasCheckbox","type":"boolean","description":"Flag indicating if a tree view item has a checkbox."},{"name":"icon","type":"React.ReactNode","description":"Default icon of a tree view item."},{"name":"id","type":"string","description":"ID of a tree view item."},{"name":"name","type":"React.ReactNode","description":"Internal content of a tree view item.","required":true},{"name":"title","type":"React.ReactNode","description":"Title of a tree view item. Only used in compact presentations."}]},{"name":"TreeViewSearch","description":"Renders a search input for the tree view. This sub-component should be passed into the\ntree view component's toolbar property.","props":[{"name":"aria-label","type":"string","description":"Accessible label for the search input."},{"name":"className","type":"string","description":"Classes applied to the wrapper for the search input."},{"name":"id","type":"string","description":"Id for the search input."},{"name":"name","type":"string","description":"Name for the search input."},{"name":"onSearch","type":"(event: React.ChangeEvent<HTMLInputElement>) => void","description":"Callback for search input."}]}]},"Tooltip":{"id":"Tooltip","title":"Tooltip","source":"react","tabName":null,"slug":"/components/tooltip/react","propComponents":[{"name":"Tooltip","description":"","props":[{"name":"animationDuration","type":"number","description":"CSS fade transition animation duration","defaultValue":"300"},{"name":"appendTo","type":"HTMLElement | ((ref?: HTMLElement) => HTMLElement)","description":"The element to append the tooltip to, defaults to body","defaultValue":"() => document.body"},{"name":"aria","type":"'describedby' | 'labelledby' | 'none'","description":"aria-labelledby or aria-describedby for tooltip.\nThe trigger will be cloned to add the aria attribute, and the corresponding id in the form of 'pf-tooltip-#' is added to the content container.\nIf you don't want that or prefer to add the aria attribute yourself on the trigger, set aria to 'none'.","defaultValue":"'describedby'"},{"name":"aria-live","type":"'off' | 'polite'","description":"Determines whether the tooltip is an aria-live region. If the triggerRef prop is passed in the\ndefault behavior is 'polite' in order to ensure the tooltip contents is announced to\nassistive technologies. Otherwise the default behavior is 'off'.","defaultValue":"triggerRef ? 'polite' : 'off'"},{"name":"children","type":"ReactElement<any>","description":"The trigger reference element to which the Tooltip is relatively placed to.\nIf you cannot wrap the element with the Tooltip, you can use the triggerRef prop instead.\nUsage: <Tooltip><Button>Reference</Button></Tooltip>"},{"name":"className","type":"string","description":"Tooltip additional class","defaultValue":"''"},{"name":"content","type":"React.ReactNode","description":"Tooltip content","required":true},{"name":"distance","type":"number","description":"Distance of the tooltip to its target, defaults to 15","defaultValue":"15"},{"name":"enableFlip","type":"boolean","description":"If true, tries to keep the tooltip in view by flipping it if necessary","defaultValue":"true"},{"name":"entryDelay","type":"number","description":"Delay in ms before the tooltip appears","defaultValue":"300"},{"name":"exitDelay","type":"number","description":"Delay in ms before the tooltip disappears, Avoid passing in a value of \"0\", as users should\nbe given ample time to move their mouse from the trigger to the tooltip content without the content\nbeing hidden.","defaultValue":"300"},{"name":"flipBehavior","type":"| 'flip'\n| (\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end'\n  )[]","description":"The desired position to flip the tooltip to if the initial position is not possible.\nBy setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space.\nYou can also pass an array of positions that determines the flip order. It should contain the initial position\nfollowed by alternative positions if that position is unavailable.\nExample: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to\n['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\nspace to the right, so it finally shows the tooltip on the left.","defaultValue":"['top', 'right', 'bottom', 'left', 'top', 'right', 'bottom']"},{"name":"id","type":"string","description":"id of the tooltip","defaultValue":"`pf-tooltip-${pfTooltipIdCounter++}`"},{"name":"isContentLeftAligned","type":"boolean","description":"Flag to indicate that the text content is left aligned","defaultValue":"false"},{"name":"isVisible","type":"boolean","description":"value for visibility when trigger is 'manual'","defaultValue":"false"},{"name":"maxWidth","type":"string","description":"Maximum width of the tooltip (default 18.75rem)","defaultValue":"tooltipMaxWidth.value"},{"name":"minWidth","type":"string | 'trigger'","description":"Minimum width of the tooltip. If set to \"trigger\", the minimum width will be set to the reference element width."},{"name":"onTooltipHidden","type":"() => void","description":"Callback when tooltip's hide transition has finished executing","defaultValue":"() => {}"},{"name":"position","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Tooltip position. Note: With 'enableFlip' set to true,\nit will change the position if there is not enough space for the starting position.\nThe behavior of where it flips to can be controlled through the flipBehavior prop.\nThe 'auto' position chooses the side with the most space.\nThe 'auto' position requires the 'enableFlip' prop to be true.","defaultValue":"'top'"},{"name":"trigger","type":"string","description":"Tooltip trigger: click, mouseenter, focus, manual\nSet to manual to trigger tooltip programmatically (through the isVisible prop)","defaultValue":"'mouseenter focus'"},{"name":"triggerRef","type":"HTMLElement | (() => HTMLElement) | React.RefObject<any>","description":"The trigger reference element to which the Tooltip is relatively placed to.\nIf you can wrap the element with the Tooltip, you can use the children prop instead, or both props together.\nWhen passed along with the trigger prop, the div element that wraps the trigger will be removed.\nUsage: <Tooltip triggerRef={() => document.getElementById('reference-element')} />"},{"name":"zIndex","type":"number","description":"z-index of the tooltip","defaultValue":"9999"}]}]},"Toolbar":{"id":"Toolbar","title":"Toolbar","source":"react","tabName":null,"slug":"/components/toolbar/react","propComponents":[{"name":"Toolbar","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content to be rendered as rows in the data toolbar"},{"name":"className","type":"string","description":"Classes applied to root element of the data toolbar"},{"name":"clearAllFilters","type":"() => void","description":"Optional callback for clearing all filters in the toolbar"},{"name":"clearFiltersButtonText","type":"string","description":"Text to display in the clear all filters button"},{"name":"collapseListedFiltersBreakpoint","type":"'all' | 'md' | 'lg' | 'xl' | '2xl'","description":"The breakpoint at which the listed filters in label groups are collapsed down to a summary"},{"name":"colorVariant","type":"ToolbarColorVariant | 'default' | 'no-background' | 'primary' | 'secondary'","description":"Background color variant of the toolbar"},{"name":"customLabelGroupContent","type":"React.ReactNode","description":"Custom content appended to the filter generated label group. To maintain spacing and styling, each node should be wrapped in a ToolbarItem or ToolbarGroup. This property will remove the default \"Clear all filters\" button."},{"name":"id","type":"string","description":"Id of the data toolbar"},{"name":"inset","type":"{\n  default?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  sm?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  md?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  lg?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  xl?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  '2xl'?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n}","description":"Insets at various breakpoints."},{"name":"isExpanded","type":"boolean","description":"Flag indicating if a data toolbar toggle group's expandable content is expanded"},{"name":"isFullHeight","type":"boolean","description":"Flag indicating the toolbar height should expand to the full height of the container"},{"name":"isStatic","type":"boolean","description":"Flag indicating the toolbar is static"},{"name":"isSticky","type":"boolean","description":"Flag indicating the toolbar should stick to the top of its container"},{"name":"numberOfFiltersText","type":"(numberOfFilters: number) => string","description":"Text to display in the total number of applied filters ToolbarFilter"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"toggleIsExpanded","type":"() => void","description":"A callback for setting the isExpanded flag"}]},{"name":"ToolbarContent","description":"","props":[{"name":"alignItems","type":"'start' | 'center' | 'baseline' | 'default'","description":"Vertical alignment of children"},{"name":"children","type":"React.ReactNode","description":"Content to be rendered as children of the content row"},{"name":"className","type":"string","description":"Classes applied to root element of the data toolbar content row"},{"name":"clearAllFilters","type":"() => void","description":"Optional callback for clearing all filters in the toolbar"},{"name":"clearFiltersButtonText","type":"string","description":"Text to display in the clear all filters button"},{"name":"isExpanded","type":"boolean","description":"Flag indicating if a data toolbar toggle group's expandable content is expanded","defaultValue":"false"},{"name":"showClearFiltersButton","type":"boolean","description":"Flag indicating that the clear all filters button should be visible","defaultValue":"false"},{"name":"toolbarId","type":"string","description":"Id of the parent Toolbar component"},{"name":"visibility","type":"{\n  default?: 'hidden' | 'visible';\n  md?: 'hidden' | 'visible';\n  lg?: 'hidden' | 'visible';\n  xl?: 'hidden' | 'visible';\n  '2xl'?: 'hidden' | 'visible';\n}","description":"Visibility at various breakpoints."}]},{"name":"ToolbarGroup","description":"","props":[{"name":"align","type":"{\n  default?: 'alignEnd' | 'alignStart' | 'alignCenter';\n  md?: 'alignEnd' | 'alignStart' | 'alignCenter';\n  lg?: 'alignEnd' | 'alignStart' | 'alignCenter';\n  xl?: 'alignEnd' | 'alignStart' | 'alignCenter';\n  '2xl'?: 'alignEnd' | 'alignStart' | 'alignCenter';\n}","description":"Applies to a child of a flex layout, and aligns that child (and any adjacent children on the other side of it) to one side of the main axis"},{"name":"alignItems","type":"'start' | 'center' | 'baseline' | 'default' | 'end' | 'stretch'","description":"Vertical alignment of children"},{"name":"alignSelf","type":"'start' | 'center' | 'baseline' | 'default' | 'end' | 'stretch'","description":"Vertical alignment"},{"name":"children","type":"React.ReactNode","description":"Content to be rendered inside the data toolbar group"},{"name":"className","type":"string","description":"Classes applied to root element of the data toolbar group"},{"name":"columnGap","type":"{\n  default?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  md?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  lg?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  xl?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  '2xl'?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n}","description":"Sets only the column gap at various breakpoints."},{"name":"gap","type":"{\n  default?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  md?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  lg?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  xl?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  '2xl'?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n}","description":"Sets both the column and row gap at various breakpoints."},{"name":"isOverflowContainer","type":"boolean","description":"Flag that modifies the toolbar group to hide overflow and respond to available space. Used for horizontal navigation."},{"name":"rowGap","type":"{\n  default?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  md?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  lg?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  xl?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  '2xl'?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n}","description":"Sets only the row gap at various breakpoints."},{"name":"variant","type":"| ToolbarGroupVariant\n| 'filter-group'\n| 'action-group'\n| 'action-group-inline'\n| 'action-group-plain'\n| 'label-group'","description":"A type modifier which modifies spacing specifically depending on the type of group"},{"name":"visibility","type":"{\n  default?: 'hidden' | 'visible';\n  md?: 'hidden' | 'visible';\n  lg?: 'hidden' | 'visible';\n  xl?: 'hidden' | 'visible';\n  '2xl'?: 'hidden' | 'visible';\n}","description":"Visibility at various breakpoints."}]},{"name":"ToolbarItem","description":"","props":[{"name":"align","type":"{\n  default?: 'alignEnd' | 'alignStart' | 'alignCenter';\n  md?: 'alignEnd' | 'alignStart' | 'alignCenter';\n  lg?: 'alignEnd' | 'alignStart' | 'alignCenter';\n  xl?: 'alignEnd' | 'alignStart' | 'alignCenter';\n  '2xl'?: 'alignEnd' | 'alignStart' | 'alignCenter';\n}","description":"Applies to a child of a flex layout, and aligns that child (and any adjacent children on the other side of it) to one side of the main axis"},{"name":"alignItems","type":"'start' | 'center' | 'baseline' | 'default' | 'end' | 'stretch'","description":"Vertical alignment of children"},{"name":"alignSelf","type":"'start' | 'center' | 'baseline' | 'default' | 'end' | 'stretch'","description":"Vertical alignment"},{"name":"children","type":"React.ReactNode","description":"Content to be rendered inside the data toolbar item"},{"name":"className","type":"string","description":"Classes applied to root element of the data toolbar item"},{"name":"columnGap","type":"{\n  default?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  md?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  lg?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  xl?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  '2xl'?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n}","description":"Sets only the column gap at various breakpoints."},{"name":"gap","type":"{\n  default?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  md?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  lg?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  xl?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  '2xl'?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n}","description":"Sets both the column and row gap at various breakpoints."},{"name":"id","type":"string","description":"id for this data toolbar item"},{"name":"isAllExpanded","type":"boolean","description":"Flag indicating if the expand-all variant is expanded or not"},{"name":"isOverflowContainer","type":"boolean","description":"Flag that modifies the toolbar item to hide overflow and respond to available space. Used for horizontal navigation."},{"name":"rowGap","type":"{\n  default?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  md?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  lg?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  xl?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  '2xl'?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n}","description":"Sets only the row gap at various breakpoints."},{"name":"variant","type":"ToolbarItemVariant | 'pagination' | 'label' | 'label-group' | 'separator' | 'expand-all'","description":"A type modifier which modifies spacing specifically depending on the type of item"},{"name":"visibility","type":"{\n  default?: 'hidden' | 'visible';\n  md?: 'hidden' | 'visible';\n  lg?: 'hidden' | 'visible';\n  xl?: 'hidden' | 'visible';\n  '2xl'?: 'hidden' | 'visible';\n}","description":"Visibility at various breakpoints."}]},{"name":"ToolbarToggleGroup","description":"","props":[{"name":"breakpoint","type":"'md' | 'lg' | 'xl' | '2xl'","description":"Controls when filters are shown and when the toggle button is hidden.","required":true},{"name":"clearAllFilters","type":"() => void","description":"Optional callback for clearing all filters in the toolbar toggle group"},{"name":"clearFiltersButtonText","type":"string","description":"Text to display in the clear all filters button of the toolbar toggle group"},{"name":"columnGap","type":"{\n  default?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  md?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  lg?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  xl?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n  '2xl'?:\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap_2xl'\n    | 'columnGap_3xl'\n    | 'columnGap_4xl';\n}","description":"Sets only the column gap at various breakpoints."},{"name":"gap","type":"{\n  default?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  md?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  lg?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  xl?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n  '2xl'?: 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap_2xl' | 'gap_3xl' | 'gap_4xl';\n}","description":"Sets both the column and row gap at various breakpoints."},{"name":"isExpanded","type":"boolean","description":"Flag indicating when toggle group is expanded for non-managed toolbar toggle groups."},{"name":"labelContainerRef","type":"React.RefObject<any>","description":"Reference to a label container group for filters inside the toolbar toggle group"},{"name":"onToggle","type":"(event: React.MouseEvent) => void","description":"Callback for toggle group click event for non-managed toolbar toggle groups."},{"name":"rowGap","type":"{\n  default?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  md?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  lg?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  xl?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n  '2xl'?:\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap_2xl'\n    | 'rowGap_3xl'\n    | 'rowGap_4xl';\n}","description":"Sets only the row gap at various breakpoints."},{"name":"showClearFiltersButton","type":"boolean","description":"Flag indicating that the clear all filters button should be visible in the toolbar toggle group"},{"name":"toggleIcon","type":"React.ReactNode","description":"An icon to be rendered when the toggle group has collapsed down","required":true},{"name":"visibility","type":"{\n  default?: 'hidden' | 'visible';\n  md?: 'hidden' | 'visible';\n  lg?: 'hidden' | 'visible';\n  xl?: 'hidden' | 'visible';\n  '2xl'?: 'hidden' | 'visible';\n}","description":"Visibility at various breakpoints."}]},{"name":"ToolbarFilter","description":"","props":[{"name":"categoryName","type":"string | ToolbarLabelGroup","description":"Unique category name to be used as a label for the label group","required":true},{"name":"children","type":"React.ReactNode","description":"Content to be rendered inside the data toolbar item associated with the label group","required":true},{"name":"deleteLabel","type":"(category: string | ToolbarLabelGroup, label: ToolbarLabel | string) => void","description":"Callback passed by consumer used to delete a label from the labels[]"},{"name":"deleteLabelGroup","type":"(category: string | ToolbarLabelGroup) => void","description":"Callback passed by consumer used to close the entire label group"},{"name":"expandableLabelContainerRef","type":"React.RefObject<HTMLDivElement>","description":"Reference to a label container created with a custom expandable content group, for non-managed multiple toolbar toggle groups."},{"name":"isExpanded","type":"boolean","description":"Flag indicating when toolbar toggle group is expanded for non-managed toolbar toggle groups."},{"name":"labelGroupCollapsedText","type":"string","description":"Customizeable template string for the label group. Use variable \"${remaining}\" for the overflow label count."},{"name":"labelGroupExpandedText","type":"string","description":"Customizable \"Show Less\" text string for the label group"},{"name":"labels","type":"(string | ToolbarLabel)[]","description":"An array of strings to be displayed as labels in the expandable content","defaultValue":"[]"},{"name":"showToolbarItem","type":"boolean","description":"Flag to show the toolbar item","defaultValue":"true"}]}]},"Toggle group":{"id":"Toggle group","title":"Toggle group","source":"react","tabName":null,"slug":"/components/toggle-group/react","propComponents":[{"name":"ToggleGroup","description":"","props":[{"name":"areAllGroupsDisabled","type":"boolean","description":"Disable all toggle group items under this component.","defaultValue":"false"},{"name":"aria-label","type":"string","description":"Accessible label for the toggle group"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the toggle group"},{"name":"className","type":"string","description":"Additional classes added to the toggle group"},{"name":"isCompact","type":"boolean","description":"Modifies the toggle group to include compact styling.","defaultValue":"false"}]},{"name":"ToggleGroupItem","description":"","props":[{"name":"aria-label","type":"string","description":"required when icon is used with no supporting text"},{"name":"buttonId","type":"string","description":"Optional id for the button within the toggle group item"},{"name":"className","type":"string","description":"Additional classes added to the toggle group item"},{"name":"icon","type":"React.ReactNode","description":"Icon rendered inside the toggle group item"},{"name":"iconPosition","type":"'start' | 'end'","description":"Sets position of the icon when text is also passed in","defaultValue":"'start'"},{"name":"isDisabled","type":"boolean","description":"Flag indicating if the toggle group item is disabled","defaultValue":"false"},{"name":"isSelected","type":"boolean","description":"Flag indicating if the toggle group item is selected","defaultValue":"false"},{"name":"onChange","type":"(event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent, selected: boolean) => void","description":"A callback for when the toggle group item selection changes.","defaultValue":"() => {}"},{"name":"text","type":"React.ReactNode","description":"Text rendered inside the toggle group item"}]}]},"Title":{"id":"Title","title":"Title","source":"react","tabName":null,"slug":"/components/title/react","propComponents":[{"name":"Title","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Title","defaultValue":"''"},{"name":"className","type":"string","description":"Additional classes added to the Title","defaultValue":"''"},{"name":"headingLevel","type":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"The heading level to use","required":true},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"size","type":"'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl'","description":"The size of the Title"}]}]},"Timestamp":{"id":"Timestamp","title":"Timestamp","source":"react","tabName":null,"slug":"/components/timestamp/react","propComponents":[{"name":"Timestamp","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Displays custom content inside the timestamp, such as a relative time. This prop will\noverride the default content that is displayed. Custom content will not be affected by\nany props that format or add to displayed content."},{"name":"className","type":"string","description":"Class to add to the outer span."},{"name":"customFormat","type":"{ [key: string]: string }","description":"Applies custom formatting to the displayed date and/or time. Passing this prop in will\noverride the dateFormat and timeFormat props."},{"name":"date","type":"Date","description":"Determines the default content that is displayed inside the timestamp and the value of\nthe inner time element's datetime attribute."},{"name":"dateFormat","type":"'full' | 'long' | 'medium' | 'short'","description":"Determines the format of the displayed date in the timestamp and UTC tooltip. Examples:\n\"Full\" => Tuesday, August 9, 2022;\n\"Long\" => August 9, 2022;\n\"Medium\" => Aug 9, 2022;\n\"Short\" => 8/9/22"},{"name":"displaySuffix","type":"string","description":"Applies a custom suffix to the displayed content, usually after the time, such as a\ncustom time zone.","defaultValue":"''"},{"name":"is12Hour","type":"boolean","description":"Flag for displaying the time in a 12 hour format. If this prop is not passed in,\nthe hour format will be based on the locale prop's value."},{"name":"locale","type":"string","description":"Determines which locale to use in the displayed content. Defaults to the current locale\nwhen this prop is not passed in. For more information about locale's:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation"},{"name":"shouldDisplayUTC","type":"boolean","description":"Flag indicating whether the default content should be displayed as a UTC string\ninstead of a local string."},{"name":"timeFormat","type":"'full' | 'long' | 'medium' | 'short'","description":"Determines the format of the displayed time in the timestamp and UTC tooltip. Examples:\n\"Full\" => 11:25:00 AM Eastern Daylight Time\n\"Long\" => 11:25:00 AM EDT\n\"Medium\" => 11:25:00 AM\n\"Short\" => 11:25 AM"},{"name":"tooltip","type":"TimestampTooltip","description":"Adds a tooltip to the timestamp."}]},{"name":"TimestampTooltip","description":"","props":[{"name":"content","type":"React.ReactNode","description":"Content displayed in the tooltip when using the \"custom\" variant."},{"name":"suffix","type":"string","description":"A custom suffix to apply to a \"default\" variant tooltip."},{"name":"tooltipProps","type":"any","description":"Additional props passed to the tooltip."},{"name":"variant","type":"'default' | 'custom'","description":"The variant of the tooltip. The \"default\" variant displays the date passed into\nthe timestamp's date prop as a UTC string.","required":true}]}]},"Time picker":{"id":"Time picker","title":"Time picker","source":"react","tabName":null,"slug":"/components/date-and-time/time-picker/react","propComponents":[{"name":"TimePicker","description":"","props":[{"name":"aria-label","type":"string","description":"Accessible label for the time picker","defaultValue":"'Time picker'"},{"name":"className","type":"string","description":"Additional classes added to the time picker.","defaultValue":"''"},{"name":"delimiter","type":"string","description":"Character to display between the hour and minute","defaultValue":"':'"},{"name":"id","type":"string","description":"Id of the time picker"},{"name":"includeSeconds","type":"boolean","description":"Includes number of seconds with the chosen time and allows users to manually edit the seconds value."},{"name":"inputProps","type":"TextInputProps","description":"Additional props for input field","defaultValue":"{}"},{"name":"invalidFormatErrorMessage","type":"string","description":"Error message to display when the time is provided in an invalid format.","defaultValue":"'Invalid time format'"},{"name":"invalidMinMaxErrorMessage","type":"string","description":"Error message to display when the time provided is not within the minTime/maxTime constriants","defaultValue":"'Invalid time entered'"},{"name":"is24Hour","type":"boolean","description":"True if the time is 24 hour time. False if the time is 12 hour time","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Flag indicating the time picker is disabled","defaultValue":"false"},{"name":"isOpen","type":"boolean","description":"Flag to control the opened state of the time picker menu","defaultValue":"false"},{"name":"maxTime","type":"string | Date","description":"A time string indicating the maximum value allowed. The format could be an ISO 8601 formatted date string or in 'HH{delimiter}MM' format","defaultValue":"''"},{"name":"menuAppendTo","type":"HTMLElement | (() => HTMLElement) | 'inline' | 'parent'","description":"The container to append the menu to. Defaults to 'inline'.\nIf your menu is being cut off you can append it to an element higher up the DOM tree.\nSome examples:\nmenuAppendTo=\"parent\"\nmenuAppendTo={() => document.body}\nmenuAppendTo={document.getElementById('target')}","defaultValue":"'inline'"},{"name":"minTime","type":"string | Date","description":"A time string indicating the minimum value allowed. The format could be an ISO 8601 formatted date string or in 'HH{delimiter}MM' format","defaultValue":"''"},{"name":"onChange","type":"(\n  event: React.FormEvent<HTMLInputElement>,\n  time: string,\n  hour?: number,\n  minute?: number,\n  seconds?: number,\n  isValid?: boolean\n) => void","description":"Optional event handler called each time the value in the time picker input changes."},{"name":"placeholder","type":"string","description":"String to display in the empty time picker field as a hint for the expected time format","defaultValue":"'hh:mm'"},{"name":"setIsOpen","type":"(isOpen?: boolean) => void","description":"Handler invoked each time the open state of time picker updates","defaultValue":"() => {}"},{"name":"stepMinutes","type":"number","description":"Size of step between time options in minutes.","defaultValue":"30"},{"name":"time","type":"string | Date","description":"A time string. The format could be  an ISO 8601 formatted date string or in 'HH{delimiter}MM' format","defaultValue":"''"},{"name":"validateTime","type":"(time: string) => boolean","description":"Optional validator can be provided to override the internal time validator."},{"name":"width","type":"string","description":"Width of the time picker.","defaultValue":"'150px'"},{"name":"zIndex","type":"number","description":"z-index of the time picker","defaultValue":"9999"}]}]},"Tile":{"id":"Tile","title":"Tile","source":"react","tabName":null,"slug":"/components/tile/react","propComponents":[{"name":"Tile","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the banner"},{"name":"className","type":"string","description":"Additional classes added to the banner"},{"name":"icon","type":"React.ReactNode","description":"Icon in the tile title"},{"name":"isDisabled","type":"boolean","description":"Flag indicating if the tile is disabled"},{"name":"isDisplayLarge","type":"boolean","description":"Flag indicating if the stacked tile icon is large"},{"name":"isSelected","type":"boolean","description":"Flag indicating if the tile is selected"},{"name":"isStacked","type":"boolean","description":"Flag indicating if the tile header is stacked"},{"name":"title","type":"string","description":"Title of the tile","required":true}]}]},"Text input group":{"id":"Text input group","title":"Text input group","source":"react","tabName":null,"slug":"/components/text-input-group/react","propComponents":[{"name":"TextInputGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the text input group"},{"name":"className","type":"string","description":"Additional classes applied to the text input group container"},{"name":"isDisabled","type":"boolean","description":"Adds disabled styling and a disabled context value which text input group main hooks into for the input itself"},{"name":"isPlain","type":"boolean","description":"Flag to indicate the toggle has no border or background"}]},{"name":"TextInputGroupMain","description":"","props":[{"name":"aria-activedescendant","type":"string","description":"The id of the active element. Required if role has a value of \"combobox\", and focus\nshould remain on the input."},{"name":"aria-controls","type":"string","description":"The id of the element(s) controlled by the input. Required if role has a value of \"combobox\"."},{"name":"aria-label","type":"string","description":"Accessibility label for the input"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the text input group main div"},{"name":"className","type":"string","description":"Additional classes applied to the text input group main container"},{"name":"hint","type":"string","description":"Suggestion that will show up like a placeholder even with text in the input"},{"name":"icon","type":"React.ReactNode","description":"Icon to be shown on the left side of the text input group main container"},{"name":"inputId","type":"string","description":"The id of the input element"},{"name":"isExpanded","type":"boolean","description":"Flag for whether an associated element controlled by the input is visible. Required if\nrole has a value of \"combobox\"."},{"name":"name","type":"string","description":"Name for the input"},{"name":"onBlur","type":"(event?: any) => void","description":"Callback for when focus is lost on the input field"},{"name":"onChange","type":"(event: React.FormEvent<HTMLInputElement>, value: string) => void","description":"Callback for when there is a change in the input field"},{"name":"onFocus","type":"(event?: any) => void","description":"Callback for when the input field is focused"},{"name":"placeholder","type":"string","description":"Placeholder value for the input"},{"name":"role","type":"string","description":"Determines the accessible role of the input."},{"name":"type","type":"| 'text'\n| 'date'\n| 'datetime-local'\n| 'email'\n| 'month'\n| 'number'\n| 'password'\n| 'search'\n| 'tel'\n| 'time'\n| 'url'","description":"Type that the input accepts."},{"name":"value","type":"string | number","description":"Value for the input"}]},{"name":"TextInputGroupUtilities","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the text input group utilities div"},{"name":"className","type":"string","description":"Additional classes applied to the text input group utilities container"}]}]},"Text input":{"id":"Text input","title":"Text input","source":"react","tabName":null,"slug":"/components/forms/text-input/react","propComponents":[{"name":"TextInput","description":"","props":[{"name":"aria-label","type":"string","description":"Aria-label. The text input requires an associated id or aria-label."},{"name":"className","type":"string","description":"Additional classes added to the text input."},{"name":"customIcon","type":"React.ReactNode","description":"Custom icon to render. If the validated prop is also passed, this will render an icon in addition to a validated icon."},{"name":"expandedProps","type":"TextInputExpandedObj","description":"Prop to apply expanded styling to the text input and link it to the element it is controlling. This should be used when the input controls a menu and that menu is expandable."},{"name":"isDisabled","type":"boolean","description":"Flag to show if the text input is disabled."},{"name":"isExpanded","type":"boolean","description":"Flag to apply expanded styling. expandedProps should now be used instead.","deprecated":true},{"name":"isLeftTruncated","type":"boolean","description":"Use isStartTruncated instead. Trim text at start","deprecated":true},{"name":"isRequired","type":"boolean","description":"Flag indicating whether the input is required"},{"name":"isStartTruncated","type":"boolean","description":"Trim text at start"},{"name":"onBlur","type":"(event?: any) => void","description":"Callback function when text input is blurred (focus leaves)"},{"name":"onChange","type":"(event: React.FormEvent<HTMLInputElement>, value: string) => void","description":"A callback for when the text input value changes."},{"name":"onFocus","type":"(event?: any) => void","description":"Callback function when text input is focused"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"placeholder","type":"string","description":"Placeholder of the text input when there is no value"},{"name":"readOnlyVariant","type":"'plain' | 'default'","description":"Sets the input as readonly and determines the readonly styling."},{"name":"type","type":"| 'text'\n| 'date'\n| 'datetime-local'\n| 'email'\n| 'month'\n| 'number'\n| 'password'\n| 'search'\n| 'tel'\n| 'time'\n| 'url'","description":"Type that the text input accepts."},{"name":"validated","type":"'success' | 'warning' | 'error' | 'default'","description":"Value to indicate if the text input is modified to show that validation state.\nIf set to success, text input will be modified to indicate valid state.\nIf set to error, text input will be modified to indicate error state."},{"name":"value","type":"string | number","description":"Value of the text input."}]},{"name":"TextInputExpandedObj","description":"","props":[{"name":"ariaControls","type":"string","description":"Id of the element that the text input is controlling expansion of.","required":true},{"name":"isExpanded","type":"boolean","description":"Flag to apply expanded styling.","required":true}]}]},"Text area":{"id":"Text area","title":"Text area","source":"react","tabName":null,"slug":"/components/forms/text-area/react","propComponents":[{"name":"TextArea","description":"","props":[{"name":"aria-label","type":"string","description":"Custom flag to show that the text area requires an associated id or aria-label."},{"name":"autoResize","type":"boolean","description":"Flag to modify height based on contents."},{"name":"className","type":"string","description":"Additional classes added to the text area."},{"name":"isDisabled","type":"boolean","description":"Flag to show if the text area is disabled."},{"name":"isRequired","type":"boolean","description":"Flag to show if the text area is required."},{"name":"onChange","type":"(event: React.ChangeEvent<HTMLTextAreaElement>, value: string) => void","description":"A callback for when the text area value changes."},{"name":"readOnlyVariant","type":"'default' | 'plain'","description":"Read only variant."},{"name":"resizeOrientation","type":"'horizontal' | 'vertical' | 'both'","description":"Sets the orientation to limit the resize to"},{"name":"validated","type":"'success' | 'warning' | 'error' | 'default'","description":"Value to indicate if the text area is modified to show that validation state.\nIf set to success, text area will be modified to indicate valid state.\nIf set to error, text area will be modified to indicate error state."},{"name":"value","type":"string | number","description":"Value of the text area."}]}]},"Tabs":{"id":"Tabs","title":"Tabs","source":"react","tabName":null,"slug":"/components/tabs/react","propComponents":[{"name":"Tabs","description":"","props":[{"name":"activeKey","type":"number | string","description":"The index of the active tab","defaultValue":"0"},{"name":"addButtonAriaLabel","type":"string","description":"Aria-label for the add button"},{"name":"aria-label","type":"string","description":"Provides an accessible label for the tabs. Labels should be unique for each set of tabs that are present on a page. When component is set to nav, this prop should be defined to differentiate the tabs from other navigation regions on the page."},{"name":"backScrollAriaLabel","type":"string","description":"Aria-label for the back scroll button","defaultValue":"'Scroll back'"},{"name":"children","type":"TabsChild | TabsChild[]","description":"Content rendered inside the tabs component. Only `Tab` components or expressions resulting in a falsy value are allowed here.","required":true},{"name":"className","type":"string","description":"Additional classes added to the tabs"},{"name":"component","type":"'div' | 'nav'","description":"Determines what tag is used around the tabs. Use \"nav\" to define the tabs inside a navigation region","defaultValue":"TabsComponent.div"},{"name":"defaultActiveKey","type":"number | string","description":"The index of the default active tab. Set this for uncontrolled Tabs"},{"name":"defaultIsExpanded","type":"boolean","description":"Flag indicating the default expanded state for uncontrolled expand/collapse of"},{"name":"expandable","type":"{\n  default?: 'expandable' | 'nonExpandable';\n  sm?: 'expandable' | 'nonExpandable';\n  md?: 'expandable' | 'nonExpandable';\n  lg?: 'expandable' | 'nonExpandable';\n  xl?: 'expandable' | 'nonExpandable';\n  '2xl'?: 'expandable' | 'nonExpandable';\n}","description":"Enable expandable vertical tabs at various breakpoints. (isVertical should be set to true for this to work)"},{"name":"forwardScrollAriaLabel","type":"string","description":"Aria-label for the forward scroll button","defaultValue":"'Scroll forward'"},{"name":"hasNoBorderBottom","type":"boolean","description":"Disables border bottom tab styling on tabs. Defaults to false. To remove the bottom border, set this prop to true.","defaultValue":"false"},{"name":"id","type":"string","description":"Uniquely identifies the tabs"},{"name":"inset","type":"{\n  default?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  sm?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  md?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  lg?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  xl?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  '2xl'?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n}","description":"Insets at various breakpoints."},{"name":"isBox","type":"boolean","description":"Enables box styling to the tab component","defaultValue":"false"},{"name":"isExpanded","type":"boolean","description":"Flag to indicate if the vertical tabs are expanded"},{"name":"isFilled","type":"boolean","description":"Enables the filled tab list layout","defaultValue":"false"},{"name":"isOverflowHorizontal","type":"boolean | HorizontalOverflowObject","description":"Flag which places overflowing tabs into a menu triggered by the last tab. Additionally an object can be passed with custom settings for the overflow tab."},{"name":"isSubtab","type":"boolean","description":"Enables subtab tab styling","defaultValue":"false"},{"name":"isVertical","type":"boolean","description":"Enables vertical tab styling","defaultValue":"false"},{"name":"leftScrollAriaLabel","type":"string","description":"Please use backScrollAriaLabel. Aria-label for the left scroll button","defaultValue":"'Scroll left'","deprecated":true},{"name":"mountOnEnter","type":"boolean","description":"Waits until the first \"enter\" transition to mount tab children (add them to the DOM)","defaultValue":"false"},{"name":"onAdd","type":"(event: React.MouseEvent<HTMLElement, MouseEvent>) => void","description":"Callback for the add button. Passing this property inserts the add button"},{"name":"onClose","type":"(event: React.MouseEvent<HTMLElement, MouseEvent>, eventKey: number | string) => void","description":"Callback to handle tab closing and adds a basic close button to all tabs. This is overridden by the tab actions property."},{"name":"onSelect","type":"(event: React.MouseEvent<HTMLElement, MouseEvent>, eventKey: number | string) => void","description":"Callback to handle tab selection","defaultValue":"() => undefined as any"},{"name":"onToggle","type":"(event: React.MouseEvent, isExpanded: boolean) => void","description":"Callback function to toggle the expandable tabs.","defaultValue":"(_event: React.MouseEvent, _isExpanded: boolean): void => undefined"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"rightScrollAriaLabel","type":"string","description":"Please use forwardScrollAriaLabel. Aria-label for the right scroll button","defaultValue":"'Scroll right'","deprecated":true},{"name":"toggleAriaLabel","type":"string","description":"Aria-label for the expandable toggle"},{"name":"toggleText","type":"string","description":"Text that appears in the expandable toggle"},{"name":"unmountOnExit","type":"boolean","description":"Unmounts tab children (removes them from the DOM) when they are no longer visible","defaultValue":"false"},{"name":"usePageInsets","type":"boolean","description":"Flag indicates that the tabs should use page insets."},{"name":"variant","type":"'default' | 'secondary'","description":"Tabs background color variant","defaultValue":"'default'"}]},{"name":"Tab","description":"","props":[{"name":"actions","type":"React.ReactNode","description":"Actions rendered beside the tab content"},{"name":"children","type":"React.ReactNode","description":"content rendered inside the Tab content area."},{"name":"className","type":"string","description":"additional classes added to the Tab"},{"name":"closeButtonAriaLabel","type":"string","description":"Aria-label for the close button added by passing the onClose property to Tabs."},{"name":"eventKey","type":"number | string","description":"uniquely identifies the tab","required":true},{"name":"href","type":"string","description":"URL associated with the Tab. A Tab with an href will render as an <a> instead of a <button>. A Tab inside a <Tabs component=\"nav\"> should have an href."},{"name":"inoperableEvents","type":"string[]","description":"Events to prevent when the button is in an aria-disabled state"},{"name":"isAriaDisabled","type":"boolean","description":"Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute"},{"name":"isCloseDisabled","type":"boolean","description":"Flag indicating the close button should be disabled"},{"name":"isDisabled","type":"boolean","description":"Adds disabled styling and disables the button using the disabled html attribute"},{"name":"isHidden","type":"boolean","description":"whether to render the tab or not"},{"name":"ouiaId","type":"number | string","description":"Value to set the data-ouia-component-id for the tab button."},{"name":"tabContentId","type":"string | number","description":"child id for case in which a TabContent section is defined outside of a Tabs component"},{"name":"tabContentRef","type":"React.RefObject<any>","description":"child reference for case in which a TabContent section is defined outside of a Tabs component"},{"name":"title","type":"React.ReactNode","description":"Content rendered in the tab title. Should be <TabTitleText> and/or <TabTitleIcon> for proper styling.","required":true},{"name":"tooltip","type":"React.ReactElement<any>","description":"Optional Tooltip rendered to a Tab. Should be <Tooltip> with appropriate props for proper rendering."}]},{"name":"TabContent","description":"","props":[{"name":"activeKey","type":"number | string","description":"Identifies the active Tab"},{"name":"aria-label","type":"string","description":"title of controlling Tab if used outside Tabs component"},{"name":"child","type":"React.ReactElement<any>","description":"Child to show in the content area"},{"name":"children","type":"any","description":"content rendered inside the tab content area if used outside Tabs component"},{"name":"className","type":"string","description":"class of tab content area if used outside Tabs component"},{"name":"eventKey","type":"number | string","description":"uniquely identifies the controlling Tab if used outside Tabs component"},{"name":"id","type":"string","description":"id passed from parent to identify the content section","required":true},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."}]},{"name":"TabTitleText","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Text to be rendered inside the tab button title.","required":true},{"name":"className","type":"string","description":"additional classes added to the tab title text","defaultValue":"''"}]},{"name":"TabTitleIcon","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Icon to be rendered inside the tab button title.","required":true},{"name":"className","type":"string","description":"additional classes added to the tab title icon","defaultValue":"''"}]},{"name":"TabAction","description":"","props":[{"name":"aria-label","type":"string","description":"Accessible label for the tab action"},{"name":"children","type":"React.ReactNode","description":"Content rendered in the tab action"},{"name":"className","type":"string","description":"Additional classes added to the tab action span"},{"name":"isDisabled","type":"boolean","description":"Flag indicating if the tab action is disabled"},{"name":"onClick","type":"(event: React.MouseEvent<HTMLElement, MouseEvent>) => void","description":"Click callback for tab action button"}]}]},"Switch":{"id":"Switch","title":"Switch","source":"react","tabName":null,"slug":"/components/switch/react","propComponents":[{"name":"Switch","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible name to the switch when the label prop is not passed, and must describe the isChecked=\"true\" state.","defaultValue":"undefined"},{"name":"aria-labelledby","type":"string","description":"Adds an accessible name to the switch via one or more referenced id(s). The computed accessible name must describe the isChecked=\"true\" state.","defaultValue":"undefined"},{"name":"className","type":"string","description":"Additional classes added to the switch"},{"name":"defaultChecked","type":"boolean","description":"Flag to set the default checked value of the switch when it is uncontrolled by React state.\nTo make the switch controlled instead use the isChecked prop, but do not use both."},{"name":"hasCheckIcon","type":"boolean","description":"Flag to show if the switch has a check icon."},{"name":"id","type":"string","description":"id for the label."},{"name":"isChecked","type":"boolean","description":"Flag to show if the switch is checked when it is controlled by React state.\nTo make the switch uncontrolled instead use the defaultChecked prop, but do not use both.","defaultValue":"true"},{"name":"isDisabled","type":"boolean","description":"Flag to show if the switch is disabled.","defaultValue":"false"},{"name":"isReversed","type":"boolean","description":"Flag to reverse the layout of toggle and label (label at start, toggle at end).","defaultValue":"false"},{"name":"label","type":"React.ReactNode","description":"Text value for the visible label"},{"name":"onChange","type":"(event: React.FormEvent<HTMLInputElement>, checked: boolean) => void","description":"A callback for when the switch selection changes. (event, isChecked) => {}","defaultValue":"() => undefined as any"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."}]}]},"Spinner":{"id":"Spinner","title":"Spinner","source":"react","tabName":null,"slug":"/components/spinner/react","propComponents":[{"name":"Spinner","description":"","props":[{"name":"aria-label","type":"string","description":"Accessible label to describe what is loading"},{"name":"aria-labelledBy","type":"string","description":"Id of element which describes what is being loaded"},{"name":"aria-valuetext","type":"string","description":"Text describing that current loading status or progress","defaultValue":"'Loading...'"},{"name":"className","type":"string","description":"Additional classes added to the Spinner.","defaultValue":"''"},{"name":"diameter","type":"string","description":"Diameter of spinner set as CSS variable"},{"name":"isInline","type":"boolean","description":"Indicates the spinner is inline and the size should inherit the text font size. This will override the size prop.","defaultValue":"false"},{"name":"size","type":"'sm' | 'md' | 'lg' | 'xl'","description":"Size variant of progress.","defaultValue":"'xl'"}]}]},"Slider":{"id":"Slider","title":"Slider","source":"react","tabName":null,"slug":"/components/slider/react","propComponents":[{"name":"Slider","description":"The main slider component.","props":[{"name":"areCustomStepsContinuous","type":"boolean","description":"Flag indicating if the slider is discrete for custom steps. This will cause the slider\nto snap to the closest value.","defaultValue":"false"},{"name":"aria-describedby","type":"string","description":"One or more id's to use for the slider thumb's accessible description."},{"name":"aria-labelledby","type":"string","description":"One or more id's to use for the slider thumb's accessible label."},{"name":"className","type":"string","description":"Additional classes added to the slider."},{"name":"customSteps","type":"SliderStepObject[]","description":"Array of custom slider step objects (value and label of each step) for the slider."},{"name":"endActions","type":"React.ReactNode","description":"Actions placed at the end of the slider."},{"name":"hasTooltipOverThumb","type":"boolean","description":"","defaultValue":"false"},{"name":"inputAriaLabel","type":"string","description":"Accessible label for the input field.","defaultValue":"'Slider value input'"},{"name":"inputLabel","type":"string | number","description":"Text label that is place after the input field."},{"name":"inputPosition","type":"'aboveThumb' | 'right' | 'end'","description":"Position of the input. Note \"right\" is deprecated. Use \"end\" instead","defaultValue":"'end'"},{"name":"inputValue","type":"number","description":"Value displayed in the input field.","defaultValue":"0"},{"name":"isDisabled","type":"boolean","description":"Adds disabled styling, and disables the slider and the input component if present.","defaultValue":"false"},{"name":"isInputVisible","type":"boolean","description":"Flag to show value input field.","defaultValue":"false"},{"name":"leftActions","type":"React.ReactNode","description":"Use startActions instead. Actions placed at the start of the slider.","deprecated":true},{"name":"max","type":"number","description":"The maximum permitted value.","defaultValue":"100"},{"name":"min","type":"number","description":"The minimum permitted value.","defaultValue":"0"},{"name":"onChange","type":"(\n  event: SliderOnChangeEvent,\n  value: number,\n  inputValue?: number,\n  setLocalInputValue?: React.Dispatch<React.SetStateAction<number>>\n) => void","description":"Value change callback. This is called when the slider value changes."},{"name":"rightActions","type":"React.ReactNode","description":"Use endActions instead. Actions placed to the right of the slider.","deprecated":true},{"name":"showBoundaries","type":"boolean","description":"Flag to indicate if boundaries should be shown for slider that does not have custom steps.","defaultValue":"true"},{"name":"showTicks","type":"boolean","description":"Flag to indicate if ticks should be shown for slider that does not have custom steps.","defaultValue":"false"},{"name":"startActions","type":"React.ReactNode","description":"Actions placed at the start of the slider."},{"name":"step","type":"number","description":"The step interval.","defaultValue":"1"},{"name":"thumbAriaLabel","type":"string","description":"","defaultValue":"'Value'"},{"name":"value","type":"number","description":"Current value of the slider.","defaultValue":"0"}]},{"name":"SliderStepObject","description":"Properties for creating custom steps in a slider. These properties should be passed in as\nan object within an array to the slider component's customSteps property.","props":[{"name":"isLabelHidden","type":"boolean","description":"Flag to hide the label."},{"name":"label","type":"string","description":"The display label for the step value. This is also used for the aria-valuetext attribute.","required":true},{"name":"value","type":"number","description":"Value of the step. This value is a percentage of the slider where the tick is drawn.","required":true}]}]},"Skip to content":{"id":"Skip to content","title":"Skip to content","source":"react","tabName":null,"slug":"/components/skip-to-content/react","propComponents":[{"name":"SkipToContent","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content to display within the skip to content component, typically a string.","defaultValue":"null"},{"name":"className","type":"string","description":"Additional styles to apply to the skip to content component.","defaultValue":"''"},{"name":"href","type":"string","description":"The skip to content link.","required":true}]}]},"Skeleton":{"id":"Skeleton","title":"Skeleton","source":"react","tabName":null,"slug":"/components/skeleton/react","propComponents":[{"name":"Skeleton","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the Skeleton"},{"name":"fontSize","type":"'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl'","description":"The font size height of the Skeleton"},{"name":"height","type":"string","description":"The height of the Skeleton. Must specify pixels or percentage."},{"name":"screenreaderText","type":"string","description":"Text read just to screen reader users"},{"name":"shape","type":"'circle' | 'square'","description":"The shape of the Skeleton"},{"name":"width","type":"string","description":"The width of the Skeleton. Must specify pixels or percentage."}]}]},"Simple list":{"id":"Simple list","title":"Simple list","source":"react","tabName":null,"slug":"/components/simple-list/react","propComponents":[{"name":"SimpleList","description":"","props":[{"name":"aria-label","type":"string","description":"aria-label for the <ul> element that wraps the SimpleList items."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the SimpleList","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the SimpleList container","defaultValue":"''"},{"name":"isControlled","type":"boolean","description":"Indicates whether component is controlled by its internal state","defaultValue":"true"},{"name":"onSelect","type":"(\n  ref: React.RefObject<HTMLButtonElement> | React.RefObject<HTMLAnchorElement>,\n  props: SimpleListItemProps\n) => void","description":"Callback when an item is selected"}]},{"name":"SimpleListGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the SimpleList group","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the SimpleList <ul>","defaultValue":"''"},{"name":"id","type":"string","description":"ID of SimpleList group","defaultValue":"''"},{"name":"title","type":"React.ReactNode","description":"Title of the SimpleList group","defaultValue":"''"},{"name":"titleClassName","type":"string","description":"Additional classes added to the SimpleList group title","defaultValue":"''"}]},{"name":"SimpleListItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the SimpleList item","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the SimpleList <li>","defaultValue":"''"},{"name":"component","type":"'button' | 'a'","description":"Component type of the SimpleList item","defaultValue":"'button'"},{"name":"componentClassName","type":"string","description":"Additional classes added to the SimpleList <a> or <button>","defaultValue":"''"},{"name":"componentProps","type":"any","description":"Additional props added to the SimpleList <a> or <button>"},{"name":"href","type":"string","description":"Default hyperlink location","defaultValue":"''"},{"name":"isActive","type":"boolean","description":"Indicates if the link is current/highlighted","defaultValue":"false"},{"name":"itemId","type":"number | string","description":"id for the item."},{"name":"onClick","type":"(event: React.MouseEvent | React.ChangeEvent) => void","description":"OnClick callback for the SimpleList item","defaultValue":"() => {}"},{"name":"type","type":"'button' | 'submit' | 'reset'","description":"Type of button SimpleList item","defaultValue":"'button'"}]}]},"Sidebar":{"id":"Sidebar","title":"Sidebar","source":"react","tabName":null,"slug":"/components/sidebar/react","propComponents":[{"name":"Sidebar","description":"","props":[{"name":"children","type":"React.ReactNode","description":""},{"name":"hasBorder","type":"boolean","description":"Adds a border between the panel and content."},{"name":"hasGutter","type":"boolean","description":"Adds space between the panel and content."},{"name":"hasNoBackground","type":"boolean","description":"Removes the background color."},{"name":"isPanelRight","type":"boolean","description":"Indicates that the panel is displayed to the right of the content when the oritentation is split.","defaultValue":"false"},{"name":"orientation","type":"'stack' | 'split'","description":"Indicates the direction of the layout. Default orientation is stack on small screens, and split on medium screens and above."}]},{"name":"SidebarContent","description":"","props":[{"name":"backgroundVariant","type":"'default' | 'secondary'","description":"Variant of the sidebar content background.","defaultValue":"'default'"},{"name":"children","type":"React.ReactNode","description":"","required":true},{"name":"hasNoBackground","type":"boolean","description":"Removes the background color."},{"name":"hasPadding","type":"boolean","description":"Adds padding to the content."}]},{"name":"SidebarPanel","description":"","props":[{"name":"backgroundVariant","type":"'default' | 'secondary'","description":"Variant of the sidebar panel background.","defaultValue":"'default'"},{"name":"children","type":"React.ReactNode","description":"","required":true},{"name":"hasNoBackground","type":"boolean","description":"Removes the background color."},{"name":"hasPadding","type":"boolean","description":"Adds padding to the panel."},{"name":"variant","type":"'default' | 'sticky' | 'static'","description":"Indicates whether the panel is positioned statically or sticky to the top. Default is sticky on small screens when the orientation is stack, and static on medium and above screens when the orientation is split.","defaultValue":"'default'"},{"name":"width","type":"{\n  default?: 'default' | 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  sm?: 'default' | 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  md?: 'default' | 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  lg?: 'default' | 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  xl?: 'default' | 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  '2xl'?: 'default' | 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n}","description":"Sets the panel width at various breakpoints. Default is 250px when the orientation is split."}]}]},"Select":{"id":"Select","title":"Select","source":"react","tabName":null,"slug":"/components/menus/select/react","propComponents":[{"name":"Select","description":"See the Menu documentation for additional props that may be passed.","props":[{"name":"children","type":"React.ReactNode","description":"Anything which can be rendered in a select"},{"name":"className","type":"string","description":"Classes applied to root element of select"},{"name":"isOpen","type":"boolean","description":"Flag to indicate if select is open"},{"name":"isPlain","type":"boolean","description":"Indicates if the select should be without the outer box-shadow"},{"name":"isScrollable","type":"boolean","description":"Indicates if the select menu should be scrollable"},{"name":"maxMenuHeight","type":"string","description":"Maximum height of select menu"},{"name":"menuHeight","type":"string","description":"Height of the select menu"},{"name":"onOpenChange","type":"(isOpen: boolean) => void","description":"Callback to allow the select component to change the open state of the menu.\nTriggered by clicking outside of the menu, or by pressing any keys specificed in onOpenChangeKeys."},{"name":"onOpenChangeKeys","type":"string[]","description":"Keys that trigger onOpenChange, defaults to tab and escape. It is highly recommended to include Escape in the array, while Tab may be omitted if the menu contains non-menu items that are focusable."},{"name":"onSelect","type":"(event?: React.MouseEvent<Element, MouseEvent>, value?: string | number) => void","description":"Function callback when user selects an option."},{"name":"popperProps","type":"SelectPopperProps","description":"Additional properties to pass to the popper"},{"name":"role","type":"string","description":"Determines the accessible role of the select. For a checkbox select pass in \"menu\"."},{"name":"selected","type":"any | any[]","description":"Single select option value for single select menus, or array of select option values for multi select. You can also specify isSelected on the SelectOption."},{"name":"shouldFocusFirstItemOnOpen","type":"boolean","description":"Flag indicating the first menu item should be focused after opening the menu.","beta":true},{"name":"shouldFocusToggleOnSelect","type":"boolean","description":"Flag indicating the toggle should be focused after a selection. If this use case is too restrictive, the optional toggleRef property with a node toggle may be used to control focus."},{"name":"toggle","type":"SelectToggleProps | ((toggleRef: React.RefObject<any>) => React.ReactNode)","description":"Select toggle. The toggle should either be a renderer function which forwards the given toggle ref, or a direct ReactNode that should be passed along with the toggleRef property.","required":true},{"name":"zIndex","type":"number","description":"z-index of the select menu"}]},{"name":"SelectOption","description":"See the MenuItem section of the Menu documentation for additional props that may be passed.","props":[{"name":"children","type":"React.ReactNode","description":"Anything which can be rendered in a select option"},{"name":"className","type":"string","description":"Classes applied to root element of select option"},{"name":"description","type":"React.ReactNode","description":"Description of the option"},{"name":"hasCheckbox","type":"boolean","description":"Indicates the option has a checkbox"},{"name":"icon","type":"React.ReactNode","description":"Render option with icon"},{"name":"isDisabled","type":"boolean","description":"Indicates the option is disabled"},{"name":"isExternalLink","type":"boolean","description":"Render an external link icon on focus or hover, and set the link's\n\"target\" attribute to a value of \"_blank\"."},{"name":"isFocused","type":"boolean","description":"Indicates the option is focused"},{"name":"isSelected","type":"boolean","description":"Indicates the option is selected"},{"name":"value","type":"any","description":"Identifies the component in the Select onSelect callback"}]},{"name":"SelectGroup","description":"See the MenuGroup section of the Menu documentation for additional props that may be passed.","props":[{"name":"children","type":"React.ReactNode","description":"Anything which can be rendered in a select group","required":true},{"name":"className","type":"string","description":"Classes applied to root element of select group"},{"name":"label","type":"string","description":"Label of the select group"}]},{"name":"SelectList","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything which can be rendered in a select list","required":true},{"name":"className","type":"string","description":"Classes applied to root element of select list"},{"name":"isAriaMultiselectable","type":"boolean","description":"Indicates to assistive technologies whether more than one item can be selected for a non-checkbox select","defaultValue":"false"}]},{"name":"MenuToggle","description":"","props":[{"name":"badge","type":"BadgeProps | React.ReactNode","description":"Optional badge rendered inside the toggle, after the children content"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the toggle"},{"name":"className","type":"string","description":"Additional classes added to the toggle"},{"name":"icon","type":"React.ReactNode","description":"Optional icon or image rendered inside the toggle, before the children content. It is\nrecommended to wrap most basic icons in our icon component."},{"name":"isDisabled","type":"boolean","description":"Flag indicating the toggle is disabled"},{"name":"isExpanded","type":"boolean","description":"Flag indicating the toggle has expanded styling"},{"name":"isFullHeight","type":"boolean","description":"Flag indicating the toggle is full height"},{"name":"isFullWidth","type":"boolean","description":"Flag indicating the toggle takes up the full width of its parent"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id. It will always target the toggle button."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"size","type":"'default' | 'sm'","description":"Adds styling which affects the size of the menu toggle"},{"name":"splitButtonOptions","type":"SplitButtonOptions","description":"Object used to configure a split button menu toggle"},{"name":"status","type":"'success' | 'warning' | 'danger'","description":"Status styles of the menu toggle"},{"name":"statusIcon","type":"React.ReactNode","description":"Overrides the status icon"},{"name":"variant","type":"'default' | 'plain' | 'primary' | 'plainText' | 'secondary' | 'typeahead'","description":"Variant styles of the menu toggle"}]},{"name":"SelectToggleProps","description":"","props":[{"name":"toggleNode","type":"React.ReactNode","description":"Select toggle node.","required":true},{"name":"toggleRef","type":"React.RefObject<HTMLButtonElement>","description":"Reference to the toggle."}]},{"name":"SelectPopperProps","description":"","props":[{"name":"appendTo","type":"HTMLElement | (() => HTMLElement) | 'inline'","description":"The container to append the select to. Defaults to document.body.\nIf your select is being cut off you can append it to an element higher up the DOM tree.\nSome examples:\nappendTo=\"inline\"\nappendTo={() => document.body}\nappendTo={document.getElementById('target')}"},{"name":"direction","type":"'up' | 'down'","description":"Vertical direction of the popper. If enableFlip is set to true, this will set the initial direction before the popper flips."},{"name":"enableFlip","type":"boolean","description":"Enable to flip the popper when it reaches the boundary"},{"name":"maxWidth","type":"string | 'trigger'","description":"Maximum width of the popper. If the value is \"trigger\", it will set the max width to the select toggle's width"},{"name":"minWidth","type":"string | 'trigger'","description":"Minimum width of the popper. If the value is \"trigger\", it will set the min width to the select toggle's width"},{"name":"position","type":"'right' | 'left' | 'center' | 'start' | 'end'","description":"Horizontal position of the popper"},{"name":"preventOverflow","type":"boolean","description":"Flag to prevent the popper from overflowing its container and becoming partially obscured."},{"name":"width","type":"string | 'trigger'","description":"Custom width of the popper. If the value is \"trigger\", it will set the width to the select toggle's width"}]}]},"Search input":{"id":"Search input","title":"Search input","source":"react","tabName":null,"slug":"/components/search-input/react","propComponents":[{"name":"SearchInput","description":"","props":[{"name":"advancedSearchDelimiter","type":"string","description":"Delimiter in the query string for pairing attributes with search values.\nRequired whenever attributes are passed as props."},{"name":"attributes","type":"string[] | SearchInputSearchAttribute[]","description":"Array of attribute values used for dynamically generated advanced search.","defaultValue":"[]"},{"name":"className","type":"string","description":"Additional classes added to the advanced search menu."},{"name":"formAdditionalItems","type":"React.ReactNode","description":""},{"name":"getAttrValueMap","type":"() => { [key: string]: string }","description":"Function which builds an attribute-value map by parsing the value in the search input."},{"name":"hasWordsAttrLabel","type":"React.ReactNode","description":"Attribute label for strings unassociated with one of the provided listed attributes.","defaultValue":"'Has words'"},{"name":"isSearchMenuOpen","type":"boolean","description":"Flag for toggling the open/close state of the advanced search menu."},{"name":"onChange","type":"(event: React.FormEvent<HTMLInputElement>, value: string) => void","description":"A callback for when the input value changes."},{"name":"onClear","type":"(event: React.SyntheticEvent<HTMLButtonElement>) => void","description":"A callback for when the user clicks the clear button."},{"name":"onSearch","type":"(\n  event: React.SyntheticEvent<HTMLButtonElement>,\n  value: string,\n  attrValueMap: { [key: string]: string }\n) => void","description":"A callback for when the search button is clicked."},{"name":"onToggleAdvancedMenu","type":"(e: React.SyntheticEvent<HTMLButtonElement>) => void","description":"A callback for when the open advanced search button is clicked."},{"name":"parentInputRef","type":"React.RefObject<any>","description":"Ref of the input element within the search input."},{"name":"parentRef","type":"React.RefObject<any>","description":"Ref of the div wrapping the whole search input."},{"name":"resetButtonLabel","type":"string","description":"Label for the button which resets the advanced search form and clears the search input.","defaultValue":"'Reset'"},{"name":"submitSearchButtonLabel","type":"string","description":"Label for the button which calls the onSearch event handler.","defaultValue":"'Search'"},{"name":"value","type":"string","description":"Value of the search input.","defaultValue":"''"}]},{"name":"SearchInputSearchAttribute","description":"Properties for adding search attributes to an advanced search input. These properties must\nbe passed in as an object within an array to the search input component's attribute properrty.","props":[{"name":"attr","type":"string","description":"The search attribute's value to be provided in the search input's query string.\nIt should have no spaces and be unique for every attribute.","required":true},{"name":"display","type":"React.ReactNode","description":"The search attribute's display name. It is used to label the field in the advanced\nsearch menu.","required":true}]},{"name":"SearchInputExpandable","description":"Properties for creating an expandable search input. These properties should be passed into\nthe search input component's expandableInput property.","props":[{"name":"isExpanded","type":"boolean","description":"Flag to indicate if the search input is expanded.","required":true},{"name":"onToggleExpand","type":"(event: React.SyntheticEvent<HTMLButtonElement>, isExpanded: boolean) => void","description":"Callback function to toggle the expandable search input.","required":true},{"name":"toggleAriaLabel","type":"string","description":"An accessible label for the expandable search input toggle.","required":true}]}]},"Radio":{"id":"Radio","title":"Radio","source":"react","tabName":null,"slug":"/components/forms/radio/react","propComponents":[{"name":"Radio","description":"","props":[{"name":"aria-label","type":"string","description":"Aria label for the radio."},{"name":"body","type":"React.ReactNode","description":"Body of the radio."},{"name":"checked","type":"boolean","description":"Flag to show if the radio is checked."},{"name":"className","type":"string","description":"Additional classes added to the radio wrapper. This wrapper will be div element by default. It will be a label element if\nisLabelWrapped is true, or it can be overridden by any element specified in the component prop.","defaultValue":"''"},{"name":"component","type":"React.ElementType","description":"Sets the radio wrapper component to render. Defaults to \"div\". If set to \"label\", behaves the same as if isLabelWrapped prop was specified."},{"name":"description","type":"React.ReactNode","description":"Description text of the radio."},{"name":"id","type":"string","description":"Id of the radio.","required":true},{"name":"inputClassName","type":"string","description":"Additional classes added to the radio input."},{"name":"isChecked","type":"boolean","description":"Flag to show if the radio is checked."},{"name":"isDisabled","type":"boolean","description":"Flag to show if the radio is disabled.","defaultValue":"false"},{"name":"isLabelWrapped","type":"boolean","description":"Flag to indicate whether the radio wrapper element is a native label element for the radio input. Will not apply if a component prop (with a value other than a \"label\") is specified."},{"name":"isValid","type":"boolean","description":"Flag to show if the radio selection is valid or invalid.","defaultValue":"true"},{"name":"label","type":"React.ReactNode","description":"Label text of the radio."},{"name":"labelPosition","type":"'start' | 'end'","description":"Sets the position of the label. Defaults to 'end' (after the radio input)."},{"name":"name","type":"string","description":"Name for group of radios","required":true},{"name":"onChange","type":"(event: React.FormEvent<HTMLInputElement>, checked: boolean) => void","description":"A callback for when the radio selection changes.","defaultValue":"() => {}"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."}]}]},"Progress stepper":{"id":"Progress stepper","title":"Progress stepper","source":"react","tabName":null,"slug":"/components/progress-stepper/react","propComponents":[{"name":"ProgressStepper","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible label to the progress stepper."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the progress stepper."},{"name":"className","type":"string","description":"Additional classes applied to the progress stepper container."},{"name":"isCenterAligned","type":"boolean","description":"Flag indicating the progress stepper should be centered."},{"name":"isCompact","type":"boolean","description":"Flag indicating the progress stepper should be rendered compactly."},{"name":"isVertical","type":"boolean","description":"Flag indicating the progress stepper has a vertical layout."}]},{"name":"ProgressStep","description":"","props":[{"name":"aria-label","type":"string","description":"Accessible label for the progress step. Should communicate all information being communicated by the progress\nstep's icon, including the variant and the completed status."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the progress step."},{"name":"className","type":"string","description":"Additional classes applied to the progress step container."},{"name":"description","type":"React.ReactNode","description":"Description text of a progress step."},{"name":"icon","type":"React.ReactNode","description":"Custom icon of a progress step. Will override default icons provided by the variant."},{"name":"isCurrent","type":"boolean","description":"Flag indicating the progress step is the current step."},{"name":"popoverRender","type":"(stepRef: React.RefObject<any>) => React.ReactNode","description":"Forwards the step ref to rendered function.  Use this prop to add a popover to the step."},{"name":"titleId","type":"string","description":"ID of the title of the progress step."},{"name":"variant","type":"'default' | 'success' | 'info' | 'pending' | 'warning' | 'danger'","description":"Variant of the progress step. Each variant has a default icon."}]}]},"Progress":{"id":"Progress","title":"Progress","source":"react","tabName":null,"slug":"/components/progress/react","propComponents":[{"name":"Progress","description":"","props":[{"name":"aria-label","type":"string","description":"Adds accessible text to the ProgressBar. Required when title not used and there is not any label associated with the progress bar","defaultValue":"null"},{"name":"aria-labelledby","type":"string","description":"Associates the ProgressBar with it's label for accessibility purposes. Required when title not used","defaultValue":"null"},{"name":"className","type":"string","description":"Classname for progress component.","defaultValue":"''"},{"name":"helperText","type":"React.ReactNode","description":"Content which can be used to convey additional information about the progress component.\nWe recommend the helper text component as it was designed for this purpose."},{"name":"id","type":"string","description":"DOM id for progress component.","defaultValue":"''"},{"name":"isTitleTruncated","type":"boolean","description":"Indicate whether to truncate the string title","defaultValue":"false"},{"name":"label","type":"React.ReactNode","description":"Text description of current progress value to display instead of percentage.","defaultValue":"null"},{"name":"max","type":"number","description":"Maximum value of progress.","defaultValue":"100"},{"name":"measureLocation","type":"'outside' | 'inside' | 'top' | 'none'","description":"Where the measure percent will be located.","defaultValue":"ProgressMeasureLocation.top"},{"name":"min","type":"number","description":"Minimal value of progress.","defaultValue":"0"},{"name":"size","type":"'sm' | 'md' | 'lg'","description":"Size variant of progress.","defaultValue":"null"},{"name":"title","type":"React.ReactNode","description":"Title above progress. The isTitleTruncated property will only affect string titles. Node title truncation must be handled manually.","defaultValue":"''"},{"name":"tooltipPosition","type":"'auto' | 'top' | 'bottom' | 'left' | 'right'","description":"Position of the tooltip which is displayed if title is truncated","defaultValue":"'top'"},{"name":"value","type":"number","description":"Actual value of progress.","defaultValue":"0"},{"name":"valueText","type":"string","description":"Accessible text description of current progress value, for when value is not a percentage. Use with label.","defaultValue":"null"},{"name":"variant","type":"'danger' | 'success' | 'warning'","description":"Status variant of progress.","defaultValue":"null"}]}]},"Popover":{"id":"Popover","title":"Popover","source":"react","tabName":null,"slug":"/components/popover/react","propComponents":[{"name":"Popover","description":"The main popover component. The following properties can also be passed into another component\nthat has a property specifically for passing in popover properties.","props":[{"name":"alertSeverityScreenReaderText","type":"string","description":"Text announced by screen reader when alert severity variant is set to indicate\nseverity level."},{"name":"alertSeverityVariant","type":"'custom' | 'info' | 'warning' | 'success' | 'danger'","description":"Severity variants for an alert popover. This modifies the color of the header to\nmatch the severity."},{"name":"animationDuration","type":"number","description":"The duration of the CSS fade transition animation.","defaultValue":"300"},{"name":"appendTo","type":"HTMLElement | ((ref?: HTMLElement) => HTMLElement) | 'inline'","description":"The element to append the popover to. Defaults to \"inline\".","defaultValue":"() => document.body"},{"name":"aria-label","type":"string","description":"Accessible label for the popover, required when header is not present.","defaultValue":"''"},{"name":"bodyContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Body content of the popover. If you want to close the popover after an action within the\nbody content, you can use the isVisible prop for manual control, or you can provide a\nfunction which will receive a callback as an argument to hide the popover, i.e.\nbodyContent={hide => <Button onClick={() => hide()}>Close</Button>}","required":true},{"name":"children","type":"ReactElement<any>","description":"The trigger reference element to which the popover is relatively placed to. If you cannot wrap\nthe element with the Popover, you can use the triggerRef prop instead.\nUsage: <Popover><Button>Reference</Button></Popover>"},{"name":"className","type":"string","description":"Additional classes added to the popover.","defaultValue":"''"},{"name":"closeBtnAriaLabel","type":"string","description":"Accessible label for the close button.","defaultValue":"'Close'"},{"name":"distance","type":"number","description":"Distance of the popover to its target. Defaults to 25.","defaultValue":"25"},{"name":"elementToFocus","type":"HTMLElement | SVGElement | string","description":"The element to focus when the popover becomes visible. By default the first\nfocusable element will receive focus."},{"name":"enableFlip","type":"boolean","description":"If true, tries to keep the popover in view by flipping it if necessary.\nIf the position is set to 'auto', this prop is ignored.","defaultValue":"true"},{"name":"flipBehavior","type":"| 'flip'\n| (\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end'\n  )[]","description":"The desired position to flip the popover to if the initial position is not possible.\nBy setting this prop to 'flip' it attempts to flip the popover to the opposite side if\nthere is no space.\nYou can also pass an array of positions that determines the flip order. It should contain\nthe initial position followed by alternative positions if that position is unavailable.\nExample: Initial position is 'top'. Button with popover is in the top right corner.\n'flipBehavior' is set to ['top', 'right', 'left']. Since there is no space to the top, it\nchecks if right is available. There's also no space to the right, so it finally shows the\npopover on the left.","defaultValue":"[\n  'top',\n  'bottom',\n  'left',\n  'right',\n  'top-start',\n  'top-end',\n  'bottom-start',\n  'bottom-end',\n  'left-start',\n  'left-end',\n  'right-start',\n  'right-end'\n]"},{"name":"footerContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Footer content of the popover. If you want to close the popover after an action within the\nfooter content, you can use the isVisible prop for manual control, or you can provide a\nfunction which will receive a callback as an argument to hide the popover, i.e.\nfooterContent={hide => <Button onClick={() => hide()}>Close</Button>}","defaultValue":"null"},{"name":"hasAutoWidth","type":"boolean","description":"Removes fixed-width and allows width to be defined by contents.","defaultValue":"false"},{"name":"hasNoPadding","type":"boolean","description":"Allows content to touch edges of popover container.","defaultValue":"false"},{"name":"headerComponent","type":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"Sets the heading level to use for the popover header. Defaults to h6.","defaultValue":"'h6'"},{"name":"headerContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Simple header content to be placed within a title. If you want to close the popover after\nan action within the header content, you can use the isVisible prop for manual control,\nor you can provide a function which will receive a callback as an argument to hide the\npopover, i.e. headerContent={hide => <Button onClick={() => hide()}>Close</Button>}","defaultValue":"null"},{"name":"headerIcon","type":"React.ReactNode","description":"Icon to be displayed in the popover header. *","defaultValue":"null"},{"name":"hideOnOutsideClick","type":"boolean","description":"Hides the popover when a click occurs outside (only works if isVisible is not controlled\nby the user).","defaultValue":"true"},{"name":"id","type":"string","description":"Id used as part of the various popover elements (popover-${id}-header/body/footer)."},{"name":"isVisible","type":"boolean","description":"True to show the popover programmatically. Used in conjunction with the shouldClose prop.\nBy default, the popover child element handles click events automatically. If you want to\ncontrol this programmatically, the popover will not auto-close if the close button is\nclicked, the escape key is used, or if a click occurs outside the popover. Instead, the\nconsumer is responsible for closing the popover themselves by adding a callback listener\nfor the shouldClose prop.","defaultValue":"null"},{"name":"maxWidth","type":"string","description":"Maximum width of the popover (default 18.75rem).","defaultValue":"popoverMaxWidth && popoverMaxWidth.value"},{"name":"minWidth","type":"string","description":"Minimum width of the popover (default 6.25rem).","defaultValue":"popoverMinWidth && popoverMinWidth.value"},{"name":"onHidden","type":"() => void","description":"Lifecycle function invoked when the popover has fully transitioned out.","defaultValue":"(): void => null"},{"name":"onHide","type":"(event: MouseEvent | KeyboardEvent) => void","description":"Lifecycle function invoked when the popover begins to transition out.","defaultValue":"(): void => null"},{"name":"onMount","type":"() => void","description":"Lifecycle function invoked when the popover has been mounted to the DOM.","defaultValue":"(): void => null"},{"name":"onShow","type":"(event: MouseEvent | KeyboardEvent) => void","description":"Lifecycle function invoked when the popover begins to transition in.","defaultValue":"(): void => null"},{"name":"onShown","type":"() => void","description":"Lifecycle function invoked when the popover has fully transitioned in.","defaultValue":"(): void => null"},{"name":"position","type":"| PopoverPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Popover position. Note: With the enableFlip property set to true, it will change the\nposition if there is not enough space for the starting position. The behavior of where it\nflips to can be controlled through the flipBehavior property.","defaultValue":"'top'"},{"name":"shouldClose","type":"(event: MouseEvent | KeyboardEvent, hideFunction?: () => void) => void","description":"Callback function that is only invoked when isVisible is also controlled. Called when the\npopover close button is clicked, the enter key was used on it, or the escape key is used.","defaultValue":"(): void => null"},{"name":"shouldOpen","type":"(event: MouseEvent | KeyboardEvent, showFunction?: () => void) => void","description":"Callback function that is only invoked when isVisible is also controlled. Called when the\nenter key is used on the focused trigger.","defaultValue":"(): void => null"},{"name":"showClose","type":"boolean","description":"Flag indicating whether the close button should be shown.","defaultValue":"true"},{"name":"triggerAction","type":"'click' | 'hover'","description":"Sets an interaction to open popover, defaults to \"click\"","defaultValue":"'click'"},{"name":"triggerRef","type":"HTMLElement | (() => HTMLElement) | React.RefObject<any>","description":"The trigger reference element to which the popover is relatively placed to. If you can wrap the\nelement with the popover, you can use the children prop instead, or both props together.\nWhen passed along with the trigger prop, the div element that wraps the trigger will be removed.\nUsage: <Popover triggerRef={() => document.getElementById('reference-element')} />"},{"name":"withFocusTrap","type":"boolean","description":"Whether to trap focus in the popover."},{"name":"zIndex","type":"number","description":"The z-index of the popover.","defaultValue":"9999"}]}]},"Panel":{"id":"Panel","title":"Panel","source":"react","tabName":null,"slug":"/components/panel/react","propComponents":[{"name":"Panel","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the panel"},{"name":"className","type":"string","description":"Class to add to outer div"},{"name":"isScrollable","type":"boolean","description":"Flag to add scrollable styling to the panel"},{"name":"variant","type":"'raised' | 'bordered' | 'secondary'","description":"Adds panel variant styles"}]},{"name":"PanelMain","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the panel main div"},{"name":"className","type":"string","description":"Class to add to outer div"},{"name":"maxHeight","type":"string","description":"Max height of the panel main div as a string with the value and unit"}]},{"name":"PanelMainBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the panel main body div"},{"name":"className","type":"string","description":"Class to add to outer div"}]},{"name":"PanelHeader","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the panel header"},{"name":"className","type":"string","description":"Class to add to outer div"}]},{"name":"PanelFooter","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the panel footer"},{"name":"className","type":"string","description":"Class to add to outer div"}]}]},"Pagination":{"id":"Pagination","title":"Pagination","source":"react","tabName":null,"slug":"/components/pagination/react","propComponents":[{"name":"Pagination","description":"The main pagination component.","props":[{"name":"children","type":"React.ReactNode","description":"What should be rendered inside the pagination."},{"name":"className","type":"string","description":"Additional classes for the pagination container.","defaultValue":"''"},{"name":"dropDirection","type":"'up' | 'down'","description":"Direction of dropdown context menu."},{"name":"firstPage","type":"number","description":"Page to start at.","defaultValue":"1"},{"name":"inset","type":"{\n  default?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  sm?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  md?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  lg?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  xl?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n  '2xl'?: 'insetNone' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl';\n}","description":"Insets at various breakpoints."},{"name":"isCompact","type":"boolean","description":"Flag indicating if pagination is compact.","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Flag indicating if pagination is disabled.","defaultValue":"false"},{"name":"isLastFullPageShown","type":"boolean","description":"Indicate whether to show last full page of results when user selects perPage value\ngreater than remaining rows.","defaultValue":"false"},{"name":"isStatic","type":"boolean","description":"Flag indicating if pagination should not be sticky on mobile.","defaultValue":"false"},{"name":"isSticky","type":"boolean","description":"Flag indicating if pagination should stick to its position (based on variant).","defaultValue":"false"},{"name":"itemCount","type":"number","description":"Total number of items."},{"name":"itemsEnd","type":"number","description":"Last index of items on current page.","defaultValue":"null"},{"name":"itemsStart","type":"number","description":"First index of items on current page.","defaultValue":"null"},{"name":"menuAppendTo","type":"HTMLElement | (() => HTMLElement) | 'inline'","description":"The container to append the pagination options menu to.","beta":true},{"name":"offset","type":"number","description":"Start index of rows to display, used in place of providing page.","defaultValue":"null"},{"name":"onFirstClick","type":"(event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void","description":"Function called when user clicks on navigate to first page.","defaultValue":"() => undefined"},{"name":"onLastClick","type":"(event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void","description":"Function called when user clicks on navigate to last page.","defaultValue":"() => undefined"},{"name":"onNextClick","type":"(event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void","description":"Function called when user clicks on navigate to next page.","defaultValue":"() => undefined"},{"name":"onPageInput","type":"(event: React.KeyboardEvent<HTMLInputElement>, page: number) => void","description":"Function called when user inputs page number.","defaultValue":"() => undefined"},{"name":"onPerPageSelect","type":"(\n  event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n  newPerPage: number,\n  newPage: number,\n  startIdx?: number,\n  endIdx?: number\n) => void","description":"Function called when user selects number of items per page.","defaultValue":"() => undefined"},{"name":"onPreviousClick","type":"(event: React.SyntheticEvent<HTMLButtonElement>, page: number) => void","description":"Function called when user clicks on navigate to previous page.","defaultValue":"() => undefined"},{"name":"onSetPage","type":"(\n  event: React.MouseEvent | React.KeyboardEvent | MouseEvent,\n  newPage: number,\n  perPage?: number,\n  startIdx?: number,\n  endIdx?: number\n) => void","description":"Function called when user sets page.","defaultValue":"() => undefined"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"page","type":"number","description":"Current page number.","defaultValue":"1"},{"name":"perPage","type":"number","description":"Number of items per page.","defaultValue":"defaultPerPageOptions[0].value"},{"name":"perPageOptions","type":"PerPageOptions[]","description":"Array of the number of items per page options.","defaultValue":"[\n  {\n    title: '10',\n    value: 10\n  },\n  {\n    title: '20',\n    value: 20\n  },\n  {\n    title: '50',\n    value: 50\n  },\n  {\n    title: '100',\n    value: 100\n  }\n]"},{"name":"titles","type":"PaginationTitles","description":"Object with titles to display in pagination.","defaultValue":"{\n  items: '',\n  page: '',\n  pages: '',\n  itemsPerPage: 'Items per page',\n  perPageSuffix: 'per page',\n  toFirstPageAriaLabel: 'Go to first page',\n  toPreviousPageAriaLabel: 'Go to previous page',\n  toLastPageAriaLabel: 'Go to last page',\n  toNextPageAriaLabel: 'Go to next page',\n  optionsToggleAriaLabel: '',\n  currPageAriaLabel: 'Current page',\n  paginationAriaLabel: 'Pagination',\n  ofWord: 'of'\n}"},{"name":"toggleTemplate","type":"((props: PaginationToggleTemplateProps) => React.ReactElement) | string","description":"This will be shown in pagination toggle span. You can use firstIndex, lastIndex,\nitemCount, itemsTitle, and/or ofWord props."},{"name":"usePageInsets","type":"boolean","description":"Flag indicating that pagination should use page insets."},{"name":"variant","type":"'top' | 'bottom' | PaginationVariant","description":"Position where pagination is rendered.","defaultValue":"PaginationVariant.top"},{"name":"widgetId","type":"string","description":"Id to ideintify widget on page.","defaultValue":"'options-menu'"}]},{"name":"PaginationTitles","description":"Properties to customize various pagination titles. The following properties should be\npassed into the pagination component's title property.","props":[{"name":"currPageAriaLabel","type":"string","description":"Accessible label for the input displaying the current page."},{"name":"items","type":"string","description":"The type or title of the items being paginated."},{"name":"itemsPerPage","type":"string","description":"The title of the pagination options menu."},{"name":"ofWord","type":"string","description":"Label for the English word \"of\"."},{"name":"optionsToggleAriaLabel","type":"string","description":"Accessible label for the options toggle."},{"name":"page","type":"string","description":"The title of a page displayed beside the page number."},{"name":"pages","type":"string","description":"The title of a page displayed beside the page number (plural form)."},{"name":"paginationAriaLabel","type":"string","description":"Accessible label for the pagination component."},{"name":"perPageSuffix","type":"string","description":"The suffix to be displayed after each option on the options menu dropdown."},{"name":"toFirstPageAriaLabel","type":"string","description":"Accessible label for the button which moves to the first page."},{"name":"toLastPageAriaLabel","type":"string","description":"Accessible label for the button which moves to the last page."},{"name":"toNextPageAriaLabel","type":"string","description":"Accessible label for the button which moves to the next page."},{"name":"toPreviousPageAriaLabel","type":"string","description":"Accessible label for the button which moves to the previous page."}]},{"name":"PerPageOptions","description":"Properties to customize the content and behavior of the pagination dropdown options. These\nproperties should be passed into the pagination component's perPageOptions property.","props":[{"name":"title","type":"string","description":"The text title of the option, which is rendered inside the pagination dropdown menu."},{"name":"value","type":"number","description":"The value of the option, which determines how many items are displayed per page."}]},{"name":"PaginationToggleTemplateProps","description":"Allows more customization of the pagination dropdown toggle. The following properties\nshould be passed into the pagination component's toggleTemplate property.","props":[{"name":"firstIndex","type":"number","description":"The first index of the items being paginated"},{"name":"itemCount","type":"number","description":"The total number of items being paginated"},{"name":"itemsTitle","type":"string","description":"The type or title of the items being paginated"},{"name":"lastIndex","type":"number","description":"The last index of the items being paginated"},{"name":"ofWord","type":"React.ReactNode","description":"The word that joins the index and itemCount/itemsTitle"}]}]},"Page":{"id":"Page","title":"Page","source":"react","tabName":null,"slug":"/components/page/react","propComponents":[{"name":"Page","description":"","props":[{"name":"additionalGroupedContent","type":"React.ReactNode","description":"Additional content of the group"},{"name":"banner","type":"React.ReactNode","description":"Banner component for the page. This will be rendered above a breadcrumb if one is also passed."},{"name":"breadcrumb","type":"React.ReactNode","description":"Breadcrumb component for the page"},{"name":"breadcrumbProps","type":"PageBreadcrumbProps","description":"Additional props of the breadcrumb"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the main section of the page layout (e.g. <PageSection />)"},{"name":"className","type":"string","description":"Additional classes added to the page layout"},{"name":"defaultManagedSidebarIsOpen","type":"boolean","description":"If true, the managed sidebar is initially open for desktop view","defaultValue":"true"},{"name":"drawerDefaultSize","type":"string","description":"Sets default drawer size"},{"name":"drawerMaxSize","type":"string","description":"Sets the maximum drawer size"},{"name":"drawerMinSize","type":"string","description":"Sets the minimum drawer size"},{"name":"getBreakpoint","type":"(width: number | null) => 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'","description":"The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\nYou can override the default getBreakpoint function to return breakpoints at different sizes than the default\nYou can view the default getBreakpoint function here:\nhttps://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts","defaultValue":"getBreakpoint"},{"name":"getVerticalBreakpoint","type":"(height: number | null) => 'default' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'","description":"The page resize observer uses the breakpoints returned from this function when adding the pf-m-breakpoint-[default|sm|md|lg|xl|2xl] class\nYou can override the default getVerticalBreakpoint function to return breakpoints at different sizes than the default\nYou can view the default getVerticalBreakpoint function here:\nhttps://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts","defaultValue":"getVerticalBreakpoint"},{"name":"groupProps","type":"PageGroupProps","description":"Additional props of the group"},{"name":"horizontalSubnav","type":"React.ReactNode","description":"Horizontal sub navigation component for the page"},{"name":"isBreadcrumbGrouped","type":"boolean","description":"Flag indicating if the breadcrumb should be in a group"},{"name":"isBreadcrumbWidthLimited","type":"boolean","description":"Flag indicating if breadcrumb width should be limited","defaultValue":"false"},{"name":"isContentFilled","type":"boolean","description":"Enables children to fill the available vertical space. Child page sections or groups that should fill should be passed the isFilled property."},{"name":"isHorizontalSubnavGrouped","type":"boolean","description":"Flag indicating if the horizontal sub navigation should be in a group"},{"name":"isHorizontalSubnavWidthLimited","type":"boolean","description":"Flag indicating if horizontal sub navigation width should be limited"},{"name":"isManagedSidebar","type":"boolean","description":"If true, manages the sidebar open/close state and there is no need to pass the isSidebarOpen boolean into\nthe sidebar component or add a callback onSidebarToggle function into the Masthead component","defaultValue":"false"},{"name":"isNotificationDrawerExpanded","type":"boolean","description":"Flag indicating Notification drawer in expanded","defaultValue":"false"},{"name":"mainAriaLabel","type":"string","description":"Accessible label, can be used to name main section"},{"name":"mainComponent","type":"'main' | 'div'","description":"HTML component used as main component of the page. Defaults to 'main', only pass in 'div' if another 'main' element already exists.","defaultValue":"'main'"},{"name":"mainContainerId","type":"string","description":"an id to use for the [role=\"main\"] element"},{"name":"mainTabIndex","type":"number | null","description":"tabIndex to use for the [role=\"main\"] element, null to unset it","defaultValue":"-1"},{"name":"masthead","type":"React.ReactNode","description":"Masthead component (e.g. <Masthead />)"},{"name":"notificationDrawer","type":"React.ReactNode","description":"Notification drawer component for an optional notification drawer (e.g. <NotificationDrawer />)"},{"name":"onNotificationDrawerExpand","type":"(event: KeyboardEvent | React.MouseEvent | React.TransitionEvent) => void","description":"Callback when notification drawer panel is finished expanding.","defaultValue":"() => null"},{"name":"onPageResize","type":"((event: MouseEvent | TouchEvent | React.KeyboardEvent, object: any) => void) | null","description":"Can add callback to be notified when resize occurs, for example to set the sidebar isSidebarOpen prop to false for a width < 768px\nReturns object { mobileView: boolean, windowSize: number }"},{"name":"role","type":"string","description":"Sets the value for role on the <main> element"},{"name":"sidebar","type":"React.ReactNode","description":"Sidebar component for a side nav (e.g. <PageSidebar />)"},{"name":"skipToContent","type":"React.ReactElement","description":"Skip to content component for the page"}]},{"name":"PageSidebar","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the page sidebar (e.g. <PageSidebarBody />"},{"name":"className","type":"string","description":"Additional classes added to the page sidebar","defaultValue":"''"},{"name":"id","type":"string","description":"Sidebar id","defaultValue":"'page-sidebar'"},{"name":"isManagedSidebar","type":"boolean","description":"If true, manages the sidebar open/close state and there is no need to pass the isSidebarOpen boolean into\nthe sidebar component or add a callback onSidebarToggle function into the Masthead component"},{"name":"isSidebarOpen","type":"boolean","description":"Programmatically manage if the sidebar is shown, if isManagedSidebar is set to true in the Page component, this prop is managed","defaultValue":"true"}]},{"name":"PageSidebarBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the page sidebar body"},{"name":"className","type":"string","description":"Additional classes added to the page sidebar body"},{"name":"isContextSelector","type":"boolean","description":"Flag indicating that the page sidebar body is for a context selector/perspective switcher"},{"name":"isFilled","type":"boolean","description":"Flag indicating that the page sidebar body should fill the available vertical space."},{"name":"usePageInsets","type":"boolean","description":"Flag indicating that the page sidebar body should use page insets."}]},{"name":"PageSection","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible name to the page section. Required when the hasOverflowScroll prop is set to true.\nThis prop should also be passed in if a heading is not being used to describe the content of the page section."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the section"},{"name":"className","type":"string","description":"Additional classes added to the section","defaultValue":"''"},{"name":"component","type":"unknown","description":"Sets the base component to render. Defaults to section","defaultValue":"'section'"},{"name":"hasBodyWrapper","type":"boolean","description":"Flag indicating whether children passed to the component should be wrapped by a PageBody.\nSet this to false in order to pass multiple, custom PageBody's as children.","defaultValue":"true","beta":true},{"name":"hasOverflowScroll","type":"boolean","description":"Flag indicating if the PageSection has a scrolling overflow","defaultValue":"false"},{"name":"hasShadowBottom","type":"boolean","description":"Modifier indicating if PageSection should have a shadow at the bottom","defaultValue":"false"},{"name":"hasShadowTop","type":"boolean","description":"Modifier indicating if PageSection should have a shadow at the top","defaultValue":"false"},{"name":"isCenterAligned","type":"boolean","description":"Flag indicating if the section content is center aligned. isWidthLimited must be set for this to work","defaultValue":"false"},{"name":"isFilled","type":"boolean","description":"Enables the page section to fill the available vertical space if true, or disable filling if false."},{"name":"isWidthLimited","type":"boolean","description":"Limits the width of the section","defaultValue":"false"},{"name":"padding","type":"{\n  default?: 'padding' | 'noPadding';\n  sm?: 'padding' | 'noPadding';\n  md?: 'padding' | 'noPadding';\n  lg?: 'padding' | 'noPadding';\n  xl?: 'padding' | 'noPadding';\n  '2xl'?: 'padding' | 'noPadding';\n}","description":"Padding at various breakpoints."},{"name":"stickyOnBreakpoint","type":"{\n  default?: 'top' | 'bottom';\n  sm?: 'top' | 'bottom';\n  md?: 'top' | 'bottom';\n  lg?: 'top' | 'bottom';\n  xl?: 'top' | 'bottom';\n  '2xl'?: 'top' | 'bottom';\n}","description":"Modifier indicating if the PageBreadcrumb is sticky to the top or bottom at various breakpoints"},{"name":"type","type":"'default' | 'subnav' | 'breadcrumb' | 'tabs' | 'wizard'","description":"Section type variant","defaultValue":"'default'"},{"name":"variant","type":"'default' | 'secondary'","description":"Section background color variant. This will only apply when the type prop has the \"default\" value.","defaultValue":"'default'"}]},{"name":"PageGroup","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible name to the page group when the hasOverflowScroll prop is set to true."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside of the PageGroup"},{"name":"className","type":"string","description":"Additional classes to apply to the PageGroup","defaultValue":"''"},{"name":"hasOverflowScroll","type":"boolean","description":"Flag indicating if the PageGroup has a scrolling overflow","defaultValue":"false"},{"name":"hasShadowBottom","type":"boolean","description":"Modifier indicating if PageGroup should have a shadow at the bottom","defaultValue":"false"},{"name":"hasShadowTop","type":"boolean","description":"Modifier indicating if PageGroup should have a shadow at the top","defaultValue":"false"},{"name":"isFilled","type":"boolean","description":"Enables the page group to fill the available vertical space if true, or disable filling if false."},{"name":"stickyOnBreakpoint","type":"{\n  default?: 'top' | 'bottom';\n  sm?: 'top' | 'bottom';\n  md?: 'top' | 'bottom';\n  lg?: 'top' | 'bottom';\n  xl?: 'top' | 'bottom';\n  '2xl'?: 'top' | 'bottom';\n}","description":"Modifier indicating if the PageBreadcrumb is sticky to the top or bottom at various breakpoints"}]},{"name":"PageBreadcrumb","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible name to the breadcrumb section. Required when the hasOverflowScroll prop is set to true."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside of the PageBreadcrumb"},{"name":"className","type":"string","description":"Additional classes to apply to the PageBreadcrumb","defaultValue":"''"},{"name":"hasBodyWrapper","type":"boolean","description":"Flag indicating whether children passed to the component should be wrapped by a PageBody.\nSet this to false in order to pass multiple, custom PageBody's as children.","defaultValue":"true","beta":true},{"name":"hasOverflowScroll","type":"boolean","description":"Flag indicating if the PageBreadcrumb has a scrolling overflow","defaultValue":"false"},{"name":"hasShadowBottom","type":"boolean","description":"Flag indicating if PageBreadcrumb should have a shadow at the bottom","defaultValue":"false"},{"name":"hasShadowTop","type":"boolean","description":"Flag indicating if PageBreadcrumb should have a shadow at the top","defaultValue":"false"},{"name":"isWidthLimited","type":"boolean","description":"Limits the width of the breadcrumb"},{"name":"stickyOnBreakpoint","type":"{\n  default?: 'top' | 'bottom';\n  sm?: 'top' | 'bottom';\n  md?: 'top' | 'bottom';\n  lg?: 'top' | 'bottom';\n  xl?: 'top' | 'bottom';\n  '2xl'?: 'top' | 'bottom';\n}","description":"Modifier indicating if the PageBreadcrumb is sticky to the top or bottom at various breakpoints"}]},{"name":"PageToggleButton","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content of the page toggle button"},{"name":"id","type":"string","description":"Button id","defaultValue":"'nav-toggle'"},{"name":"isSidebarOpen","type":"boolean","description":"True if the sidebar is shown","defaultValue":"true"},{"name":"onSidebarToggle","type":"() => void","description":"Callback function to handle the sidebar toggle button, managed by the Page component if the Page isManagedSidebar prop is set to true","defaultValue":"() => undefined as any"}]}]},"Overflow menu":{"id":"Overflow menu","title":"Overflow menu","source":"react","tabName":null,"slug":"/components/overflow-menu/react","propComponents":[{"name":"OverflowMenu","description":"","props":[{"name":"breakpoint","type":"'sm' | 'md' | 'lg' | 'xl' | '2xl'","description":"Indicates breakpoint at which to switch between horizontal menu and vertical dropdown","required":true},{"name":"breakpointReference","type":"HTMLElement | (() => HTMLElement) | React.RefObject<any>","description":"A container reference to base the specified breakpoint on instead of the viewport width."},{"name":"children","type":"any","description":"Any elements that can be rendered in the menu"},{"name":"className","type":"string","description":"Additional classes added to the OverflowMenu."}]},{"name":"OverflowMenuContent","description":"","props":[{"name":"children","type":"any","description":"Any elements that can be rendered in the menu"},{"name":"className","type":"string","description":"Additional classes added to the OverflowMenuContent"},{"name":"isPersistent","type":"boolean","description":"Modifies the overflow menu content visibility"}]},{"name":"OverflowMenuControl","description":"","props":[{"name":"children","type":"any","description":"Any elements that can be rendered in the menu"},{"name":"className","type":"string","description":"Additional classes added to the OverflowMenuControl"},{"name":"hasAdditionalOptions","type":"boolean","description":"Triggers the overflow dropdown to persist at all viewport sizes"}]},{"name":"OverflowMenuDropdownItem","description":"","props":[{"name":"isShared","type":"boolean","description":"Indicates when a dropdown item shows and hides the corresponding list item","defaultValue":"false"},{"name":"itemId","type":"string | number","description":"Identifies the component in the dropdown onSelect callback"}]},{"name":"OverflowMenuGroup","description":"","props":[{"name":"children","type":"any","description":"Any elements that can be rendered in the menu"},{"name":"className","type":"string","description":"Additional classes added to the OverflowMenuGroup"},{"name":"groupType","type":"'button' | 'icon'","description":"Indicates a button or icon group"},{"name":"isPersistent","type":"boolean","description":"Modifies the overflow menu group visibility","defaultValue":"false"}]},{"name":"OverflowMenuItem","description":"","props":[{"name":"children","type":"any","description":"Any elements that can be rendered in the menu"},{"name":"className","type":"string","description":"Additional classes added to the OverflowMenuItem"},{"name":"isPersistent","type":"boolean","description":"Modifies the overflow menu item visibility","defaultValue":"false"}]}]},"Number input":{"id":"Number input","title":"Number input","source":"react","tabName":null,"slug":"/components/number-input/react","propComponents":[{"name":"NumberInput","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the number input"},{"name":"inputAriaLabel","type":"string","description":"Aria label of the input","defaultValue":"'Input'"},{"name":"inputName","type":"string","description":"Name of the input"},{"name":"inputProps","type":"any","description":"Additional properties added to the text input"},{"name":"isDisabled","type":"boolean","description":"Indicates the whole number input should be disabled","defaultValue":"false"},{"name":"max","type":"number","description":"Maximum value of the number input, disabling the plus button when reached"},{"name":"min","type":"number","description":"Minimum value of the number input, disabling the minus button when reached"},{"name":"minusBtnAriaLabel","type":"string","description":"Aria label of the minus button","defaultValue":"'Minus'"},{"name":"minusBtnProps","type":"ButtonProps","description":"Additional properties added to the minus button"},{"name":"onBlur","type":"(event?: any) => void","description":"Callback function when text input is blurred (focus leaves)"},{"name":"onChange","type":"(event: React.FormEvent<HTMLInputElement>) => void","description":"Callback for the text input changing"},{"name":"onMinus","type":"(event: React.MouseEvent, name?: string) => void","description":"Callback for the minus button","defaultValue":"() => {}"},{"name":"onPlus","type":"(event: React.MouseEvent, name?: string) => void","description":"Callback for the plus button","defaultValue":"() => {}"},{"name":"plusBtnAriaLabel","type":"string","description":"Aria label of the plus button","defaultValue":"'Plus'"},{"name":"plusBtnProps","type":"ButtonProps","description":"Additional properties added to the plus button"},{"name":"unit","type":"React.ReactNode","description":"Adds the given unit to the number input"},{"name":"unitPosition","type":"'before' | 'after'","description":"Position of the number input unit in relation to the number input","defaultValue":"'after'"},{"name":"validated","type":"'default' | 'error' | 'warning' | 'success' | ValidatedOptions","description":"Value to indicate if the input is modified to show that validation state","defaultValue":"ValidatedOptions.default"},{"name":"value","type":"number | ''","description":"Value of the number input","defaultValue":"0"},{"name":"widthChars","type":"number","description":"Sets the width of the number input to a number of characters"}]}]},"Notification drawer":{"id":"Notification drawer","title":"Notification drawer","source":"react","tabName":null,"slug":"/components/notification-drawer/react","propComponents":[{"name":"NotificationDrawer","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the notification drawer"},{"name":"className","type":"string","description":"Additional classes added to the notification drawer"}]},{"name":"NotificationDrawerBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the body of the notification drawer"},{"name":"className","type":"string","description":"Additional classes added to the notification drawer body","defaultValue":"''"}]},{"name":"NotificationDrawerHeader","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the drawer"},{"name":"className","type":"string","description":"Additional classes for notification drawer header.","defaultValue":"''"},{"name":"closeButtonAriaLabel","type":"string","description":"Adds custom accessible text to the notification drawer close button.","defaultValue":"'Close'"},{"name":"count","type":"number","description":"Notification drawer heading count"},{"name":"customText","type":"string","description":"Notification drawer heading custom text which can be used instead of providing count/unreadText"},{"name":"onClose","type":"(event: KeyboardEvent | React.MouseEvent) => void","description":"Callback for when close button is clicked"},{"name":"title","type":"string","description":"Notification drawer heading title","defaultValue":"'Notifications'"},{"name":"unreadText","type":"string","description":"Notification drawer heading unread text used in combination with a count","defaultValue":"'unread'"}]},{"name":"NotificationDrawerGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the group"},{"name":"className","type":"string","description":"Additional classes added to the group","defaultValue":"''"},{"name":"count","type":"number","description":"Notification drawer group count","required":true},{"name":"headingLevel","type":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"Sets the heading level to use for the group title. Default is h1.","defaultValue":"'h1'"},{"name":"isExpanded","type":"boolean","description":"Adds styling to the group to indicate expanded state","required":true},{"name":"isRead","type":"boolean","description":"Adds styling to the group to indicate whether it has been read","defaultValue":"false"},{"name":"onExpand","type":"(event: any, value: boolean) => void","description":"Callback for when group button is clicked to expand","defaultValue":"(event: any, expanded: boolean) => undefined as any"},{"name":"title","type":"React.ReactNode","description":"Notification drawer group title","required":true},{"name":"tooltipPosition","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Position of the tooltip which is displayed if text is truncated"},{"name":"truncateTitle","type":"number","description":"Truncate title to number of lines","defaultValue":"0"}]},{"name":"NotificationDrawerGroupList","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the notification drawer list body"},{"name":"className","type":"string","description":"Additional classes added to the notification drawer list body","defaultValue":"''"}]},{"name":"NotificationDrawerList","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible label to the notification drawer list."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the notification drawer list body"},{"name":"className","type":"string","description":"Additional classes added to the notification drawer list body","defaultValue":"''"},{"name":"isHidden","type":"boolean","description":"Adds styling to the notification drawer list to indicate expand/hide state","defaultValue":"false"}]},{"name":"NotificationDrawerListItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the list item","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the list item","defaultValue":"''"},{"name":"isHoverable","type":"boolean","description":"Modifies the list item to include hover styles on :hover","defaultValue":"true"},{"name":"isRead","type":"boolean","description":"Adds styling to the list item to indicate it has been read","defaultValue":"false"},{"name":"onClick","type":"(event: any) => void","description":"Callback for when a list item is clicked","defaultValue":"(event: React.MouseEvent) => undefined as any"},{"name":"readStateScreenReaderText","type":"string","description":"Visually hidden text that conveys the current read state of the notification list item"},{"name":"tabIndex","type":"number","description":"Tab index for the list item","defaultValue":"0"},{"name":"variant","type":"'custom' | 'success' | 'danger' | 'warning' | 'info'","description":"Variant indicates the severity level","defaultValue":"'custom'"}]},{"name":"NotificationDrawerListItemBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the list item body"},{"name":"className","type":"string","description":"Additional classes added to the list item body","defaultValue":"''"},{"name":"timestamp","type":"React.ReactNode","description":"List item timestamp"}]},{"name":"NotificationDrawerListItemHeader","description":"","props":[{"name":"actionHasNoOffset","type":"boolean","description":"Removes the offset of the notification drawer actions.","defaultValue":"false"},{"name":"children","type":"React.ReactNode","description":"Actions rendered inside the notification drawer list item header"},{"name":"className","type":"string","description":"Additional classes for notification drawer list item header.","defaultValue":"''"},{"name":"headingLevel","type":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"Sets the heading level to use for the list item header title. Default is h2.","defaultValue":"'h2'"},{"name":"icon","type":"React.ReactNode","description":"Add custom icon for notification drawer list item header","defaultValue":"null"},{"name":"srTitle","type":"string","description":"Notification drawer list item header screen reader title"},{"name":"title","type":"string","description":"Notification drawer list item title","required":true},{"name":"tooltipPosition","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Position of the tooltip which is displayed if text is truncated"},{"name":"truncateTitle","type":"number","description":"Truncate title to number of lines","defaultValue":"0"},{"name":"variant","type":"'success' | 'danger' | 'warning' | 'info' | 'custom'","description":"Variant indicates the severity level","defaultValue":"'custom'"}]}]},"Notification badge":{"id":"Notification badge","title":"Notification badge","source":"react","tabName":null,"slug":"/components/notification-badge/react","propComponents":[{"name":"NotificationBadge","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible label to the notification badge."},{"name":"attentionIcon","type":"React.ReactNode","description":"Icon to display for attention variant.","defaultValue":"<AttentionBellIcon />"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the notification badge."},{"name":"className","type":"string","description":"Additional classes added to the notification badge."},{"name":"count","type":"number","description":"A number displayed in the badge alongside the icon.","defaultValue":"0"},{"name":"icon","type":"React.ReactNode","description":"Icon to display in the notification badge.","defaultValue":"<BellIcon />"},{"name":"isExpanded","type":"boolean","description":"Flag for applying expanded styling and setting the aria-expanded attribute on the\nnotification badge.","defaultValue":"false"},{"name":"variant","type":"NotificationBadgeVariant | 'read' | 'unread' | 'attention'","description":"Determines the variant of the notification badge.","defaultValue":"NotificationBadgeVariant.read"}]}]},"Navigation":{"id":"Navigation","title":"Navigation","source":"react","tabName":null,"slug":"/components/navigation/react","propComponents":[{"name":"Nav","description":"","props":[{"name":"aria-label","type":"string","description":"Accessible label for the nav when there are multiple navs on the page"},{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of the nav"},{"name":"className","type":"string","description":"Additional classes added to the container"},{"name":"onSelect","type":"(\n  event: React.FormEvent<HTMLInputElement>,\n  selectedItem: {\n    groupId: number | string;\n    itemId: number | string;\n    to: string;\n  }\n) => void","description":"Callback for updating when item selection changes","defaultValue":"() => undefined"},{"name":"onToggle","type":"(\n  event: React.MouseEvent<HTMLButtonElement>,\n  toggledItem: {\n    groupId: number | string;\n    isExpanded: boolean;\n  }\n) => void","description":"Callback for when a list is expanded or collapsed","defaultValue":"() => undefined"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"variant","type":"'default' | 'horizontal' | 'horizontal-subnav'","description":"For horizontal navs"}]},{"name":"NavList","description":"","props":[{"name":"backScrollAriaLabel","type":"string","description":"Aria-label for the back scroll button","defaultValue":"'Scroll back'"},{"name":"children","type":"React.ReactNode","description":"Children nodes"},{"name":"className","type":"string","description":"Additional classes added to the list"},{"name":"forwardScrollAriaLabel","type":"string","description":"Aria-label for the forward scroll button","defaultValue":"'Scroll foward'"}]},{"name":"NavGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of the group","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the container","defaultValue":"''"},{"name":"id","type":"string","description":"Identifier to use for the section aria label","defaultValue":"getUniqueId()"},{"name":"title","type":"string","description":"Title shown for the group"}]},{"name":"NavItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the nav item."},{"name":"className","type":"string","description":"Additional classes added to the nav item"},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Component used to render NavItems if  React.isValidElement(children) is false","defaultValue":"'a'"},{"name":"flyout","type":"React.ReactElement","description":"Flyout of a nav item. This should be a Menu component. Should not be used if the to prop is defined."},{"name":"groupId","type":"string | number | null","description":"Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component","defaultValue":"null"},{"name":"icon","type":"React.ReactNode","description":"Icon added before the nav item children."},{"name":"isActive","type":"boolean","description":"Flag indicating whether the item is active","defaultValue":"false"},{"name":"itemId","type":"string | number | null","description":"Item identifier, will be returned with the onToggle and onSelect callback passed to the Nav component","defaultValue":"null"},{"name":"onClick","type":"NavSelectClickHandler","description":"Callback for item click"},{"name":"onShowFlyout","type":"() => void","description":"Callback when flyout is opened or closed"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"preventDefault","type":"boolean","description":"If true prevents the default anchor link action to occur. Set to true if you want to handle navigation yourself.","defaultValue":"false"},{"name":"styleChildren","type":"boolean","description":"Whether to set className on children when React.isValidElement(children)","defaultValue":"true"},{"name":"to","type":"string","description":"Target navigation link. Should not be used if the flyout prop is defined."},{"name":"zIndex","type":"number","description":"z-index of the flyout nav item","defaultValue":"9999"}]},{"name":"NavItemSeparator","description":"","props":[{"name":"component","type":"No type info","defaultValue":"'li'"}]},{"name":"NavExpandable","description":"","props":[{"name":"buttonProps","type":"any","description":"Additional props added to the NavExpandable <button>"},{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of the expandable list","defaultValue":"''"},{"name":"className","type":"string","description":"Additional classes added to the container","defaultValue":"''"},{"name":"groupId","type":"string | number","description":"Group identifier, will be returned with the onToggle and onSelect callback passed to the Nav component","defaultValue":"null"},{"name":"id","type":"string","description":"Identifier to use for the section aria label","defaultValue":"''"},{"name":"isActive","type":"boolean","description":"If true makes the expandable list title active","defaultValue":"false"},{"name":"isExpanded","type":"boolean","description":"Boolean to programatically expand or collapse section","defaultValue":"false"},{"name":"onExpand","type":"(event: React.MouseEvent<HTMLButtonElement, MouseEvent>, val: boolean) => void","description":"allow consumer to optionally override this callback and manage expand state externally. if passed will not call Nav's onToggle."},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"srText","type":"string","description":"If defined, screen readers will read this text instead of the list title","defaultValue":"''"},{"name":"title","type":"React.ReactNode","description":"Title content shown for the expandable list","required":true}]}]},"Multiple file upload":{"id":"Multiple file upload","title":"Multiple file upload","source":"react","tabName":null,"slug":"/components/file-upload/multiple-file-upload/react","propComponents":[{"name":"MultipleFileUpload","description":"Acts as a container for all other MultipleFileUpload sub-components. This sub-component\nalso provides the functionality for file uploads, and access to the uploaded files via\na callback.","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the multi upload field"},{"name":"className","type":"string","description":"Class to add to outer div"},{"name":"dropzoneProps","type":"DropzoneOptions","description":"Optional extra props to customize react-dropzone.","defaultValue":"{}"},{"name":"isHorizontal","type":"boolean","description":"Flag setting the component to horizontal styling mode"},{"name":"onFileDrop","type":"(event: DropEvent, data: File[]) => void","description":"When files are dropped or uploaded this callback will be called with all accepted files","defaultValue":"() => {}"}]},{"name":"MultipleFileUploadMain","description":"Creates the visual upload interface, including the area to drag and drop files,\nan optional upload button, and descriptive instructions.","props":[{"name":"browseButtonText","type":"string","description":"Visible text label for the upload button","defaultValue":"'Upload'"},{"name":"className","type":"string","description":"Class to add to outer div"},{"name":"infoText","type":"React.ReactNode","description":"Content rendered inside the info div"},{"name":"isUploadButtonHidden","type":"boolean","description":"Flag to prevent the upload button from being rendered"},{"name":"titleIcon","type":"React.ReactNode","description":"Content rendered inside the title icon div"},{"name":"titleText","type":"React.ReactNode","description":"Content rendered inside the title text div"},{"name":"titleTextSeparator","type":"React.ReactNode","description":"Content rendered inside the title text separator div"}]},{"name":"MultipleFileUploadStatus","description":"Acts as an expandable container for all uploaded file statuses.\nAn optional text and/or icon can also be passed into this sub-component.\nThis sub-component can be conditionally rendered when at least 1 file has been\nattempted to be uploaded.","props":[{"name":"aria-label","type":"string","description":"Adds an accessible label to the list of status items."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside multi file upload status list"},{"name":"className","type":"string","description":"Class to add to outer div"},{"name":"statusToggleIcon","type":"'danger' | 'success' | 'inProgress' | React.ReactNode","description":"Icon to show in the status toggle"},{"name":"statusToggleText","type":"string","description":"String to show in the status toggle"}]},{"name":"MultipleFileUploadStatusItem","description":"Automatically reads an uploaded file to render a visual representation of it, including\nits name, size, and read status. This sub-component also allows custom reading of files\nvia various callbacks which will override the automatic reading behavior.","props":[{"name":"buttonAriaLabel","type":"string","description":"Adds accessibility text to the status item deletion button","defaultValue":"'Remove from list'"},{"name":"className","type":"string","description":"Class to add to outer div"},{"name":"customFileHandler","type":"(file: File) => void","description":"A callback to process file reading in a custom way"},{"name":"file","type":"File","description":"The file object being represented by the status item"},{"name":"fileIcon","type":"React.ReactNode","description":"A custom icon to show in place of the generic file icon"},{"name":"fileName","type":"string","description":"A custom name to display for the file rather than using built in functionality to auto-fill it"},{"name":"fileSize","type":"number","description":"A custom file size to display for the file rather than using built in functionality to auto-fill it"},{"name":"onClearClick","type":"React.MouseEventHandler<HTMLButtonElement>","description":"Clear button was clicked","defaultValue":"() => {}"},{"name":"onReadFail","type":"(error: DOMException, onReadFail: File) => void","description":"A callback for when the FileReader API fails","defaultValue":"() => {}"},{"name":"onReadFinished","type":"(fileHandle: File) => void","description":"A callback for when a selected file finishes loading","defaultValue":"() => {}"},{"name":"onReadStarted","type":"(fileHandle: File) => void","description":"A callback for when a selected file starts loading","defaultValue":"() => {}"},{"name":"onReadSuccess","type":"(data: string, file: File) => void","description":"A callback for when the FileReader successfully reads the file","defaultValue":"() => {}"},{"name":"progressAriaLabel","type":"string","description":"Adds accessible text to the progress bar. Required when title not used and there is not any label associated with the progress bar"},{"name":"progressAriaLabelledBy","type":"string","description":"Associates the progress bar with it's label for accessibility purposes. Required when title not used"},{"name":"progressAriaLiveMessage","type":"string | ((loadPercentage: number) => string)","description":"Modifies the text announced by assistive technologies when the progress bar updates."},{"name":"progressHelperText","type":"React.ReactNode","description":"Additional content related to the status item."},{"name":"progressId","type":"string","description":"Unique identifier for progress. Generated if not specified."},{"name":"progressValue","type":"number","description":"A custom value to display for the progress component rather than using built in functionality to auto-fill it"},{"name":"progressVariant","type":"'danger' | 'success' | 'warning'","description":"A custom variant to apply to the progress component rather than using built in functionality to auto-fill it"}]}]},"Modal":{"id":"Modal","title":"Modal","source":"react","tabName":null,"slug":"/components/modal/react","propComponents":[{"name":"Modal","description":"","props":[{"name":"appendTo","type":"HTMLElement | (() => HTMLElement)","description":"The parent container to append the modal to. Defaults to \"document.body\".","defaultValue":"() => document.body"},{"name":"aria-describedby","type":"string","description":"Id to use for the modal box description. This should match the ModalHeader labelId or descriptorId."},{"name":"aria-label","type":"string","description":"Adds an accessible name to the modal when there is no title in the ModalHeader."},{"name":"aria-labelledby","type":"string","description":"Id to use for the modal box label. This should include the ModalHeader labelId."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the modal.","required":true},{"name":"className","type":"string","description":"Additional classes added to the modal."},{"name":"disableFocusTrap","type":"boolean","description":"Flag to disable focus trap."},{"name":"elementToFocus","type":"HTMLElement | SVGElement | string","description":"The element to focus when the modal opens. By default the first\nfocusable element will receive focus."},{"name":"id","type":"string","description":"An id to use for the modal box container."},{"name":"isOpen","type":"boolean","description":"Flag to show the modal.","defaultValue":"false"},{"name":"maxWidth","type":"number | string","description":"Maximum width of the modal."},{"name":"onClose","type":"(event: KeyboardEvent | React.MouseEvent) => void","description":"Add callback for when the close button is clicked. This prop needs to be passed to render the close button"},{"name":"onEscapePress","type":"(event: KeyboardEvent) => void","description":"Modal handles pressing of the escape key and closes the modal. If you want to handle\nthis yourself you can use this callback function."},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"position","type":"'default' | 'top'","description":"Position of the modal. By default a modal will be positioned vertically and horizontally centered.","defaultValue":"'default'"},{"name":"positionOffset","type":"string","description":"Offset from alternate position. Can be any valid CSS length/percentage."},{"name":"variant","type":"'small' | 'medium' | 'large' | 'default'","description":"Variant of the modal.","defaultValue":"'default'"},{"name":"width","type":"number | string","description":"Default width of the modal."}]},{"name":"ModalBody","description":"Renders content in the body of the modal","props":[{"name":"aria-label","type":"string","description":"Accessible label applied to the modal body. This should be used to communicate\nimportant information about the modal body div element if needed, such as when it is scrollable."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the modal body."},{"name":"className","type":"string","description":"Additional classes added to the modal body."},{"name":"role","type":"string","description":"Accessible role applied to the modal body. This will default to \"region\" if the\naria-label property is passed in. Set to a more appropriate role as applicable\nbased on the modal content and context."}]},{"name":"ModalHeader","description":"Renders content in the header of the modal","props":[{"name":"children","type":"React.ReactNode","description":"Custom content rendered inside the modal header. If children are supplied then the tile, tileIconVariant and titleScreenReaderText props are ignored."},{"name":"className","type":"string","description":"Additional classes added to the modal header."},{"name":"description","type":"React.ReactNode","description":"Description of the modal."},{"name":"descriptorId","type":"string","description":"Id of the modal description."},{"name":"help","type":"React.ReactNode","description":"Optional help section for the modal header."},{"name":"labelId","type":"string","description":"Id of the modal title."},{"name":"title","type":"React.ReactNode","description":"Content rendered inside the modal title."},{"name":"titleIconVariant","type":"'success' | 'danger' | 'warning' | 'info' | 'custom' | React.ComponentType<any>","description":"Optional alert icon (or other) to show before the title. When the predefined alert types\nare used the default styling will be automatically applied."},{"name":"titleScreenReaderText","type":"string","description":"Optional title label text for screen readers."}]},{"name":"ModalFooter","description":"Renders content in the footer of the modal","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the modal footer."},{"name":"className","type":"string","description":"Additional classes added to the modal footer."}]}]},"Menu toggle":{"id":"Menu toggle","title":"Menu toggle","source":"react","tabName":null,"slug":"/components/menus/menu-toggle/react","propComponents":[{"name":"MenuToggle","description":"","props":[{"name":"badge","type":"BadgeProps | React.ReactNode","description":"Optional badge rendered inside the toggle, after the children content"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the toggle"},{"name":"className","type":"string","description":"Additional classes added to the toggle"},{"name":"icon","type":"React.ReactNode","description":"Optional icon or image rendered inside the toggle, before the children content. It is\nrecommended to wrap most basic icons in our icon component."},{"name":"isDisabled","type":"boolean","description":"Flag indicating the toggle is disabled"},{"name":"isExpanded","type":"boolean","description":"Flag indicating the toggle has expanded styling"},{"name":"isFullHeight","type":"boolean","description":"Flag indicating the toggle is full height"},{"name":"isFullWidth","type":"boolean","description":"Flag indicating the toggle takes up the full width of its parent"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id. It will always target the toggle button."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"size","type":"'default' | 'sm'","description":"Adds styling which affects the size of the menu toggle"},{"name":"splitButtonOptions","type":"SplitButtonOptions","description":"Object used to configure a split button menu toggle"},{"name":"status","type":"'success' | 'warning' | 'danger'","description":"Status styles of the menu toggle"},{"name":"statusIcon","type":"React.ReactNode","description":"Overrides the status icon"},{"name":"variant","type":"'default' | 'plain' | 'primary' | 'plainText' | 'secondary' | 'typeahead'","description":"Variant styles of the menu toggle"}]},{"name":"MenuToggleAction","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Element to be rendered inside the <button>"},{"name":"className","type":"string","description":"Additional classes added to the MenuToggleAction","defaultValue":"''"},{"name":"id","type":"string","description":"Id of the action button"},{"name":"isDisabled","type":"boolean","description":"Flag to show if the action button is disabled","defaultValue":"false"},{"name":"onClick","type":"(event: React.MouseEvent<HTMLButtonElement>) => void","description":"A callback for when the action button is clicked","defaultValue":"() => {}"}]},{"name":"MenuToggleCheckbox","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Element to be rendered inside the <span>"},{"name":"className","type":"string","description":"Additional classes added to the MenuToggleCheckbox"},{"name":"defaultChecked","type":"boolean | null","description":"Flag to set the default checked value of the checkbox when it is uncontrolled by React state.\nTo make the checkbox controlled instead use the isChecked prop, but do not use both."},{"name":"id","type":"string","description":"Id of the checkbox","required":true},{"name":"isChecked","type":"boolean | null","description":"Flag to show if the checkbox is checked when it is controlled by React state.\nTo make the checkbox uncontrolled instead use the defaultChecked prop, but do not use both."},{"name":"isDisabled","type":"boolean","description":"Flag to show if the checkbox is disabled","defaultValue":"false"},{"name":"isValid","type":"boolean","description":"Flag to show if the checkbox selection is valid or invalid","defaultValue":"true"},{"name":"onChange","type":"(checked: boolean, event: React.FormEvent<HTMLInputElement>) => void","description":"A callback for when the checkbox selection changes","defaultValue":"() => undefined as any"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."}]},{"name":"SplitButtonOptions","description":"","props":[{"name":"items","type":"React.ReactNode[]","description":"Elements to display before the toggle button. When included, renders the menu toggle as a split button.","required":true},{"name":"variant","type":"'action' | 'checkbox'","description":"Variant of split button toggle"}]}]},"Menu":{"id":"Menu","title":"Menu","source":"react","tabName":null,"slug":"/components/menus/menu/react","propComponents":[{"name":"Menu","description":"","props":[{"name":"activeItemId","type":"string | number","description":"itemId of the currently active item. You can also specify isActive on the MenuItem."},{"name":"activeMenu","type":"string","description":"ID of the currently active menu for the drilldown variant"},{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of the Menu"},{"name":"className","type":"string","description":"Additional classes added to the Menu"},{"name":"containsDrilldown","type":"boolean","description":"Indicates if menu contains a drilldown menu"},{"name":"containsFlyout","type":"boolean","description":"Indicates if menu contains a flyout menu"},{"name":"drilldownItemPath","type":"string[]","description":"Indicates the path of drilled in menu itemIds"},{"name":"drilledInMenus","type":"string[]","description":"Array of menus that are drilled in"},{"name":"id","type":"string","description":"ID of the menu"},{"name":"isMenuDrilledIn","type":"boolean","description":"Indicates if a menu is drilled into"},{"name":"isNavFlyout","type":"boolean","description":"Indicating that the menu should have nav flyout styling"},{"name":"isPlain","type":"boolean","description":"Indicates if the menu should be without the outer box-shadow"},{"name":"isRootMenu","type":"boolean","description":"Internal flag indicating if the Menu is the root of a menu tree"},{"name":"isScrollable","type":"boolean","description":"Indicates if the menu should be srollable"},{"name":"onActionClick","type":"(event?: any, itemId?: any, actionId?: any) => void","description":"Callback called when an MenuItems's action button is clicked. You can also specify it within a MenuItemAction."},{"name":"onDrillIn","type":"(\n  event: React.KeyboardEvent | React.MouseEvent,\n  fromItemId: string,\n  toItemId: string,\n  itemId: string\n) => void","description":"Callback for drilling into a submenu"},{"name":"onDrillOut","type":"(event: React.KeyboardEvent | React.MouseEvent, toItemId: string, itemId: string) => void","description":"Callback for drilling out of a submenu"},{"name":"onGetMenuHeight","type":"(menuId: string, height: number) => void","description":"Callback for collecting menu heights"},{"name":"onSelect","type":"(event?: React.MouseEvent, itemId?: string | number) => void","description":"Callback for updating when item selection changes. You can also specify onClick on the MenuItem."},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"parentMenu","type":"string","description":"ID of parent menu for drilldown menus"},{"name":"role","type":"string","description":"Determines the accessible role of the menu. For a non-checkbox menu that can have\none or more items selected, pass in \"listbox\"."},{"name":"selected","type":"any | any[]","description":"Single itemId for single select menus, or array of itemIds for multi select. You can also specify isSelected on the MenuItem."}]},{"name":"MenuList","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible name to the menu."},{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of menu list","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the menu list"},{"name":"isAriaMultiselectable","type":"boolean","description":"Indicates to assistive technologies whether more than one item can be selected\nfor a non-checkbox menu. Only applies when the menu's role is \"listbox\".","defaultValue":"false"}]},{"name":"MenuItem","description":"","props":[{"name":"actions","type":"React.ReactNode","description":"Render item with one or more actions"},{"name":"aria-label","type":"string","description":"Adds an accessible name to the menu item."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the menu list item."},{"name":"className","type":"string","description":"Additional classes added to the menu list item"},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Component used to render the menu item"},{"name":"description","type":"React.ReactNode","description":"Description of the menu item"},{"name":"direction","type":"'down' | 'up'","description":"Sub menu direction"},{"name":"download","type":"string","description":"Navigation link download. Only set when the to property is present."},{"name":"drilldownMenu","type":"React.ReactNode | (() => React.ReactNode)","description":"Drilldown menu of the item. Should be a Menu or DrilldownMenu type."},{"name":"flyoutMenu","type":"React.ReactElement","description":"Flyout menu. Should not be used if the to prop is defined."},{"name":"hasCheckbox","type":"boolean","description":"Flag indicating the item has a checkbox"},{"name":"icon","type":"React.ReactNode","description":"Render item with icon"},{"name":"id","type":"string","description":"Sets the id attribute on the menu item component."},{"name":"isActive","type":"boolean","description":"Flag indicating whether the item is active"},{"name":"isAriaDisabled","type":"boolean","description":"Render item as aria-disabled option"},{"name":"isDanger","type":"boolean","description":"Flag indicating the item is in danger state"},{"name":"isDisabled","type":"boolean","description":"Render item as disabled option"},{"name":"isExternalLink","type":"boolean","description":"Render an external link icon on focus or hover, and set the link's\n\"target\" attribute to a value of \"_blank\"."},{"name":"isFavorited","type":"boolean","description":"Flag indicating if the item is favorited"},{"name":"isFocused","type":"boolean","description":"Flag indicating the item is focused"},{"name":"isLoadButton","type":"boolean","description":"Flag indicating if the item causes a load"},{"name":"isLoading","type":"boolean","description":"Flag indicating a loading state"},{"name":"isOnPath","type":"boolean","description":"True if item is on current selection path"},{"name":"isSelected","type":"boolean","description":"Flag indicating if the option is selected"},{"name":"itemId","type":"any","description":"Identifies the component in the Menu onSelect or onActionClick callback"},{"name":"onClick","type":"(event?: any) => void","description":"Callback for item click"},{"name":"onShowFlyout","type":"(event?: any) => void","description":"Callback function when mouse leaves trigger"},{"name":"rel","type":"string","description":"Navigation link relationship. Only set when the to property is present."},{"name":"target","type":"string","description":"Navigation link target. Only set when the to property is present. If isExternalLink is also passed in, this property will be set to \"_blank\"."},{"name":"to","type":"string","description":"Target navigation link. Should not be used if the flyout prop is defined."},{"name":"tooltipProps","type":"TooltipProps","description":"Props for adding a tooltip to a menu item"}]},{"name":"MenuItemAction","description":"","props":[{"name":"actionId","type":"any","description":"Identifies the action item in the onActionClick on the Menu"},{"name":"aria-label","type":"string","description":"Accessibility label","required":true},{"name":"className","type":"string","description":"Additional classes added to the action button"},{"name":"icon","type":"'favorites' | React.ReactNode","description":"The action icon to use"},{"name":"isDisabled","type":"boolean","description":"Disables action, can also be specified on the MenuItem instead"},{"name":"isFavorited","type":"boolean","description":"Flag indicating if the item is favorited"},{"name":"onClick","type":"(event?: any) => void","description":"Callback on action click, can also specify onActionClick on the Menu instead"}]},{"name":"MenuContent","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Items within group"},{"name":"getHeight","type":"(height: string) => void","description":"Callback to return the height of the menu content"},{"name":"maxMenuHeight","type":"string","description":"Maximum height of menu content"},{"name":"menuHeight","type":"string","description":"Height of the menu content"}]},{"name":"MenuSearch","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Items within search"}]},{"name":"MenuSearchInput","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Items within input"}]},{"name":"MenuGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Items within group"},{"name":"className","type":"string","description":"Additional classes added to the MenuGroup"},{"name":"label","type":"React.ReactNode","description":"Group label"},{"name":"labelHeadingLevel","type":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"Group label heading level. Default is h1."},{"name":"titleId","type":"string","description":"ID for title label"}]},{"name":"MenuContainer","description":"Container that links a menu and menu toggle together, to handle basic keyboard input and control the opening and closing of a menu.","props":[{"name":"isOpen","type":"boolean","description":"Flag to indicate if menu is opened.","required":true},{"name":"menu","type":"React.ReactElement<any, string | React.JSXElementConstructor<any>>","description":"Menu to be rendered","required":true},{"name":"menuRef","type":"React.RefObject<any>","description":"Reference to the menu","required":true},{"name":"onOpenChange","type":"(isOpen: boolean) => void","description":"Callback to change the open state of the menu.\nTriggered by clicking outside of the menu, or by pressing any keys specificed in onOpenChangeKeys."},{"name":"onOpenChangeKeys","type":"string[]","description":"Keys that trigger onOpenChange, defaults to tab and escape. It is highly recommended to include Escape in the array, while Tab may be omitted if the menu contains non-menu items that are focusable.","defaultValue":"['Escape', 'Tab']"},{"name":"popperProps","type":"MenuPopperProps","description":"Additional properties to pass to the Popper"},{"name":"shouldFocusFirstItemOnOpen","type":"boolean","description":"Flag indicating the first menu item should be focused after opening the dropdown.","defaultValue":"true","beta":true},{"name":"toggle","type":"React.ReactNode","description":"Toggle to be rendered","required":true},{"name":"toggleRef","type":"React.RefObject<any>","description":"Reference to the toggle","required":true},{"name":"zIndex","type":"number","description":"z-index of the dropdown menu","defaultValue":"9999"}]},{"name":"MenuPopperProps","description":"","props":[{"name":"direction","type":"'up' | 'down'","description":"Vertical direction of the popper. If enableFlip is set to true, this will set the initial direction before the popper flips."},{"name":"enableFlip","type":"boolean","description":"Enable to flip the popper when it reaches the boundary"},{"name":"maxWidth","type":"string | 'trigger'","description":"Maximum width of the popper. If the value is \"trigger\", it will set the max width to the dropdown toggle's width"},{"name":"minWidth","type":"string | 'trigger'","description":"Minimum width of the popper. If the value is \"trigger\", it will set the min width to the dropdown toggle's width"},{"name":"position","type":"'right' | 'left' | 'center' | 'start' | 'end'","description":"Horizontal position of the popper"},{"name":"preventOverflow","type":"boolean","description":"Flag to prevent the popper from overflowing its container and becoming partially obscured."},{"name":"width","type":"string | 'trigger'","description":"Custom width of the popper. If the value is \"trigger\", it will set the width to the dropdown toggle's width"}]},{"name":"TooltipProps","description":"","props":[{"name":"animationDuration","type":"number","description":"CSS fade transition animation duration"},{"name":"appendTo","type":"HTMLElement | ((ref?: HTMLElement) => HTMLElement)","description":"The element to append the tooltip to, defaults to body"},{"name":"aria","type":"'describedby' | 'labelledby' | 'none'","description":"aria-labelledby or aria-describedby for tooltip.\nThe trigger will be cloned to add the aria attribute, and the corresponding id in the form of 'pf-tooltip-#' is added to the content container.\nIf you don't want that or prefer to add the aria attribute yourself on the trigger, set aria to 'none'."},{"name":"children","type":"ReactElement<any>","description":"The trigger reference element to which the Tooltip is relatively placed to.\nIf you cannot wrap the element with the Tooltip, you can use the triggerRef prop instead.\nUsage: <Tooltip><Button>Reference</Button></Tooltip>"},{"name":"className","type":"string","description":"Tooltip additional class"},{"name":"content","type":"React.ReactNode","description":"Tooltip content","required":true},{"name":"distance","type":"number","description":"Distance of the tooltip to its target, defaults to 15"},{"name":"enableFlip","type":"boolean","description":"If true, tries to keep the tooltip in view by flipping it if necessary"},{"name":"entryDelay","type":"number","description":"Delay in ms before the tooltip appears"},{"name":"exitDelay","type":"number","description":"Delay in ms before the tooltip disappears, Avoid passing in a value of \"0\", as users should\nbe given ample time to move their mouse from the trigger to the tooltip content without the content\nbeing hidden."},{"name":"flipBehavior","type":"| 'flip'\n    | (\n        | 'top'\n        | 'bottom'\n        | 'left'\n        | 'right'\n        | 'top-start'\n        | 'top-end'\n        | 'bottom-start'\n        | 'bottom-end'\n        | 'left-start'\n        | 'left-end'\n        | 'right-start'\n        | 'right-end'\n      )[]","description":"The desired position to flip the tooltip to if the initial position is not possible.\nBy setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space.\nYou can also pass an array of positions that determines the flip order. It should contain the initial position\nfollowed by alternative positions if that position is unavailable.\nExample: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to\n['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\nspace to the right, so it finally shows the tooltip on the left."},{"name":"id","type":"string","description":"id of the tooltip"},{"name":"isContentLeftAligned","type":"boolean","description":"Flag to indicate that the text content is left aligned"},{"name":"isVisible","type":"boolean","description":"value for visibility when trigger is 'manual'"},{"name":"maxWidth","type":"string","description":"Maximum width of the tooltip (default 18.75rem)"},{"name":"minWidth","type":"string | 'trigger'","description":"Minimum width of the tooltip. If set to \"trigger\", the minimum width will be set to the reference element width."},{"name":"onTooltipHidden","type":"() => void","description":"Callback when tooltip's hide transition has finished executing"},{"name":"position","type":"| TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end'","description":"Tooltip position. Note: With 'enableFlip' set to true,\nit will change the position if there is not enough space for the starting position.\nThe behavior of where it flips to can be controlled through the flipBehavior prop.\nThe 'auto' position chooses the side with the most space.\nThe 'auto' position requires the 'enableFlip' prop to be true."},{"name":"trigger","type":"string","description":"Tooltip trigger: click, mouseenter, focus, manual\nSet to manual to trigger tooltip programmatically (through the isVisible prop)"},{"name":"triggerRef","type":"HTMLElement | (() => HTMLElement) | React.RefObject<any>","description":"The trigger reference element to which the Tooltip is relatively placed to.\nIf you can wrap the element with the Tooltip, you can use the children prop instead, or both props together.\nWhen passed along with the trigger prop, the div element that wraps the trigger will be removed.\nUsage: <Tooltip triggerRef={() => document.getElementById('reference-element')} />"},{"name":"Unknown","type":"'off' | 'polite'","description":"Determines whether the tooltip is an aria-live region. If the triggerRef prop is passed in the\ndefault behavior is 'polite' in order to ensure the tooltip contents is announced to\nassistive technologies. Otherwise the default behavior is 'off'."},{"name":"zIndex","type":"number","description":"z-index of the tooltip"}]}]},"Masthead":{"id":"Masthead","title":"Masthead","source":"react","tabName":null,"slug":"/components/masthead/react","propComponents":[{"name":"Masthead","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside of the masthead"},{"name":"className","type":"string","description":"Additional classes added to the masthead"},{"name":"display","type":"{\n  default?: 'inline' | 'stack';\n  sm?: 'inline' | 'stack';\n  md?: 'inline' | 'stack';\n  lg?: 'inline' | 'stack';\n  xl?: 'inline' | 'stack';\n  '2xl'?: 'inline' | 'stack';\n}","description":"Display type at various breakpoints","defaultValue":"{\n  md: 'inline'\n}"},{"name":"inset","type":"{\n  default?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  sm?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  md?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  lg?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  xl?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  '2xl'?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n}","description":"Insets at various breakpoints"}]},{"name":"MastheadToggle","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside of the masthead toggle."},{"name":"className","type":"string","description":"Additional classes added to the masthead toggle."}]},{"name":"MastheadMain","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside of the masthead main block."},{"name":"className","type":"string","description":"Additional classes added to the masthead main."}]},{"name":"MastheadBrand","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside of the masthead brand."},{"name":"className","type":"string","description":"Additional classes added to the masthead brand."}]},{"name":"MastheadLogo","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside of the masthead logo."},{"name":"className","type":"string","description":"Additional classes added to the masthead logo."},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Component type of the masthead logo."}]},{"name":"MastheadContent","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside of the masthead content block."},{"name":"className","type":"string","description":"Additional classes added to the masthead content."}]}]},"Login page":{"id":"Login page","title":"Login page","source":"react","tabName":null,"slug":"/components/login-page/react","propComponents":[{"name":"LoginPage","description":"","props":[{"name":"backgroundImgSrc","type":"string","description":"Attribute that specifies the URL of the background image for the login page","defaultValue":"''"},{"name":"brandImgAlt","type":"string","description":"Attribute that specifies the alt text of the brand image for the login page","defaultValue":"''"},{"name":"brandImgSrc","type":"string","description":"Attribute that specifies the URL of the brand image for the login page","defaultValue":"''"},{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of the login page (e.g. <LoginPageForm>)","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the login page","defaultValue":"''"},{"name":"footerListItems","type":"React.ReactNode","description":"Items rendered inside of the footer list component of the login page","defaultValue":"null"},{"name":"footerListVariants","type":"ListVariant.inline","description":"Adds list variant styles for the footer list component of the login page. The only current value is'inline'"},{"name":"forgotCredentials","type":"React.ReactNode","description":"Content rendered inside of login main footer band to display a forgot credentials link.","defaultValue":"null"},{"name":"headerUtilities","type":"React.ReactNode","description":"Header utilities for the login main body header of the login page"},{"name":"loginSubtitle","type":"string","description":"Subtitle for the login main body header of the login page"},{"name":"loginTitle","type":"string","description":"Title for the login main body header of the login page","required":true},{"name":"signUpForAccountMessage","type":"React.ReactNode","description":"Content rendered inside of login main footer band to display a sign up for account message","defaultValue":"null"},{"name":"socialMediaLoginAriaLabel","type":"string","description":"Adds an accessible name to the social media login list."},{"name":"socialMediaLoginContent","type":"React.ReactNode","description":"Content rendered inside of social media login footer section","defaultValue":"null"},{"name":"textContent","type":"string","description":"Content rendered inside of the text component of the login page","defaultValue":"''"}]},{"name":"Login","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the main section of the login layout","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the login layout","defaultValue":"''"},{"name":"footer","type":"React.ReactNode","description":"Footer component (e.g. <LoginFooter />)","defaultValue":"null"},{"name":"header","type":"React.ReactNode","description":"Header component (e.g. <LoginHeader />)","defaultValue":"null"}]},{"name":"LoginForm","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the login main body's form","defaultValue":"''"},{"name":"helperText","type":"React.ReactNode","description":"Content displayed in the helper text component *","defaultValue":"null"},{"name":"helperTextIcon","type":"React.ReactNode","description":"Icon displayed to the left in the helper text","defaultValue":"null"},{"name":"hidePasswordAriaLabel","type":"string","description":"Accessible label for the hide password button","defaultValue":"'Hide password'"},{"name":"isLoginButtonDisabled","type":"boolean","description":"Flag indicating if the login button is disabled","defaultValue":"false"},{"name":"isRememberMeChecked","type":"boolean","description":"Flag indicating if the remember me checkbox is checked.","defaultValue":"false"},{"name":"isShowPasswordEnabled","type":"boolean","description":"Flag indicating if the user can toggle hiding the password","defaultValue":"false"},{"name":"isValidPassword","type":"boolean","description":"Flag indicating if the password is valid","defaultValue":"true"},{"name":"isValidUsername","type":"boolean","description":"Flag indicating if the username is valid","defaultValue":"true"},{"name":"loginButtonLabel","type":"string","description":"Label for the log in button input","defaultValue":"'Log In'"},{"name":"noAutoFocus","type":"boolean","description":"Flag to indicate if the first dropdown item should not gain initial focus","defaultValue":"false"},{"name":"onChangePassword","type":"(event: React.FormEvent<HTMLInputElement>, value: string) => void","description":"Function that handles the onChange event for the password","defaultValue":"() => undefined as any"},{"name":"onChangeRememberMe","type":"(event: React.FormEvent<HTMLInputElement>, checked: boolean) => void","description":"Function that handles the onChange event for the remember me checkbox","defaultValue":"() => undefined as any"},{"name":"onChangeUsername","type":"(event: React.FormEvent<HTMLInputElement>, value: string) => void","description":"Function that handles the onChange event for the username","defaultValue":"() => undefined as any"},{"name":"onLoginButtonClick","type":"(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void","description":"Function that is called when the login button is clicked","defaultValue":"() => undefined as any"},{"name":"passwordLabel","type":"string","description":"Label for the password input field","defaultValue":"'Password'"},{"name":"passwordValue","type":"string","description":"Value for the password","defaultValue":"''"},{"name":"rememberMeLabel","type":"string","description":"Label for the remember me checkbox that indicates the user should be kept logged in.  If the label is not provided, the checkbox will not show.","defaultValue":"''"},{"name":"showHelperText","type":"boolean","description":"Flag indicating the helper text is visible *","defaultValue":"false"},{"name":"showPasswordAriaLabel","type":"string","description":"Accessible label for the show password button","defaultValue":"'Show password'"},{"name":"usernameLabel","type":"string","description":"Label for the username input field","defaultValue":"'Username'"},{"name":"usernameValue","type":"string","description":"Value for the username","defaultValue":"''"}]},{"name":"LoginMainBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the login main body","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the login main body","defaultValue":"''"}]},{"name":"LoginMainHeader","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the login main header","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the login main header","defaultValue":"''"},{"name":"headerUtilities","type":"React.ReactNode","description":"Actions that render for the login main header","defaultValue":"null"},{"name":"subtitle","type":"string","description":"Subtitle that contains the text, URL, and URL text for the login main header","defaultValue":"''"},{"name":"title","type":"string","description":"Title for the login main header","defaultValue":"''"}]},{"name":"LoginHeader","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the header of the login layout","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the login header","defaultValue":"''"},{"name":"headerBrand","type":"React.ReactNode","description":"Header brand component (e.g. <LoginHeader />)","defaultValue":"null"}]},{"name":"LoginFooter","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the footer of the login layout","defaultValue":"null"},{"name":"className","type":"string","description":"Additional props are spread to the container <footer>","defaultValue":"''"}]},{"name":"LoginMainFooter","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the login main footer","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the login main footer","defaultValue":"''"},{"name":"forgotCredentials","type":"React.ReactNode","description":"Content rendered inside of login main footer band do display a forgot credentials link*","defaultValue":"null"},{"name":"signUpForAccountMessage","type":"React.ReactNode","description":"Content rendered inside of login main footer band to display a sign up for account message","defaultValue":"null"},{"name":"socialMediaLoginAriaLabel","type":"string","description":"Adds an accessible name to the social media login list."},{"name":"socialMediaLoginContent","type":"React.ReactNode","description":"Content rendered inside the login main footer as social media links","defaultValue":"null"}]},{"name":"LoginFooterItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the footer link item","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the footer link item"},{"name":"href","type":"string","description":"The URL of the footer link item","defaultValue":"'#'"},{"name":"target","type":"string","description":"Specifies where to open the linked document","defaultValue":"'_blank'"}]},{"name":"LoginMainFooterBandItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the footer link item","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the footer link item","defaultValue":"''"}]},{"name":"LoginMainFooterLinksItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the footer link item","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the footer link item","defaultValue":"''"}]}]},"List":{"id":"List","title":"List","source":"react","tabName":null,"slug":"/components/list/react","propComponents":[{"name":"List","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible label to the list."},{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of the list","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the list","defaultValue":"''"},{"name":"component","type":"'ol' | 'ul'","description":"Sets the type of the list component.","defaultValue":"ListComponent.ul"},{"name":"iconSize","type":"'default' | 'large'","description":"Modifies the size of the icons in the list","defaultValue":"'default'"},{"name":"isBordered","type":"boolean","description":"Modifies the list to add borders between items","defaultValue":"false"},{"name":"isPlain","type":"boolean","description":"Modifies the list to include plain styling","defaultValue":"false"},{"name":"ref","type":"No type info","defaultValue":"null"},{"name":"type","type":"OrderType","description":"Sets the way items are numbered if component is set to \"ol\".","defaultValue":"OrderType.number"},{"name":"variant","type":"ListVariant.inline","description":"Adds list variant styles","defaultValue":"null"}]},{"name":"ListItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of list item","defaultValue":"null"},{"name":"icon","type":"React.ReactNode | null","description":"Icon for the list item","defaultValue":"null"}]}]},"Label":{"id":"Label","title":"Label","source":"react","tabName":null,"slug":"/components/label/react","propComponents":[{"name":"Label","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the label."},{"name":"className","type":"string","description":"Additional classes added to the label.","defaultValue":"''"},{"name":"closeBtn","type":"React.ReactNode","description":"Node for custom close button."},{"name":"closeBtnAriaLabel","type":"string","description":"Aria label for close button"},{"name":"closeBtnProps","type":"any","description":"Additional properties for the default close button."},{"name":"color","type":"'blue' | 'teal' | 'green' | 'orange' | 'purple' | 'red' | 'orangered' | 'grey' | 'yellow'","description":"Color of the label.","defaultValue":"'grey'"},{"name":"editableProps","type":"any","description":"Additional props passed to the editable label text div. Optionally passing onInput and onBlur callbacks will allow finer custom text input control."},{"name":"href","type":"string","description":"Href for a label that is a link. If present, the label will change to an anchor element. This should not be passed in if the onClick prop is also passed in."},{"name":"icon","type":"React.ReactNode","description":"Icon added to the left of the label text. Overrides the icon set by the status property."},{"name":"isCompact","type":"boolean","description":"Flag indicating the label is compact.","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Flag indicating the label is disabled. Works only on clickable labels, so either href or onClick props must be passed in.","defaultValue":"false"},{"name":"isEditable","type":"boolean","description":"Flag indicating the label is editable.","defaultValue":"false"},{"name":"onClick","type":"(event: React.MouseEvent) => void","description":"Callback for when the label is clicked. This should not be passed in if the href or isEditable props are also passed in."},{"name":"onClose","type":"(event: React.MouseEvent) => void","description":"Close click callback for removable labels. If present, label will have a close button."},{"name":"onEditCancel","type":"(event: KeyboardEvent, previousText: string) => void","description":"Callback when an editable label cancels an edit."},{"name":"onEditComplete","type":"(event: MouseEvent | KeyboardEvent, newText: string) => void","description":"Callback when an editable label completes an edit."},{"name":"render","type":"({\n  className,\n  content,\n  componentRef\n}: {\n  className: string;\n  content: React.ReactNode;\n  componentRef: any;\n}) => React.ReactNode","description":"Forwards the label content and className to rendered function.  Use this prop for react router support."},{"name":"status","type":"'success' | 'warning' | 'danger' | 'info' | 'custom'","description":"Status of the label with a respective icon and color. Overrides the color set by the color property."},{"name":"textMaxWidth","type":"string","description":"The max width of the label before it is truncated. Can be any valid CSS unit, such as '100%', '100px', or '16ch'."},{"name":"tooltipPosition","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Position of the tooltip which is displayed if text is truncated"},{"name":"variant","type":"'outline' | 'filled' | 'overflow' | 'add'","description":"Variant of the label.","defaultValue":"'filled'"}]},{"name":"LabelGroup","description":"","props":[{"name":"addLabelControl","type":"React.ReactNode","description":"Control for adding new labels"},{"name":"aria-label","type":"string","description":"Aria label for label group that does not have a category name","defaultValue":"'Label group category'"},{"name":"categoryName","type":"string","description":"Category name text for the label group category.  If this prop is supplied the label group with have a label and category styling applied","defaultValue":"''"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the label group. Should be <Label> elements."},{"name":"className","type":"string","description":"Additional classes added to the label item"},{"name":"closeBtnAriaLabel","type":"string","description":"Aria label for close button","defaultValue":"'Close label group'"},{"name":"collapsedText","type":"string","description":"Customizeable template string. Use variable \"${remaining}\" for the overflow label count.","defaultValue":"'${remaining} more'"},{"name":"defaultIsOpen","type":"boolean","description":"Flag for having the label group default to expanded","defaultValue":"false"},{"name":"editableTextAreaProps","type":"any","description":"Additional props passed to the editable textarea."},{"name":"expandedText","type":"string","description":"Customizable \"Show Less\" text string","defaultValue":"'Show Less'"},{"name":"hasEditableTextArea","type":"boolean","description":"Flag indicating the editable label group should be appended with a textarea.","defaultValue":"false"},{"name":"isClosable","type":"boolean","description":"Flag if label group can be closed","defaultValue":"false"},{"name":"isCompact","type":"boolean","description":"Flag indicating the labels in the group are compact","defaultValue":"false"},{"name":"isEditable","type":"boolean","description":"Flag indicating contained labels are editable. Allows spacing for a text input after the labels.","defaultValue":"false"},{"name":"isVertical","type":"boolean","description":"Flag to implement a vertical layout","defaultValue":"false"},{"name":"numLabels","type":"number","description":"Set number of labels to show before overflow","defaultValue":"3"},{"name":"onClick","type":"(event: React.MouseEvent) => void","description":"Function that is called when clicking on the label group close button","defaultValue":"(_e: React.MouseEvent) => undefined as any"},{"name":"tooltipPosition","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Position of the tooltip which is displayed if the category name text is longer","defaultValue":"'top'"}]}]},"Jump links":{"id":"Jump links","title":"Jump links","source":"react","tabName":null,"slug":"/components/jump-links/react","propComponents":[{"name":"JumpLinks","description":"","props":[{"name":"activeIndex","type":"number","description":"The index of the child Jump link to make active.","defaultValue":"0"},{"name":"alwaysShowLabel","type":"boolean","description":"Flag to always show the label when using `expandable`","defaultValue":"true"},{"name":"aria-label","type":"string","description":"Adds an accessible label to the internal nav element. Defaults to the value of the label prop.","defaultValue":"typeof label === 'string' ? label : null"},{"name":"children","type":"React.ReactNode","description":"Children nodes"},{"name":"className","type":"string","description":"Class for nav"},{"name":"expandable","type":"{\n  default?: 'expandable' | 'nonExpandable';\n  sm?: 'expandable' | 'nonExpandable';\n  md?: 'expandable' | 'nonExpandable';\n  lg?: 'expandable' | 'nonExpandable';\n  xl?: 'expandable' | 'nonExpandable';\n  '2xl'?: 'expandable' | 'nonExpandable';\n}","description":"When to collapse/expand at different breakpoints"},{"name":"isCentered","type":"boolean","description":"Whether to center children."},{"name":"isExpanded","type":"boolean","description":"On mobile whether or not the JumpLinks starts out expanded","defaultValue":"false"},{"name":"isVertical","type":"boolean","description":"Whether the layout of children is vertical or horizontal."},{"name":"label","type":"React.ReactNode","description":"Label to add to nav element."},{"name":"offset","type":"number","description":"Offset to add to `scrollPosition`, potentially for a masthead which content scrolls under.","defaultValue":"0"},{"name":"scrollableRef","type":"HTMLElement | (() => HTMLElement) | React.RefObject<HTMLElement>","description":"Reference to the scrollable element to spy on. Takes precedence over scrollableSelector. Not passing a scrollableRef or scrollableSelector disables spying."},{"name":"scrollableSelector","type":"string","description":"Selector for the scrollable element to spy on. Not passing a scrollableSelector or scrollableRef disables spying."},{"name":"toggleAriaLabel","type":"string","description":"Aria label for expandable toggle","defaultValue":"'Toggle jump links'"}]},{"name":"JumpLinksItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Text to be rendered inside span"},{"name":"className","type":"string","description":"Class to add to li"},{"name":"href","type":"string","description":"Href for this link","required":true},{"name":"isActive","type":"boolean","description":"Whether this item is active. Parent JumpLinks component sets this when passed a `scrollableSelector`."},{"name":"node","type":"string | HTMLElement","description":"Selector or HTMLElement to spy on"},{"name":"onClick","type":"(ev: React.MouseEvent) => void","description":"Click handler for anchor tag. Parent JumpLinks components tap into this."}]}]},"Input group":{"id":"Input group","title":"Input group","source":"react","tabName":null,"slug":"/components/input-group/react","propComponents":[{"name":"InputGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the input group.","required":true},{"name":"className","type":"string","description":"Additional classes added to the input group."}]},{"name":"InputGroupItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the input group item.","required":true},{"name":"className","type":"string","description":"Additional classes added to the input group item."},{"name":"isBox","type":"boolean","description":"Enables box styling to the input group item","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Flag to indicate if the input group item is disabled."},{"name":"isFill","type":"boolean","description":"Flag to indicate if the input group item should fill the available horizontal space","defaultValue":"false"},{"name":"isPlain","type":"boolean","description":"Flag to indicate if the input group item is plain."}]},{"name":"InputGroupText","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the input group text.","required":true},{"name":"className","type":"string","description":"Additional classes added to the input group text."},{"name":"component","type":"React.ReactNode","description":"Component that wraps the input group text.","defaultValue":"'span'"},{"name":"isDisabled","type":"boolean","description":"Flag to indicate if the input group text is disabled."},{"name":"isPlain","type":"boolean","description":"Flag to to indicate if the input group item is plain."}]}]},"Icon":{"id":"Icon","title":"Icon","source":"react","tabName":null,"slug":"/components/icon/react","propComponents":[{"name":"Icon","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Icon content"},{"name":"className","type":"string","description":"Additional classes applied to the icon container"},{"name":"defaultProgressArialabel","type":"string","description":"Aria-label for the default progress icon","defaultValue":"'Loading...'"},{"name":"iconSize","type":"| 'sm'\n| 'md'\n| 'lg'\n| 'xl'\n| '2xl'\n| '3xl'\n| 'headingSm'\n| 'headingMd'\n| 'headingLg'\n| 'headingXl'\n| 'heading_2xl'\n| 'heading_3xl'\n| 'bodySm'\n| 'bodyDefault'\n| 'bodyLg'","description":"Size of icon. Overrides the icon size set by the size property."},{"name":"isInline","type":"boolean","description":"Indicates the icon is inline and should inherit the text font size and color. Overriden by size and iconSize properties.","defaultValue":"false"},{"name":"isInProgress","type":"boolean","description":"Indicates the icon is in progress. Setting this property to true will swap the icon with the progressIcon.","defaultValue":"false"},{"name":"progressIcon","type":"React.ReactNode","description":"Icon when isInProgress is set to true. Defaults to a 1em spinner."},{"name":"progressIconSize","type":"| 'sm'\n| 'md'\n| 'lg'\n| 'xl'\n| '2xl'\n| '3xl'\n| 'headingSm'\n| 'headingMd'\n| 'headingLg'\n| 'headingXl'\n| 'heading_2xl'\n| 'heading_3xl'\n| 'bodySm'\n| 'bodyDefault'\n| 'bodyLg'","description":"Size of progress icon. Overrides the icon size set by the size property."},{"name":"shouldMirrorRTL","type":"boolean","description":"Flag indicating whether the icon passed as children should be mirrored for\nright to left (RTL) languages. This will not mirror the icon passed to progressIcon.","defaultValue":"false"},{"name":"size","type":"| 'sm'\n| 'md'\n| 'lg'\n| 'xl'\n| '2xl'\n| '3xl'\n| 'headingSm'\n| 'headingMd'\n| 'headingLg'\n| 'headingXl'\n| 'heading_2xl'\n| 'heading_3xl'\n| 'bodySm'\n| 'bodyDefault'\n| 'bodyLg'","description":"Size of the icon component container and icon."},{"name":"status","type":"'custom' | 'info' | 'success' | 'warning' | 'danger'","description":"Status color of the icon"}]}]},"Hint":{"id":"Hint","title":"Hint","source":"react","tabName":null,"slug":"/components/hint/react","propComponents":[{"name":"Hint","description":"","props":[{"name":"actions","type":"React.ReactNode","description":"Actions of the hint."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the hint."},{"name":"className","type":"string","description":"Additional classes applied to the hint."},{"name":"hasNoActionsOffset","type":"boolean","description":"Flag indicating that the actions have no offset","defaultValue":"false"}]},{"name":"HintTitle","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the hint title."},{"name":"className","type":"string","description":"Additional classes applied to the hint title."}]},{"name":"HintBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the hint body."},{"name":"className","type":"string","description":"Additional classes applied to the hint body."}]},{"name":"HintFooter","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the hint footer."},{"name":"className","type":"string","description":"Additional classes applied to the hint footer."}]}]},"Helper text":{"id":"Helper text","title":"Helper text","source":"react","tabName":null,"slug":"/components/helper-text/react","propComponents":[{"name":"HelperText","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible label to the helper text when component is a \"ul\"."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the helper text container."},{"name":"className","type":"string","description":"Additional classes applied to the helper text container."},{"name":"component","type":"'div' | 'ul'","description":"Component type of the helper text container","defaultValue":"'div'"},{"name":"id","type":"string","description":"ID for the helper text container. The value of this prop can be passed into a form component's\naria-describedby prop when you intend for all helper text items to be announced to\nassistive technologies."},{"name":"isLiveRegion","type":"boolean","description":"Flag for indicating whether the helper text container is a live region. Use this prop when you\nexpect or intend for any helper text items within the container to be dynamically updated.","defaultValue":"false"}]},{"name":"HelperTextItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the helper text item."},{"name":"className","type":"string","description":"Additional classes applied to the helper text item."},{"name":"component","type":"'div' | 'li'","description":"Sets the component type of the helper text item.","defaultValue":"'div'"},{"name":"icon","type":"React.ReactNode","description":"Custom icon prefixing the helper text. This property will override the default icon when the variant property is passed in."},{"name":"id","type":"string","description":"ID for the helper text item. The value of this prop can be passed into a form component's\naria-describedby prop when you intend for only specific helper text items to be announced to\nassistive technologies."},{"name":"screenReaderText","type":"string","description":"Text that is only accessible to screen readers in order to announce the variant of a helper text item.\nThis prop can only be used when the variant prop has a value other than \"default\".","defaultValue":"`${variant} status`"},{"name":"variant","type":"'default' | 'indeterminate' | 'warning' | 'success' | 'error'","description":"Variant styling of the helper text item. Will also render a default icon, which can be overridden\nwith the icon prop.","defaultValue":"'default'"}]}]},"Form select":{"id":"Form select","title":"Form select","source":"react","tabName":null,"slug":"/components/forms/form-select/react","propComponents":[{"name":"FormSelect","description":"","props":[{"name":"aria-label","type":"string","description":"Custom flag to show that the FormSelect requires an associated id or aria-label."},{"name":"children","type":"React.ReactNode","description":"content rendered inside the FormSelect","required":true},{"name":"className","type":"string","description":"additional classes added to the FormSelect control","defaultValue":"''"},{"name":"isDisabled","type":"boolean","description":"Flag indicating the FormSelect is disabled","defaultValue":"false"},{"name":"isRequired","type":"boolean","description":"Sets the FormSelect required.","defaultValue":"false"},{"name":"onBlur","type":"(event: React.FormEvent<HTMLSelectElement>) => void","description":"Optional callback for updating when selection loses focus","defaultValue":"(): any => undefined"},{"name":"onChange","type":"(event: React.FormEvent<HTMLSelectElement>, value: string) => void","description":"Optional callback for updating when selection changes","defaultValue":"(): any => undefined"},{"name":"onFocus","type":"(event: React.FormEvent<HTMLSelectElement>) => void","description":"Optional callback for updating when selection gets focus","defaultValue":"(): any => undefined"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"validated","type":"'success' | 'warning' | 'error' | 'default'","description":"Value to indicate if the select is modified to show that validation state.\nIf set to success, select will be modified to indicate valid state.\nIf set to error, select will be modified to indicate error state.","defaultValue":"'default'"},{"name":"value","type":"any","description":"value of selected option","defaultValue":"''"}]},{"name":"FormSelectOption","description":"","props":[{"name":"className","type":"string","description":"additional classes added to the Select Option","defaultValue":"''"},{"name":"isDisabled","type":"boolean","description":"flag indicating if the option is disabled","defaultValue":"false"},{"name":"isPlaceholder","type":"boolean","description":"flag indicating if option will have placeholder styling applied when selected *","defaultValue":"false"},{"name":"label","type":"string","description":"the label for the option","required":true},{"name":"value","type":"any","description":"the value for the option","defaultValue":"''"}]},{"name":"FormSelectOptionGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Select Option Group","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Select Option","defaultValue":"''"},{"name":"isDisabled","type":"boolean","description":"flag indicating if the Option Group is disabled","defaultValue":"false"},{"name":"label","type":"string","description":"the label for the option","required":true}]}]},"Form":{"id":"Form","title":"Form","source":"react","tabName":null,"slug":"/components/forms/form/react","propComponents":[{"name":"ActionGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered as ActionGroup content.","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the ActionGroup.","defaultValue":"''"}]},{"name":"Form","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered as Form content."},{"name":"className","type":"string","description":"Additional classes added to the Form."},{"name":"isHorizontal","type":"boolean","description":"Sets the Form to horizontal."},{"name":"isWidthLimited","type":"boolean","description":"Limits the max-width of the form."},{"name":"maxWidth","type":"string","description":"Sets a custom max-width for the form."}]},{"name":"FormGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered as FormGroup content.","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the FormGroup.","defaultValue":"''"},{"name":"fieldId","type":"string","description":"ID of an individual field or a group of multiple fields. Required when a role of \"group\" or \"radiogroup\" is passed in.\nIf only one field is included, its ID attribute and this prop must be the same."},{"name":"hasNoPaddingTop","type":"boolean","description":"Removes top spacer from label.","defaultValue":"false"},{"name":"isInline","type":"boolean","description":"Sets the FormGroup isInline.","defaultValue":"false"},{"name":"isRequired","type":"boolean","description":"Sets the FormGroup required.","defaultValue":"false"},{"name":"isStack","type":"boolean","description":"Sets the FormGroupControl to be stacked","defaultValue":"false"},{"name":"label","type":"React.ReactNode","description":"Label text before the field."},{"name":"labelHelp","type":"React.ReactElement","description":"A help button for the label. We recommend using FormGroupLabelHelp element as a help icon button. The help button should be wrapped or linked to our popover component."},{"name":"labelInfo","type":"React.ReactNode","description":"Additional label information displayed after the label."},{"name":"role","type":"string","description":"Sets the role of the form group. Pass in \"radiogroup\" when the form group contains multiple\nradio inputs, or pass in \"group\" when the form group contains multiple of any other input type."}]},{"name":"FormGroupLabelHelp","description":"A help button to be passed to the FormGroup's labelHelp property. This should be wrapped or linked\nto our Popover component.","props":[{"name":"aria-label","type":"string","description":"Adds an accessible name for the help button.","required":true},{"name":"className","type":"string","description":"Additional classes added to the help button."}]},{"name":"FormSection","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the section"},{"name":"className","type":"string","description":"Additional classes added to the section","defaultValue":"''"},{"name":"title","type":"React.ReactNode","description":"Title for the section","defaultValue":"''"},{"name":"titleElement","type":"'div' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"Element to wrap the section title","defaultValue":"'div'"}]},{"name":"FormHelperText","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the helper text wrapper","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the helper text wrapper","defaultValue":"''"}]},{"name":"FormFieldGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered as form field group content."},{"name":"className","type":"string","description":"Additional classes added to the form field group."},{"name":"header","type":"React.ReactNode","description":"Form field group header"}]},{"name":"FormFieldGroupExpandable","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered as form field group content."},{"name":"className","type":"string","description":"Additional classes added to the form field group."},{"name":"header","type":"React.ReactNode","description":"Form field group header"},{"name":"isExpanded","type":"boolean","description":"Flag indicating if the form field group is initially expanded","defaultValue":"false"},{"name":"toggleAriaLabel","type":"string","description":"Aria-label to use on the form field group toggle button"}]},{"name":"FormFieldGroupHeader","description":"","props":[{"name":"actions","type":"React.ReactNode","description":"Field group header actions"},{"name":"className","type":"string","description":"Additional classes added to the section"},{"name":"titleDescription","type":"React.ReactNode","description":"Field group header title description"},{"name":"titleText","type":"FormFieldGroupHeaderTitleTextObject","description":"Field group header title text"}]},{"name":"FormFieldGroupHeaderTitleTextObject","description":"","props":[{"name":"id","type":"string","description":"The id applied to the title div for accessibility","required":true},{"name":"text","type":"React.ReactNode","description":"Title text.","required":true}]},{"name":"FormContextProps","description":"","props":[{"name":"errors","type":"Record<string, string>","description":"Record of errors for all fieldIds","required":true},{"name":"getError","type":"string","description":"Get the error message for a given fieldId","required":true},{"name":"getValue","type":"string","description":"Get the value for a given fieldId","required":true},{"name":"isTouched","type":"boolean","description":"Used to determine touched state for a given fieldId","required":true},{"name":"isValid","type":"boolean","description":"Flag to determine the overall validity. True if the record of errors is empty.","required":true},{"name":"setError","type":"void","description":"Set the error message for a given fieldId","required":true},{"name":"setErrors","type":"Dispatch<SetStateAction<Record<string, string>>>","description":"Set multiple errors within the managed record of errors","required":true},{"name":"setTouched","type":"void","description":"Used to update the touched state for a given fieldId","required":true},{"name":"setValidator","type":"void","description":"Set a validator for a specific fieldId","required":true},{"name":"setValue","type":"void","description":"Set the value for a given fieldId","required":true},{"name":"setValues","type":"Dispatch<SetStateAction<Record<string, string>>>","description":"Set multiple values within the managed record of values","required":true},{"name":"touched","type":"Record<string, boolean>","description":"Record of touched state for all fieldIds","required":true},{"name":"validate","type":"Record<string, string | null>","description":"Triggers all fieldId-specific validators","required":true},{"name":"values","type":"Record<string, string>","description":"Record of values for all fieldIds","required":true}]},{"name":"FormContextProviderProps","description":"","props":[{"name":"children","type":"React.ReactNode | ((props: FormContextProps) => React.ReactNode)","description":"Any react node. Can optionally use render function to return context props."},{"name":"initialValues","type":"Record<string, string>","description":"Record of initial values"}]},{"name":"Button","description":"","props":[{"name":"aria-label","type":"string","description":"Adds accessible text to the button."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the button"},{"name":"className","type":"string","description":"Additional classes added to the button"},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Sets the base component to render. defaults to button"},{"name":"countOptions","type":"BadgeCountObject","description":"Adds count number to button"},{"name":"hasNoPadding","type":"boolean","description":"Applies no padding on a plain button variant. Use when plain button is placed inline with text"},{"name":"icon","type":"React.ReactNode | null","description":"Icon for the button. Usable by all variants except for plain."},{"name":"iconPosition","type":"'start' | 'end' | 'left' | 'right'","description":"Sets position of the icon. Note: \"left\" and \"right\" are deprecated. Use \"start\" and \"end\" instead"},{"name":"inoperableEvents","type":"string[]","description":"Events to prevent when the button is in an aria-disabled state"},{"name":"isAriaDisabled","type":"boolean","description":"Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute"},{"name":"isBlock","type":"boolean","description":"Adds block styling to button"},{"name":"isClicked","type":"boolean","description":"Adds clicked styling to button."},{"name":"isDanger","type":"boolean","description":"Adds danger styling to secondary or link button variants"},{"name":"isDisabled","type":"boolean","description":"Adds disabled styling and disables the button using the disabled html attribute"},{"name":"isInline","type":"boolean","description":"Adds inline styling to a link button"},{"name":"isLoading","type":"boolean","description":"Adds progress styling to button"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"size","type":"'default' | 'sm' | 'lg'","description":"Adds styling which affects the size of the button"},{"name":"spinnerAriaLabel","type":"string","description":"Accessible label for the spinner to describe what is loading"},{"name":"spinnerAriaLabelledBy","type":"string","description":"Id of element which describes what is being loaded"},{"name":"spinnerAriaValueText","type":"string","description":"Text describing that current loading status or progress"},{"name":"state","type":"'read' | 'unread' | 'attention'","description":"Sets state of the stateful button variant. Default is \"unread\""},{"name":"tabIndex","type":"number","description":"Sets the button tabindex."},{"name":"type","type":"'button' | 'submit' | 'reset'","description":"Sets button type"},{"name":"variant","type":"'primary' | 'secondary' | 'tertiary' | 'danger' | 'warning' | 'link' | 'plain' | 'control' | 'stateful'","description":"Adds button variant styles"}]},{"name":"Popover","description":"The main popover component. The following properties can also be passed into another component\nthat has a property specifically for passing in popover properties.","props":[{"name":"alertSeverityScreenReaderText","type":"string","description":"Text announced by screen reader when alert severity variant is set to indicate\nseverity level."},{"name":"alertSeverityVariant","type":"'custom' | 'info' | 'warning' | 'success' | 'danger'","description":"Severity variants for an alert popover. This modifies the color of the header to\nmatch the severity."},{"name":"animationDuration","type":"number","description":"The duration of the CSS fade transition animation.","defaultValue":"300"},{"name":"appendTo","type":"HTMLElement | ((ref?: HTMLElement) => HTMLElement) | 'inline'","description":"The element to append the popover to. Defaults to \"inline\".","defaultValue":"() => document.body"},{"name":"aria-label","type":"string","description":"Accessible label for the popover, required when header is not present.","defaultValue":"''"},{"name":"bodyContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Body content of the popover. If you want to close the popover after an action within the\nbody content, you can use the isVisible prop for manual control, or you can provide a\nfunction which will receive a callback as an argument to hide the popover, i.e.\nbodyContent={hide => <Button onClick={() => hide()}>Close</Button>}","required":true},{"name":"children","type":"ReactElement<any>","description":"The trigger reference element to which the popover is relatively placed to. If you cannot wrap\nthe element with the Popover, you can use the triggerRef prop instead.\nUsage: <Popover><Button>Reference</Button></Popover>"},{"name":"className","type":"string","description":"Additional classes added to the popover.","defaultValue":"''"},{"name":"closeBtnAriaLabel","type":"string","description":"Accessible label for the close button.","defaultValue":"'Close'"},{"name":"distance","type":"number","description":"Distance of the popover to its target. Defaults to 25.","defaultValue":"25"},{"name":"elementToFocus","type":"HTMLElement | SVGElement | string","description":"The element to focus when the popover becomes visible. By default the first\nfocusable element will receive focus."},{"name":"enableFlip","type":"boolean","description":"If true, tries to keep the popover in view by flipping it if necessary.\nIf the position is set to 'auto', this prop is ignored.","defaultValue":"true"},{"name":"flipBehavior","type":"| 'flip'\n| (\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end'\n  )[]","description":"The desired position to flip the popover to if the initial position is not possible.\nBy setting this prop to 'flip' it attempts to flip the popover to the opposite side if\nthere is no space.\nYou can also pass an array of positions that determines the flip order. It should contain\nthe initial position followed by alternative positions if that position is unavailable.\nExample: Initial position is 'top'. Button with popover is in the top right corner.\n'flipBehavior' is set to ['top', 'right', 'left']. Since there is no space to the top, it\nchecks if right is available. There's also no space to the right, so it finally shows the\npopover on the left.","defaultValue":"[\n  'top',\n  'bottom',\n  'left',\n  'right',\n  'top-start',\n  'top-end',\n  'bottom-start',\n  'bottom-end',\n  'left-start',\n  'left-end',\n  'right-start',\n  'right-end'\n]"},{"name":"footerContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Footer content of the popover. If you want to close the popover after an action within the\nfooter content, you can use the isVisible prop for manual control, or you can provide a\nfunction which will receive a callback as an argument to hide the popover, i.e.\nfooterContent={hide => <Button onClick={() => hide()}>Close</Button>}","defaultValue":"null"},{"name":"hasAutoWidth","type":"boolean","description":"Removes fixed-width and allows width to be defined by contents.","defaultValue":"false"},{"name":"hasNoPadding","type":"boolean","description":"Allows content to touch edges of popover container.","defaultValue":"false"},{"name":"headerComponent","type":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"Sets the heading level to use for the popover header. Defaults to h6.","defaultValue":"'h6'"},{"name":"headerContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Simple header content to be placed within a title. If you want to close the popover after\nan action within the header content, you can use the isVisible prop for manual control,\nor you can provide a function which will receive a callback as an argument to hide the\npopover, i.e. headerContent={hide => <Button onClick={() => hide()}>Close</Button>}","defaultValue":"null"},{"name":"headerIcon","type":"React.ReactNode","description":"Icon to be displayed in the popover header. *","defaultValue":"null"},{"name":"hideOnOutsideClick","type":"boolean","description":"Hides the popover when a click occurs outside (only works if isVisible is not controlled\nby the user).","defaultValue":"true"},{"name":"id","type":"string","description":"Id used as part of the various popover elements (popover-${id}-header/body/footer)."},{"name":"isVisible","type":"boolean","description":"True to show the popover programmatically. Used in conjunction with the shouldClose prop.\nBy default, the popover child element handles click events automatically. If you want to\ncontrol this programmatically, the popover will not auto-close if the close button is\nclicked, the escape key is used, or if a click occurs outside the popover. Instead, the\nconsumer is responsible for closing the popover themselves by adding a callback listener\nfor the shouldClose prop.","defaultValue":"null"},{"name":"maxWidth","type":"string","description":"Maximum width of the popover (default 18.75rem).","defaultValue":"popoverMaxWidth && popoverMaxWidth.value"},{"name":"minWidth","type":"string","description":"Minimum width of the popover (default 6.25rem).","defaultValue":"popoverMinWidth && popoverMinWidth.value"},{"name":"onHidden","type":"() => void","description":"Lifecycle function invoked when the popover has fully transitioned out.","defaultValue":"(): void => null"},{"name":"onHide","type":"(event: MouseEvent | KeyboardEvent) => void","description":"Lifecycle function invoked when the popover begins to transition out.","defaultValue":"(): void => null"},{"name":"onMount","type":"() => void","description":"Lifecycle function invoked when the popover has been mounted to the DOM.","defaultValue":"(): void => null"},{"name":"onShow","type":"(event: MouseEvent | KeyboardEvent) => void","description":"Lifecycle function invoked when the popover begins to transition in.","defaultValue":"(): void => null"},{"name":"onShown","type":"() => void","description":"Lifecycle function invoked when the popover has fully transitioned in.","defaultValue":"(): void => null"},{"name":"position","type":"| PopoverPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Popover position. Note: With the enableFlip property set to true, it will change the\nposition if there is not enough space for the starting position. The behavior of where it\nflips to can be controlled through the flipBehavior property.","defaultValue":"'top'"},{"name":"shouldClose","type":"(event: MouseEvent | KeyboardEvent, hideFunction?: () => void) => void","description":"Callback function that is only invoked when isVisible is also controlled. Called when the\npopover close button is clicked, the enter key was used on it, or the escape key is used.","defaultValue":"(): void => null"},{"name":"shouldOpen","type":"(event: MouseEvent | KeyboardEvent, showFunction?: () => void) => void","description":"Callback function that is only invoked when isVisible is also controlled. Called when the\nenter key is used on the focused trigger.","defaultValue":"(): void => null"},{"name":"showClose","type":"boolean","description":"Flag indicating whether the close button should be shown.","defaultValue":"true"},{"name":"triggerAction","type":"'click' | 'hover'","description":"Sets an interaction to open popover, defaults to \"click\"","defaultValue":"'click'"},{"name":"triggerRef","type":"HTMLElement | (() => HTMLElement) | React.RefObject<any>","description":"The trigger reference element to which the popover is relatively placed to. If you can wrap the\nelement with the popover, you can use the children prop instead, or both props together.\nWhen passed along with the trigger prop, the div element that wraps the trigger will be removed.\nUsage: <Popover triggerRef={() => document.getElementById('reference-element')} />"},{"name":"withFocusTrap","type":"boolean","description":"Whether to trap focus in the popover."},{"name":"zIndex","type":"number","description":"The z-index of the popover.","defaultValue":"9999"}]}]},"Simple file upload":{"id":"Simple file upload","title":"Simple file upload","source":"react","tabName":null,"slug":"/components/file-upload/simple-file-upload/react","propComponents":[{"name":"FileUpload","description":"","props":[{"name":"allowEditingUploadedText","type":"boolean","description":"Flag to allow editing of a text file's contents after it is selected from disk."},{"name":"aria-label","type":"string","description":"Aria-label for the text area."},{"name":"browseButtonAriaDescribedby","type":"string","description":"ID or ID's of elements that describe the browse button. Typically this should refer\nto elements such as helper text when there are file restrictions."},{"name":"browseButtonText","type":"string","description":"Text for the browse button."},{"name":"children","type":"React.ReactNode","description":"Additional children to render after (or instead of) the file preview.","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the file upload container element."},{"name":"clearButtonText","type":"string","description":"Text for the clear button."},{"name":"dropzoneProps","type":"Partial<DropzoneOptions>","description":"Optional extra props to customize react-dropzone.","defaultValue":"{}"},{"name":"filename","type":"string","description":"Value to be shown in the read-only filename field.","defaultValue":"''"},{"name":"filenameAriaLabel","type":"string","description":"Aria-label for the read-only filename field."},{"name":"filenamePlaceholder","type":"string","description":"Placeholder string to display in the empty filename field."},{"name":"hideDefaultPreview","type":"boolean","description":"Flag to hide the built-in preview of the file (where available). If true, you can use\nthe children property to render an alternate preview."},{"name":"id","type":"string","description":"Unique id for the text area. Also used to generate ids for accessible labels.","required":true},{"name":"isDisabled","type":"boolean","description":"Flag to show if the field is disabled."},{"name":"isLoading","type":"boolean","description":"Flag to show if a file is being loaded."},{"name":"isReadOnly","type":"boolean","description":"Flag to show if the field is read only."},{"name":"isRequired","type":"boolean","description":"Flag to show if the field is required."},{"name":"onClearClick","type":"React.MouseEventHandler<HTMLButtonElement>","description":"Clear button was clicked."},{"name":"onClick","type":"(event: React.MouseEvent) => void","description":"Callback for clicking on the file upload field text area. By default, prevents a click\nin the text area from opening file dialog.","defaultValue":"(event) => event.preventDefault()"},{"name":"onDataChange","type":"(event: DropEvent, data: string) => void","description":"On data changed - if type='text' or type='dataURL' and file was loaded it will call this method"},{"name":"onFileInputChange","type":"(event: DropEvent, file: File) => void","description":"Change event emitted from the hidden \\<input type=\"file\" \\> field associated with the component","defaultValue":"null"},{"name":"onReadFailed","type":"(event: DropEvent, error: DOMException, fileHandle: File) => void","description":"A callback for when the FileReader API fails.","defaultValue":"() => {}"},{"name":"onReadFinished","type":"(event: DropEvent, fileHandle: File) => void","description":"A callback for when a selected file finishes loading.","defaultValue":"() => {}"},{"name":"onReadStarted","type":"(event: DropEvent, fileHandle: File) => void","description":"A callback for when a selected file starts loading.","defaultValue":"() => {}"},{"name":"onTextChange","type":"(event: React.ChangeEvent<HTMLTextAreaElement>, text: string) => void","description":"Text area text changed."},{"name":"spinnerAriaValueText","type":"string","description":"Aria-valuetext for the loading spinner."},{"name":"type","type":"'text' | 'dataURL'","description":"What type of file. Determines whether 'onDataChange` is called and what is\nexpected by the value property (a string for 'text' and 'dataURL', or a File object otherwise."},{"name":"validated","type":"'success' | 'error' | 'default'","description":"Value to indicate if the field is modified to show that validation state.\nIf set to success, field will be modified to indicate valid state.\nIf set to error, field will be modified to indicate error state."},{"name":"value","type":"string | File","description":"Value of the file's contents (string if text file, File object otherwise).","defaultValue":"type === fileReaderType.text || type === fileReaderType.dataURL ? '' : null"}]},{"name":"FileUploadField","description":"A more customizable file upload component for implementing custom logic. Drag and drop\nfunctionality is not built in by default.","props":[{"name":"allowEditingUploadedText","type":"boolean","description":"Flag to allow editing of a text file's contents after it is selected from disk.","defaultValue":"false"},{"name":"aria-label","type":"string","description":"Aria-label for the text area.","defaultValue":"'File upload'"},{"name":"browseButtonAriaDescribedby","type":"string","description":"ID or ID's of elements that describe the browse button. Typically this should refer\nto elements such as helper text when there are file restrictions."},{"name":"browseButtonText","type":"string","description":"Text for the browse button.","defaultValue":"'Browse...'"},{"name":"children","type":"React.ReactNode","description":"Additional children to render after (or instead of) the file preview.","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the file upload field container element.","defaultValue":"''"},{"name":"clearButtonText","type":"string","description":"Text for the clear button.","defaultValue":"'Clear'"},{"name":"containerRef","type":"React.Ref<HTMLDivElement>","description":"A reference object to attach to the file upload field container element.","defaultValue":"null"},{"name":"filename","type":"string","description":"Value to be shown in the read-only filename field.","defaultValue":"''"},{"name":"filenameAriaLabel","type":"string","description":"Aria-label for the read-only filename field.","defaultValue":"filename ? 'Read only filename' : filenamePlaceholder"},{"name":"filenamePlaceholder","type":"string","description":"Placeholder string to display in the empty filename field.","defaultValue":"'Drag a file here or browse to upload'"},{"name":"hideDefaultPreview","type":"boolean","description":"Flag to hide the built-in preview of the file (where available). If true, you can use\nthe children property to render an alternate preview.","defaultValue":"false"},{"name":"id","type":"string","description":"Unique id for the text area. Also used to generate ids for accessible labels.","required":true},{"name":"isClearButtonDisabled","type":"boolean","description":"Flag to disable the clear button.","defaultValue":"!filename && !value"},{"name":"isDisabled","type":"boolean","description":"Flag to show if the field is disabled.","defaultValue":"false"},{"name":"isDragActive","type":"boolean","description":"Flag to show if a file is being dragged over the file upload field.","defaultValue":"false"},{"name":"isLoading","type":"boolean","description":"Flag to show if a file is being loaded.","defaultValue":"false"},{"name":"isReadOnly","type":"boolean","description":"Flag to show if the field is read only.","defaultValue":"false"},{"name":"isRequired","type":"boolean","description":"Flag to show if the field is required.","defaultValue":"false"},{"name":"name","type":"string","description":"Name property for the text input."},{"name":"onBrowseButtonClick","type":"(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void","description":"A callback for when the browse button is clicked.","defaultValue":"() => {}"},{"name":"onClearButtonClick","type":"(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void","description":"A callback for when the clear button is clicked.","defaultValue":"() => {}"},{"name":"onTextAreaBlur","type":"(event?: any) => void","description":"Callback for when focus is lost on the text area field."},{"name":"onTextAreaClick","type":"(event: React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => void","description":"A callback for when the text area is clicked. Can also be set via the onClick property\nof the file upload component."},{"name":"onTextChange","type":"(event: React.ChangeEvent<HTMLTextAreaElement>, text: string) => void","description":"Text area text changed."},{"name":"spinnerAriaValueText","type":"string","description":"Aria-valuetext for the loading spinner."},{"name":"textAreaPlaceholder","type":"string","description":"Placeholder string to display in the empty text area field.","defaultValue":"''"},{"name":"type","type":"'text' | 'dataURL'","description":"What type of file. Determines what is is expected by the value property (a string for\n'text' and 'dataURL', or a File object otherwise)."},{"name":"validated","type":"'success' | 'error' | 'default'","description":"Value to indicate if the field is modified to show that validation state.\nIf set to success, field will be modified to indicate valid state.\nIf set to error,  field will be modified to indicate error state.","defaultValue":"'default'"},{"name":"value","type":"string | File","description":"Value of the file's contents (string if text file, File object otherwise).","defaultValue":"''"}]}]},"Expandable section":{"id":"Expandable section","title":"Expandable section","source":"react","tabName":null,"slug":"/components/expandable-section/react","propComponents":[{"name":"ExpandableSection","description":"The main expandable section component.","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the expandable section."},{"name":"className","type":"string","description":"Additional classes added to the expandable section.","defaultValue":"''"},{"name":"contentId","type":"string","description":"Id of the content of the expandable section. When passing in the isDetached property, this\nproperty's value should match the contenId property of the expandable section toggle sub-component."},{"name":"displaySize","type":"'default' | 'lg'","description":"Display size variant. Set to \"lg\" for disclosure styling.","defaultValue":"'default'"},{"name":"isDetached","type":"boolean","description":"Indicates the expandable section has a detached toggle.","defaultValue":"false"},{"name":"isExpanded","type":"boolean","description":"Flag to indicate if the content is expanded."},{"name":"isIndented","type":"boolean","description":"Flag to indicate if the content is indented.","defaultValue":"false"},{"name":"isWidthLimited","type":"boolean","description":"Flag to indicate the width of the component is limited. Set to \"true\" for disclosure styling.","defaultValue":"false"},{"name":"onToggle","type":"(event: React.MouseEvent, isExpanded: boolean) => void","description":"Callback function to toggle the expandable section. Detached expandable sections should\nuse the onToggle property of the expandable section toggle sub-component.","defaultValue":"(event, isExpanded): void => undefined"},{"name":"toggleContent","type":"React.ReactNode","description":"React node that appears in the attached toggle in place of the toggleText property."},{"name":"toggleId","type":"string","description":"Id of the toggle of the expandable section, which provides an accessible name to the\nexpandable section content via the aria-labelledby attribute. When the isDetached property\nis also passed in, the value of this property must match the toggleId property of the\nexpandable section toggle sub-component."},{"name":"toggleText","type":"string","description":"Text that appears in the attached toggle.","defaultValue":"''"},{"name":"toggleTextCollapsed","type":"string","description":"Text that appears in the attached toggle when collapsed (will override toggleText if\nboth are specified; used for uncontrolled expandable with dynamic toggle text).","defaultValue":"''"},{"name":"toggleTextExpanded","type":"string","description":"Text that appears in the attached toggle when expanded (will override toggleText if\nboth are specified; used for uncontrolled expandable with dynamic toggle text).","defaultValue":"''"},{"name":"truncateMaxLines","type":"number","description":"Truncates the expandable content to the specified number of lines when using the\n\"truncate\" variant."},{"name":"variant","type":"'default' | 'truncate'","description":"Determines the variant of the expandable section. When passing in \"truncate\" as the\nvariant, the expandable content will be truncated after 3 lines by default.","defaultValue":"'default'"}]},{"name":"ExpandableSectionToggle","description":"Acts as the toggle sub-component when the main expandable section component has the isDetached\nproperty passed in. Allows for more custom control over the expandable section's toggle.","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the expandable toggle."},{"name":"className","type":"string","description":"Additional classes added to the expandable toggle.","defaultValue":"''"},{"name":"contentId","type":"string","description":"Id of the toggle's respective expandable section content. The value passed into this\nproperty should match the contentId property of the main expandable section component."},{"name":"direction","type":"'up' | 'down'","description":"Direction the toggle arrow should point when the expandable section is expanded.","defaultValue":"'down'"},{"name":"hasTruncatedContent","type":"boolean","description":"Flag to determine toggle styling when the expandable content is truncated.","defaultValue":"false"},{"name":"isExpanded","type":"boolean","description":"Flag indicating if the expandable section is expanded.","defaultValue":"false"},{"name":"onToggle","type":"(isExpanded: boolean) => void","description":"Callback function to toggle the expandable content."},{"name":"toggleId","type":"string","description":"Id of the toggle. The value passed into this property should match the aria-labelledby\nproperty of the main expandable section component."}]}]},"Empty state":{"id":"Empty state","title":"Empty state","source":"react","tabName":null,"slug":"/components/empty-state/react","propComponents":[{"name":"EmptyState","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the empty state"},{"name":"className","type":"string","description":"Additional classes added to the empty state"},{"name":"headerClassName","type":"string","description":"Additional class names to apply to the empty state header"},{"name":"headingLevel","type":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"The heading level to use, default is h1"},{"name":"icon","type":"React.ComponentType<any>","description":"Empty state icon element to be rendered. Can also be a spinner component"},{"name":"isFullHeight","type":"boolean","description":"Cause component to consume the available height of its container"},{"name":"status","type":"'danger' | 'warning' | 'success' | 'info' | 'custom'","description":"Status of the empty state, will set a default status icon and color. Icon can be overwritten using the icon prop"},{"name":"titleClassName","type":"string","description":"Additional classes added to the title inside empty state header"},{"name":"titleText","type":"React.ReactNode","description":"Text of the title inside empty state header, will be wrapped in headingLevel","required":true},{"name":"variant","type":"'xs' | 'sm' | 'lg' | 'xl' | 'full'","description":"Modifies empty state max-width and sizes of icon, title and body","defaultValue":"EmptyStateVariant.full"}]},{"name":"EmptyStateBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the empty state body"},{"name":"className","type":"string","description":"Additional classes added to the empty state body"}]},{"name":"EmptyStateFooter","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the empty state footer"},{"name":"className","type":"string","description":"Additional classes added to the empty state footer"}]},{"name":"EmptyStateActions","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the empty state actions"},{"name":"className","type":"string","description":"Additional classes added to the empty state actions"}]}]},"Dual list selector":{"id":"Dual list selector","title":"Dual list selector","source":"react","tabName":null,"slug":"/components/dual-list-selector/react","propComponents":[{"name":"DualListSelector","description":"Acts as a container for all other DualListSelector sub-components when using a\ncomposable dual list selector.","props":[{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the dual list selector.","defaultValue":"''"},{"name":"className","type":"string","description":"Additional classes applied to the dual list selector."},{"name":"id","type":"string","description":"ID of the dual list selector."},{"name":"isTree","type":"boolean","description":"Flag indicating if the dual list selector uses trees instead of simple lists.","defaultValue":"false"}]},{"name":"DualListSelectorPane","description":"Acts as the container for a list of options that are either available or chosen,\ndepending on the pane type (available or chosen). A search input and other actions,\nsuch as sorting, can also be passed into this sub-component.","props":[{"name":"actions","type":"React.ReactNode[]","description":"Actions to place above the pane."},{"name":"children","type":"React.ReactNode","description":"A dual list selector list or dual list selector tree to be rendered in the pane."},{"name":"className","type":"string","description":"Additional classes applied to the dual list selector pane.","defaultValue":"''"},{"name":"id","type":"string","description":"ID of the pane.","defaultValue":"getUniqueId('dual-list-selector-pane')"},{"name":"isChosen","type":"boolean","description":"Flag indicating if this pane is the chosen pane.","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Flag indicating whether the component is disabled.","defaultValue":"false"},{"name":"listMinHeight","type":"string","description":"Minimum height of the list of options rendered in the pane. *"},{"name":"onSearch","type":"(event: React.ChangeEvent<HTMLInputElement>) => void","description":"Callback for search input. To be used when isSearchable is true."},{"name":"searchInput","type":"React.ReactNode","description":"A search input placed above the list at the top of the pane, before actions."},{"name":"status","type":"string","description":"Status to display above the pane.","defaultValue":"''"},{"name":"title","type":"React.ReactNode","description":"Title of the pane.","defaultValue":"''"}]},{"name":"DualListSelectorList","description":"Acts as the container for DualListSelectorListItem sub-components.","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the dual list selector list."}]},{"name":"DualListSelectorListItem","description":"Creates an individual option that can be selected and moved between the\ndual list selector panes. This is contained within the DualListSelectorList sub-component.","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the dual list selector."},{"name":"className","type":"string","description":"Additional classes applied to the dual list selector."},{"name":"draggableButtonAriaLabel","type":"string","description":"Accessible label for the draggable button on draggable list items."},{"name":"id","type":"string","description":"ID of the option."},{"name":"isDisabled","type":"boolean","description":"Flag indicating if the dual list selector is in a disabled state."},{"name":"isDraggable","type":"boolean","description":"Flag indicating this item is draggable for reordering."},{"name":"isSelected","type":"boolean","description":"Flag indicating the list item is currently selected."},{"name":"onOptionSelect","type":"(event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, id?: string) => void","description":"Callback fired when an option is selected."}]},{"name":"DualListSelectorControlsWrapper","description":"Acts as the container for the DualListSelectorControl sub-components.","props":[{"name":"aria-label","type":"string","description":"Accessible label for the dual list selector controls wrapper."},{"name":"children","type":"React.ReactNode","description":"Content to be rendered inside of the controls wrapper."},{"name":"className","type":"string","description":"Additional classes added to the wrapper."}]},{"name":"DualListSelectorControl","description":"Renders an individual control button for moving selected options between each\ndual list selector pane.","props":[{"name":"aria-label","type":"string","description":"Accessible label for the dual list selector control."},{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the dual list selector control."},{"name":"className","type":"string","description":"Additional classes applied to the dual list selector control."},{"name":"icon","type":"React.ReactNode","description":"Icon to be rendered in the dual list selector control."},{"name":"isDisabled","type":"boolean","description":"Flag indicating the control is disabled."},{"name":"onClick","type":"(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void","description":"Callback fired when dual list selector control is selected."},{"name":"tooltipContent","type":"React.ReactNode","description":"Content to be displayed in a tooltip on hover of control."},{"name":"tooltipProps","type":"any","description":"Additional tooltip properties passed to the tooltip."}]},{"name":"DualListSelectorTree","description":"Used in place of the DualListSelectorListItem sub-component when building a\ncomposable dual list selector with a tree.","props":[{"name":"data","type":"DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[])","description":"Data of the tree view.","required":true},{"name":"defaultAllExpanded","type":"boolean","description":"Sets the default expanded behavior.","defaultValue":"false"},{"name":"hasBadges","type":"boolean","description":"Flag indicating if all options should have badges.","defaultValue":"false"},{"name":"id","type":"string","description":"ID of the tree view."},{"name":"isDisabled","type":"boolean","description":"Flag indicating if the dual list selector tree is in the disabled state.","defaultValue":"false"},{"name":"onOptionCheck","type":"(\n  event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n  isChecked: boolean,\n  itemData: DualListSelectorTreeItemData\n) => void","description":"Callback fired when an option is checked."}]},{"name":"DualListSelectorTreeItemData","description":"","props":[{"name":"badgeProps","type":"any","description":"Additional properties to pass to the option badge."},{"name":"checkProps","type":"any","description":"Additional properties to pass to the option checkbox."},{"name":"children","type":"DualListSelectorTreeItemData[]","description":"Content rendered inside the dual list selector."},{"name":"className","type":"string","description":"Additional classes applied to the dual list selector."},{"name":"defaultExpanded","type":"boolean","description":"Flag indicating this option is expanded by default."},{"name":"hasBadge","type":"boolean","description":"Flag indicating this option has a badge."},{"name":"id","type":"string","description":"ID of the option.","required":true},{"name":"isChecked","type":"boolean","description":"Checked state of the option.","required":true},{"name":"isDisabled","type":"boolean","description":"Flag indicating whether the component is disabled."},{"name":"onOptionCheck","type":"(\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    isChosen: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void","description":"Callback fired when an option is checked."},{"name":"parentId","type":"string","description":"Parent ID of an option."},{"name":"text","type":"string","description":"Text of the option.","required":true}]}]},"Dropdown":{"id":"Dropdown","title":"Dropdown","source":"react","tabName":null,"slug":"/components/menus/dropdown/react","propComponents":[{"name":"Dropdown","description":"See the Menu documentation for additional props that may be passed.","props":[{"name":"children","type":"React.ReactNode","description":"Anything which can be rendered in a dropdown."},{"name":"className","type":"string","description":"Classes applied to root element of dropdown."},{"name":"isOpen","type":"boolean","description":"Flag to indicate if menu is opened."},{"name":"isPlain","type":"boolean","description":"Indicates if the menu should be without the outer box-shadow."},{"name":"isScrollable","type":"boolean","description":"Indicates if the menu should be scrollable."},{"name":"maxMenuHeight","type":"string","description":"Maximum height of dropdown menu"},{"name":"menuHeight","type":"string","description":"Height of the dropdown menu"},{"name":"onOpenChange","type":"(isOpen: boolean) => void","description":"Callback to allow the dropdown component to change the open state of the menu.\nTriggered by clicking outside of the menu, or by pressing any keys specificed in onOpenChangeKeys."},{"name":"onOpenChangeKeys","type":"string[]","description":"Keys that trigger onOpenChange, defaults to tab and escape. It is highly recommended to include Escape in the array, while Tab may be omitted if the menu contains non-menu items that are focusable."},{"name":"onSelect","type":"(event?: React.MouseEvent<Element, MouseEvent>, value?: string | number) => void","description":"Function callback called when user selects item."},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"popperProps","type":"DropdownPopperProps","description":"Additional properties to pass to the Popper"},{"name":"shouldFocusFirstItemOnOpen","type":"boolean","description":"Flag indicating the first menu item should be focused after opening the dropdown.","beta":true},{"name":"shouldFocusToggleOnSelect","type":"boolean","description":"Flag indicating the toggle should be focused after a selection. If this use case is too restrictive, the optional toggleRef property with a node toggle may be used to control focus."},{"name":"toggle","type":"DropdownToggleProps | ((toggleRef: React.RefObject<any>) => React.ReactNode)","description":"Dropdown toggle. The toggle should either be a renderer function which forwards the given toggle ref, or a direct ReactNode that should be passed along with the toggleRef property.","required":true},{"name":"zIndex","type":"number","description":"z-index of the dropdown menu"}]},{"name":"DropdownGroup","description":"See the MenuGroup section of the Menu documentation for additional props that may be passed.","props":[{"name":"children","type":"React.ReactNode","description":"Anything which can be rendered in a dropdown group.","required":true},{"name":"className","type":"string","description":"Classes applied to root element of dropdown group"},{"name":"label","type":"string","description":"Label of the dropdown group"},{"name":"labelHeadingLevel","type":"No type info","defaultValue":"'h1'"}]},{"name":"DropdownItem","description":"See the MenuItem section of the Menu documentation for additional props that may be passed.","props":[{"name":"children","type":"React.ReactNode","description":"Anything which can be rendered in a dropdown item"},{"name":"className","type":"string","description":"Classes applied to root element of dropdown item"},{"name":"description","type":"React.ReactNode","description":"Description of the dropdown item"},{"name":"isAriaDisabled","type":"boolean","description":"Render item as aria-disabled option"},{"name":"isDisabled","type":"boolean","description":"Render item as disabled option"},{"name":"onClick","type":"(event?: any) => void","description":"Callback for item click"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"tooltipProps","type":"TooltipProps","description":"Props for adding a tooltip to a menu item"},{"name":"value","type":"any","description":"Identifies the component in the dropdown onSelect callback"}]},{"name":"DropdownList","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything which can be rendered in a dropdown list","required":true},{"name":"className","type":"string","description":"Classes applied to root element of dropdown list"}]},{"name":"MenuToggle","description":"","props":[{"name":"badge","type":"BadgeProps | React.ReactNode","description":"Optional badge rendered inside the toggle, after the children content"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the toggle"},{"name":"className","type":"string","description":"Additional classes added to the toggle"},{"name":"icon","type":"React.ReactNode","description":"Optional icon or image rendered inside the toggle, before the children content. It is\nrecommended to wrap most basic icons in our icon component."},{"name":"isDisabled","type":"boolean","description":"Flag indicating the toggle is disabled"},{"name":"isExpanded","type":"boolean","description":"Flag indicating the toggle has expanded styling"},{"name":"isFullHeight","type":"boolean","description":"Flag indicating the toggle is full height"},{"name":"isFullWidth","type":"boolean","description":"Flag indicating the toggle takes up the full width of its parent"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id. It will always target the toggle button."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"size","type":"'default' | 'sm'","description":"Adds styling which affects the size of the menu toggle"},{"name":"splitButtonOptions","type":"SplitButtonOptions","description":"Object used to configure a split button menu toggle"},{"name":"status","type":"'success' | 'warning' | 'danger'","description":"Status styles of the menu toggle"},{"name":"statusIcon","type":"React.ReactNode","description":"Overrides the status icon"},{"name":"variant","type":"'default' | 'plain' | 'primary' | 'plainText' | 'secondary' | 'typeahead'","description":"Variant styles of the menu toggle"}]},{"name":"DropdownToggleProps","description":"","props":[{"name":"toggleNode","type":"React.ReactNode","description":"Dropdown toggle node.","required":true},{"name":"toggleRef","type":"React.RefObject<HTMLButtonElement>","description":"Reference to the toggle."}]},{"name":"DropdownPopperProps","description":"","props":[{"name":"appendTo","type":"HTMLElement | (() => HTMLElement) | 'inline'","description":"The container to append the popper to. Defaults to document.body."},{"name":"direction","type":"'up' | 'down'","description":"Vertical direction of the popper. If enableFlip is set to true, this will set the initial direction before the popper flips."},{"name":"enableFlip","type":"boolean","description":"Enable to flip the popper when it reaches the boundary"},{"name":"maxWidth","type":"string | 'trigger'","description":"Maximum width of the popper. If the value is \"trigger\", it will set the max width to the dropdown toggle's width"},{"name":"minWidth","type":"string | 'trigger'","description":"Minimum width of the popper. If the value is \"trigger\", it will set the min width to the dropdown toggle's width"},{"name":"position","type":"'right' | 'left' | 'center' | 'start' | 'end'","description":"Horizontal position of the popper"},{"name":"preventOverflow","type":"boolean","description":"Flag to prevent the popper from overflowing its container and becoming partially obscured."},{"name":"width","type":"string | 'trigger'","description":"Custom width of the popper. If the value is \"trigger\", it will set the width to the dropdown toggle's width"}]},{"name":"TooltipProps","description":"","props":[{"name":"animationDuration","type":"number","description":"CSS fade transition animation duration"},{"name":"appendTo","type":"HTMLElement | ((ref?: HTMLElement) => HTMLElement)","description":"The element to append the tooltip to, defaults to body"},{"name":"aria","type":"'describedby' | 'labelledby' | 'none'","description":"aria-labelledby or aria-describedby for tooltip.\nThe trigger will be cloned to add the aria attribute, and the corresponding id in the form of 'pf-tooltip-#' is added to the content container.\nIf you don't want that or prefer to add the aria attribute yourself on the trigger, set aria to 'none'."},{"name":"children","type":"ReactElement<any>","description":"The trigger reference element to which the Tooltip is relatively placed to.\nIf you cannot wrap the element with the Tooltip, you can use the triggerRef prop instead.\nUsage: <Tooltip><Button>Reference</Button></Tooltip>"},{"name":"className","type":"string","description":"Tooltip additional class"},{"name":"content","type":"React.ReactNode","description":"Tooltip content","required":true},{"name":"distance","type":"number","description":"Distance of the tooltip to its target, defaults to 15"},{"name":"enableFlip","type":"boolean","description":"If true, tries to keep the tooltip in view by flipping it if necessary"},{"name":"entryDelay","type":"number","description":"Delay in ms before the tooltip appears"},{"name":"exitDelay","type":"number","description":"Delay in ms before the tooltip disappears, Avoid passing in a value of \"0\", as users should\nbe given ample time to move their mouse from the trigger to the tooltip content without the content\nbeing hidden."},{"name":"flipBehavior","type":"| 'flip'\n    | (\n        | 'top'\n        | 'bottom'\n        | 'left'\n        | 'right'\n        | 'top-start'\n        | 'top-end'\n        | 'bottom-start'\n        | 'bottom-end'\n        | 'left-start'\n        | 'left-end'\n        | 'right-start'\n        | 'right-end'\n      )[]","description":"The desired position to flip the tooltip to if the initial position is not possible.\nBy setting this prop to 'flip' it attempts to flip the tooltip to the opposite side if there is no space.\nYou can also pass an array of positions that determines the flip order. It should contain the initial position\nfollowed by alternative positions if that position is unavailable.\nExample: Initial position is 'top'. Button with tooltip is in the top right corner. 'flipBehavior' is set to\n['top', 'right', 'left']. Since there is no space to the top, it checks if right is available. There's also no\nspace to the right, so it finally shows the tooltip on the left."},{"name":"id","type":"string","description":"id of the tooltip"},{"name":"isContentLeftAligned","type":"boolean","description":"Flag to indicate that the text content is left aligned"},{"name":"isVisible","type":"boolean","description":"value for visibility when trigger is 'manual'"},{"name":"maxWidth","type":"string","description":"Maximum width of the tooltip (default 18.75rem)"},{"name":"minWidth","type":"string | 'trigger'","description":"Minimum width of the tooltip. If set to \"trigger\", the minimum width will be set to the reference element width."},{"name":"onTooltipHidden","type":"() => void","description":"Callback when tooltip's hide transition has finished executing"},{"name":"position","type":"| TooltipPosition\n    | 'auto'\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end'","description":"Tooltip position. Note: With 'enableFlip' set to true,\nit will change the position if there is not enough space for the starting position.\nThe behavior of where it flips to can be controlled through the flipBehavior prop.\nThe 'auto' position chooses the side with the most space.\nThe 'auto' position requires the 'enableFlip' prop to be true."},{"name":"trigger","type":"string","description":"Tooltip trigger: click, mouseenter, focus, manual\nSet to manual to trigger tooltip programmatically (through the isVisible prop)"},{"name":"triggerRef","type":"HTMLElement | (() => HTMLElement) | React.RefObject<any>","description":"The trigger reference element to which the Tooltip is relatively placed to.\nIf you can wrap the element with the Tooltip, you can use the children prop instead, or both props together.\nWhen passed along with the trigger prop, the div element that wraps the trigger will be removed.\nUsage: <Tooltip triggerRef={() => document.getElementById('reference-element')} />"},{"name":"Unknown","type":"'off' | 'polite'","description":"Determines whether the tooltip is an aria-live region. If the triggerRef prop is passed in the\ndefault behavior is 'polite' in order to ensure the tooltip contents is announced to\nassistive technologies. Otherwise the default behavior is 'off'."},{"name":"zIndex","type":"number","description":"z-index of the tooltip"}]}]},"Drawer":{"id":"Drawer","title":"Drawer","source":"react","tabName":null,"slug":"/components/drawer/react","propComponents":[{"name":"Drawer","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered in the drawer panel"},{"name":"className","type":"string","description":"Additional classes added to the Drawer.","defaultValue":"''"},{"name":"isExpanded","type":"boolean","description":"Indicates if the drawer is expanded","defaultValue":"false"},{"name":"isInline","type":"boolean","description":"Indicates if the content element and panel element are displayed side by side.","defaultValue":"false"},{"name":"isStatic","type":"boolean","description":"Indicates if the drawer will always show both content and panel.","defaultValue":"false"},{"name":"onExpand","type":"(event: KeyboardEvent | React.MouseEvent | React.TransitionEvent) => void","description":"Callback when drawer panel is expanded after waiting 250ms for animation to complete.","defaultValue":"() => {}"},{"name":"position","type":"'start' | 'end' | 'bottom' | 'left' | 'right'","description":"Position of the drawer panel. left and right are deprecated, use start and end instead.","defaultValue":"'end'"}]},{"name":"DrawerSection","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the drawer section."},{"name":"className","type":"string","description":"Additional classes added to the drawer section.","defaultValue":"''"},{"name":"colorVariant","type":"DrawerColorVariant | 'no-background' | 'default' | 'secondary'","description":"Color variant of the background of the drawer Section","defaultValue":"DrawerColorVariant.default"}]},{"name":"DrawerContent","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the drawer."},{"name":"className","type":"string","description":"Additional classes added to the Drawer."},{"name":"colorVariant","type":"DrawerContentColorVariant | 'default' | 'primary' | 'secondary'","description":"Color variant of the background of the drawer panel","defaultValue":"DrawerContentColorVariant.default"},{"name":"panelContent","type":"React.ReactNode","description":"Content rendered in the drawer panel.","required":true}]},{"name":"DrawerContentBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the drawer"},{"name":"className","type":"string","description":"Additional classes added to the Drawer.","defaultValue":"''"},{"name":"hasPadding","type":"boolean","description":"Indicates if there should be padding around the drawer content body","defaultValue":"false"}]},{"name":"DrawerPanelContent","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the drawer panel."},{"name":"className","type":"string","description":"Additional classes added to the drawer."},{"name":"colorVariant","type":"DrawerColorVariant | 'no-background' | 'default' | 'secondary'","description":"Color variant of the background of the drawer panel","defaultValue":"DrawerColorVariant.default"},{"name":"defaultSize","type":"string","description":"The starting size of a drawer."},{"name":"focusTrap","type":"DrawerPanelFocusTrapObject","description":"Adds and customizes a focus trap on the drawer panel content."},{"name":"hasNoBorder","type":"boolean","description":"Flag indicating that the drawer panel should not have a border.","defaultValue":"false"},{"name":"id","type":"string","description":"ID of the drawer panel"},{"name":"increment","type":"number","description":"The increment amount for keyboard drawer resizing.","defaultValue":"5"},{"name":"isResizable","type":"boolean","description":"Flag indicating that the drawer panel should be resizable.","defaultValue":"false"},{"name":"maxSize","type":"string","description":"The maximum size of a drawer."},{"name":"minSize","type":"string","description":"The minimum size of a drawer."},{"name":"onResize","type":"(event: MouseEvent | TouchEvent | React.KeyboardEvent, width: number, id: string) => void","description":"Callback for resize end."},{"name":"resizeAriaLabel","type":"string","description":"Aria label for the resizable drawer splitter.","defaultValue":"'Resize'"},{"name":"widths","type":"{\n  default?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  lg?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  xl?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n  '2xl'?: 'width_25' | 'width_33' | 'width_50' | 'width_66' | 'width_75' | 'width_100';\n}","description":"Width for drawer panel at various breakpoints. Overriden by resizable drawer minSize and defaultSize."}]},{"name":"DrawerHead","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the drawer head"},{"name":"className","type":"string","description":"Additional classes added to the drawer head.","defaultValue":"''"}]},{"name":"DrawerActions","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Actions to be rendered in the panel head."},{"name":"className","type":"string","description":"Additional classes added to the drawer actions button.","defaultValue":"''"}]},{"name":"DrawerCloseButton","description":"","props":[{"name":"aria-label","type":"string","description":"Accessible label for the drawer close button","defaultValue":"'Close drawer panel'"},{"name":"className","type":"string","description":"Additional classes added to the drawer close button outer <div>.","defaultValue":"''"},{"name":"onClose","type":"() => void","description":"A callback for when the close button is clicked","defaultValue":"() => undefined as any"}]},{"name":"DrawerPanelDescription","description":"Provides a description within the drawer panel. This should typically follow the drawer head.","props":[{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the drawer description","required":true},{"name":"className","type":"string","description":"Additional classes added to the drawer description."}]},{"name":"DrawerPanelBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the drawer"},{"name":"className","type":"string","description":"Additional classes added to the Drawer.","defaultValue":"''"},{"name":"hasNoPadding","type":"boolean","description":"Indicates if there should be no padding around the drawer panel body","defaultValue":"false"}]},{"name":"DrawerPanelFocusTrapObject","description":"","props":[{"name":"elementToFocusOnExpand","type":"HTMLElement | SVGElement | string","description":"The element to focus when the drawer panel content expands. By default the\nfirst focusable element will receive focus. If there are no focusable elements, the\npanel itself will receive focus."},{"name":"enabled","type":"boolean","description":"Enables a focus trap on the drawer panel content. This will also automatically\nhandle focus management when the panel expands and when it collapses. Do not pass\nthis prop if the isStatic prop on the drawer component is true."},{"name":"Unknown","type":"string","description":"One or more id's to use for the drawer panel content's accessible label."}]}]},"Divider":{"id":"Divider","title":"Divider","source":"react","tabName":null,"slug":"/components/divider/react","propComponents":[{"name":"Divider","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the divider"},{"name":"component","type":"'hr' | 'li' | 'div'","description":"The component type to use","defaultValue":"DividerVariant.hr"},{"name":"inset","type":"{\n  default?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  sm?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  md?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  lg?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  xl?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n  '2xl'?: 'insetNone' | 'insetXs' | 'insetSm' | 'insetMd' | 'insetLg' | 'insetXl' | 'inset2xl' | 'inset3xl';\n}","description":"Insets at various breakpoints."},{"name":"orientation","type":"{\n  default?: 'vertical' | 'horizontal';\n  sm?: 'vertical' | 'horizontal';\n  md?: 'vertical' | 'horizontal';\n  lg?: 'vertical' | 'horizontal';\n  xl?: 'vertical' | 'horizontal';\n  '2xl'?: 'vertical' | 'horizontal';\n}","description":"Indicates how the divider will display at various breakpoints. Vertical divider must be in a flex layout."}]}]},"Description list":{"id":"Description list","title":"Description list","source":"react","tabName":null,"slug":"/components/description-list/react","propComponents":[{"name":"DescriptionList","description":"","props":[{"name":"autoFitMinModifier","type":"{\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}","description":"Sets the minimum column size for the auto-fit (isAutoFit) layout at various breakpoints."},{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of the list","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the list","defaultValue":"''"},{"name":"columnModifier","type":"{\n  default?: '1Col' | '2Col' | '3Col';\n  sm?: '1Col' | '2Col' | '3Col';\n  md?: '1Col' | '2Col' | '3Col';\n  lg?: '1Col' | '2Col' | '3Col';\n  xl?: '1Col' | '2Col' | '3Col';\n  '2xl'?: '1Col' | '2Col' | '3Col';\n}","description":"Sets the number of columns on the description list at various breakpoints"},{"name":"displaySize","type":"'default' | 'lg' | '2xl'","description":"Sets the display size of the descriptions in the description list.","defaultValue":"'default'"},{"name":"horizontalTermWidthModifier","type":"{\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}","description":"Sets the horizontal description list's term column width at various breakpoints."},{"name":"isAutoColumnWidths","type":"boolean","description":"Sets the description list to format automatically."},{"name":"isAutoFit","type":"boolean","description":"Sets the description list to auto fit."},{"name":"isCompact","type":"boolean","description":"Sets the description list to compact styling."},{"name":"isFillColumns","type":"boolean","description":"Sets the the default placement of description list groups to fill from top to bottom."},{"name":"isFluid","type":"boolean","description":"Sets a horizontal description list to have fluid styling."},{"name":"isHorizontal","type":"boolean","description":"Sets the description list component term and description pair to a horizontal layout.","defaultValue":"false"},{"name":"isInlineGrid","type":"boolean","description":"Modifies the description list display to inline-grid."},{"name":"orientation","type":"{\n  sm?: 'vertical' | 'horizontal';\n  md?: 'vertical' | 'horizontal';\n  lg?: 'vertical' | 'horizontal';\n  xl?: 'vertical' | 'horizontal';\n  '2xl'?: 'vertical' | 'horizontal';\n}","description":"Indicates how the menu will align at various breakpoints."},{"name":"termWidth","type":"string","description":"Sets the description list's term column width."}]},{"name":"DescriptionListDescription","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of list description","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the DescriptionListDescription"}]},{"name":"DescriptionListGroup","description":"","props":[{"name":"children","type":"any","description":"Any elements that can be rendered in the list group"},{"name":"className","type":"string","description":"Additional classes added to the DescriptionListGroup"}]},{"name":"DescriptionListTerm","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of list term","required":true},{"name":"className","type":"string","description":"Additional classes added to the DescriptionListTerm"},{"name":"icon","type":"React.ReactNode","description":"Icon that is rendered inside of list term to the left side of the children"}]},{"name":"DescriptionListTermHelpText","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of list term","required":true},{"name":"className","type":"string","description":"Additional classes added to the DescriptionListTermHelpText"}]},{"name":"DescriptionListTermHelpTextButton","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of list term","required":true},{"name":"className","type":"string","description":"Additional classes added to the DescriptionListTerm"}]},{"name":"Popover","description":"The main popover component. The following properties can also be passed into another component\nthat has a property specifically for passing in popover properties.","props":[{"name":"alertSeverityScreenReaderText","type":"string","description":"Text announced by screen reader when alert severity variant is set to indicate\nseverity level."},{"name":"alertSeverityVariant","type":"'custom' | 'info' | 'warning' | 'success' | 'danger'","description":"Severity variants for an alert popover. This modifies the color of the header to\nmatch the severity."},{"name":"animationDuration","type":"number","description":"The duration of the CSS fade transition animation.","defaultValue":"300"},{"name":"appendTo","type":"HTMLElement | ((ref?: HTMLElement) => HTMLElement) | 'inline'","description":"The element to append the popover to. Defaults to \"inline\".","defaultValue":"() => document.body"},{"name":"aria-label","type":"string","description":"Accessible label for the popover, required when header is not present.","defaultValue":"''"},{"name":"bodyContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Body content of the popover. If you want to close the popover after an action within the\nbody content, you can use the isVisible prop for manual control, or you can provide a\nfunction which will receive a callback as an argument to hide the popover, i.e.\nbodyContent={hide => <Button onClick={() => hide()}>Close</Button>}","required":true},{"name":"children","type":"ReactElement<any>","description":"The trigger reference element to which the popover is relatively placed to. If you cannot wrap\nthe element with the Popover, you can use the triggerRef prop instead.\nUsage: <Popover><Button>Reference</Button></Popover>"},{"name":"className","type":"string","description":"Additional classes added to the popover.","defaultValue":"''"},{"name":"closeBtnAriaLabel","type":"string","description":"Accessible label for the close button.","defaultValue":"'Close'"},{"name":"distance","type":"number","description":"Distance of the popover to its target. Defaults to 25.","defaultValue":"25"},{"name":"elementToFocus","type":"HTMLElement | SVGElement | string","description":"The element to focus when the popover becomes visible. By default the first\nfocusable element will receive focus."},{"name":"enableFlip","type":"boolean","description":"If true, tries to keep the popover in view by flipping it if necessary.\nIf the position is set to 'auto', this prop is ignored.","defaultValue":"true"},{"name":"flipBehavior","type":"| 'flip'\n| (\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end'\n  )[]","description":"The desired position to flip the popover to if the initial position is not possible.\nBy setting this prop to 'flip' it attempts to flip the popover to the opposite side if\nthere is no space.\nYou can also pass an array of positions that determines the flip order. It should contain\nthe initial position followed by alternative positions if that position is unavailable.\nExample: Initial position is 'top'. Button with popover is in the top right corner.\n'flipBehavior' is set to ['top', 'right', 'left']. Since there is no space to the top, it\nchecks if right is available. There's also no space to the right, so it finally shows the\npopover on the left.","defaultValue":"[\n  'top',\n  'bottom',\n  'left',\n  'right',\n  'top-start',\n  'top-end',\n  'bottom-start',\n  'bottom-end',\n  'left-start',\n  'left-end',\n  'right-start',\n  'right-end'\n]"},{"name":"footerContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Footer content of the popover. If you want to close the popover after an action within the\nfooter content, you can use the isVisible prop for manual control, or you can provide a\nfunction which will receive a callback as an argument to hide the popover, i.e.\nfooterContent={hide => <Button onClick={() => hide()}>Close</Button>}","defaultValue":"null"},{"name":"hasAutoWidth","type":"boolean","description":"Removes fixed-width and allows width to be defined by contents.","defaultValue":"false"},{"name":"hasNoPadding","type":"boolean","description":"Allows content to touch edges of popover container.","defaultValue":"false"},{"name":"headerComponent","type":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"Sets the heading level to use for the popover header. Defaults to h6.","defaultValue":"'h6'"},{"name":"headerContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Simple header content to be placed within a title. If you want to close the popover after\nan action within the header content, you can use the isVisible prop for manual control,\nor you can provide a function which will receive a callback as an argument to hide the\npopover, i.e. headerContent={hide => <Button onClick={() => hide()}>Close</Button>}","defaultValue":"null"},{"name":"headerIcon","type":"React.ReactNode","description":"Icon to be displayed in the popover header. *","defaultValue":"null"},{"name":"hideOnOutsideClick","type":"boolean","description":"Hides the popover when a click occurs outside (only works if isVisible is not controlled\nby the user).","defaultValue":"true"},{"name":"id","type":"string","description":"Id used as part of the various popover elements (popover-${id}-header/body/footer)."},{"name":"isVisible","type":"boolean","description":"True to show the popover programmatically. Used in conjunction with the shouldClose prop.\nBy default, the popover child element handles click events automatically. If you want to\ncontrol this programmatically, the popover will not auto-close if the close button is\nclicked, the escape key is used, or if a click occurs outside the popover. Instead, the\nconsumer is responsible for closing the popover themselves by adding a callback listener\nfor the shouldClose prop.","defaultValue":"null"},{"name":"maxWidth","type":"string","description":"Maximum width of the popover (default 18.75rem).","defaultValue":"popoverMaxWidth && popoverMaxWidth.value"},{"name":"minWidth","type":"string","description":"Minimum width of the popover (default 6.25rem).","defaultValue":"popoverMinWidth && popoverMinWidth.value"},{"name":"onHidden","type":"() => void","description":"Lifecycle function invoked when the popover has fully transitioned out.","defaultValue":"(): void => null"},{"name":"onHide","type":"(event: MouseEvent | KeyboardEvent) => void","description":"Lifecycle function invoked when the popover begins to transition out.","defaultValue":"(): void => null"},{"name":"onMount","type":"() => void","description":"Lifecycle function invoked when the popover has been mounted to the DOM.","defaultValue":"(): void => null"},{"name":"onShow","type":"(event: MouseEvent | KeyboardEvent) => void","description":"Lifecycle function invoked when the popover begins to transition in.","defaultValue":"(): void => null"},{"name":"onShown","type":"() => void","description":"Lifecycle function invoked when the popover has fully transitioned in.","defaultValue":"(): void => null"},{"name":"position","type":"| PopoverPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Popover position. Note: With the enableFlip property set to true, it will change the\nposition if there is not enough space for the starting position. The behavior of where it\nflips to can be controlled through the flipBehavior property.","defaultValue":"'top'"},{"name":"shouldClose","type":"(event: MouseEvent | KeyboardEvent, hideFunction?: () => void) => void","description":"Callback function that is only invoked when isVisible is also controlled. Called when the\npopover close button is clicked, the enter key was used on it, or the escape key is used.","defaultValue":"(): void => null"},{"name":"shouldOpen","type":"(event: MouseEvent | KeyboardEvent, showFunction?: () => void) => void","description":"Callback function that is only invoked when isVisible is also controlled. Called when the\nenter key is used on the focused trigger.","defaultValue":"(): void => null"},{"name":"showClose","type":"boolean","description":"Flag indicating whether the close button should be shown.","defaultValue":"true"},{"name":"triggerAction","type":"'click' | 'hover'","description":"Sets an interaction to open popover, defaults to \"click\"","defaultValue":"'click'"},{"name":"triggerRef","type":"HTMLElement | (() => HTMLElement) | React.RefObject<any>","description":"The trigger reference element to which the popover is relatively placed to. If you can wrap the\nelement with the popover, you can use the children prop instead, or both props together.\nWhen passed along with the trigger prop, the div element that wraps the trigger will be removed.\nUsage: <Popover triggerRef={() => document.getElementById('reference-element')} />"},{"name":"withFocusTrap","type":"boolean","description":"Whether to trap focus in the popover."},{"name":"zIndex","type":"number","description":"The z-index of the popover.","defaultValue":"9999"}]},{"name":"Card","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Card"},{"name":"className","type":"string","description":"Additional classes added to the Card"},{"name":"component","type":"unknown","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"},{"name":"id","type":"string","description":"ID of the Card. Also passed back in the CardHeader onExpand callback.","defaultValue":"''"},{"name":"isClickable","type":"boolean","description":"Flag indicating that the card is clickable and contains some action that triggers on click.","defaultValue":"false"},{"name":"isClicked","type":"boolean","description":"Flag indicating whether a card that is either only clickable or that is both clickable and selectable\nis currently clicked and has clicked styling.","defaultValue":"false"},{"name":"isCompact","type":"boolean","description":"Modifies the card to include compact styling. Should not be used with isLarge.","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Flag indicating that a clickable or selectable card is disabled.","defaultValue":"false"},{"name":"isExpanded","type":"boolean","description":"Flag indicating if a card is expanded. Modifies the card to be expandable.","defaultValue":"false"},{"name":"isFullHeight","type":"boolean","description":"Cause component to consume the available height of its container","defaultValue":"false"},{"name":"isLarge","type":"boolean","description":"Modifies the card to be large. Should not be used with isCompact.","defaultValue":"false"},{"name":"isPlain","type":"boolean","description":"Modifies the card to include plain styling; this removes border and background","defaultValue":"false"},{"name":"isSelectable","type":"boolean","description":"Flag indicating that the card is selectable.","defaultValue":"false"},{"name":"isSelected","type":"boolean","description":"Flag indicating whether a card that is either selectable only or both clickable and selectable is\ncurrently selected and has selected styling.","defaultValue":"false"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"variant","type":"'default' | 'secondary'","description":"Card background color variant","defaultValue":"'default'"}]}]},"Date picker":{"id":"Date picker","title":"Date picker","source":"react","tabName":null,"slug":"/components/date-and-time/date-picker/react","propComponents":[{"name":"DatePicker","description":"The main date picker component.","props":[{"name":"appendTo","type":"HTMLElement | ((ref?: HTMLElement) => HTMLElement) | 'inline'","description":"The container to append the menu to. Defaults to 'inline'.\nIf your menu is being cut off you can append it to an element higher up the DOM tree.\nSome examples:\nmenuAppendTo={() => document.body};\nmenuAppendTo={document.getElementById('target')}","defaultValue":"'inline'"},{"name":"aria-label","type":"string","description":"Accessible label for the date picker.","defaultValue":"'Date picker'"},{"name":"buttonAriaLabel","type":"string","description":"Accessible label for the button to open the date picker.","defaultValue":"'Toggle date picker'"},{"name":"className","type":"string","description":"Additional classes added to the date picker."},{"name":"dateFormat","type":"(date: Date) => string","description":"How to format the date in the text input.","defaultValue":"(date: Date) =>\n`${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date\n  .getDate()\n  .toString()\n  .padStart(2, '0')}`"},{"name":"dateParse","type":"(value: string) => Date","description":"How to parse the date in the text input.","defaultValue":"(val: string) => (val.split('-').length === 3 ? new Date(`${val}T00:00:00`) : new Date(undefined))"},{"name":"helperText","type":"React.ReactNode","description":"Helper text to display alongside the date picker. Expects a HelperText component."},{"name":"inputProps","type":"TextInputProps","description":"Additional props for the text input.","defaultValue":"{}"},{"name":"invalidFormatText","type":"string","description":"Error message to display when the text input contains a non-empty value in an invalid format.","defaultValue":"'Invalid date'"},{"name":"isDisabled","type":"boolean","description":"Flag indicating the date picker is disabled.","defaultValue":"false"},{"name":"locale","type":"No type info","defaultValue":"undefined"},{"name":"onBlur","type":"(event: any, value: string, date?: Date) => void","description":"Callback called every time the text input loses focus.","defaultValue":"(): any => undefined"},{"name":"onChange","type":"(event: React.FormEvent<HTMLInputElement>, value: string, date?: Date) => void","description":"Callback called every time the text input value changes.","defaultValue":"(): any => undefined"},{"name":"placeholder","type":"string","description":"String to display in the empty text input as a hint for the expected date format.","defaultValue":"'YYYY-MM-DD'"},{"name":"popoverProps","type":"Partial<Omit<PopoverProps, 'appendTo'>>","description":"Props to pass to the popover that contains the calendar month component."},{"name":"requiredDateOptions","type":"DatePickerRequiredObject","description":"Options to customize the requirement of a date"},{"name":"style","type":"No type info","defaultValue":"{}"},{"name":"validators","type":"((date: Date) => string)[]","description":"Functions that returns an error message if a date is invalid.","defaultValue":"[]"},{"name":"value","type":"string","description":"Value of the text input.","defaultValue":"''"}]},{"name":"CalendarFormat","description":"Additional properties that extend from and can be passed to the main component. These\nproperties allow customizing the calendar formatting and aria-labels.","props":[{"name":"cellAriaLabel","type":"(date: Date) => string","description":"Accessible label for the date cells."},{"name":"dayFormat","type":"(date: Date) => React.ReactNode","description":"How to format days in buttons in table cells."},{"name":"inlineProps","type":"CalendarMonthInlineProps","description":"Props used to ensure accessibility when displaying the calendar month inline."},{"name":"locale","type":"string","description":"If using the default formatters which locale to use. Undefined defaults to current locale.\nSee https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation"},{"name":"longWeekdayFormat","type":"(date: Date) => React.ReactNode","description":"How to format days in header for screen readers."},{"name":"monthFormat","type":"(date: Date) => React.ReactNode","description":"How to format months in month select."},{"name":"nextMonthAriaLabel","type":"string","description":"Accessible label for the next month button."},{"name":"prevMonthAriaLabel","type":"string","description":"Accessible label for the previous month button."},{"name":"rangeStart","type":"Date","description":"Which date to start range styles from."},{"name":"weekdayFormat","type":"(date: Date) => React.ReactNode","description":"How to format week days in header."},{"name":"weekStart","type":"0 | 1 | 2 | 3 | 4 | 5 | 6 | Weekday","description":"Day of week that starts the week. 0 is Sunday, 6 is Saturday."},{"name":"yearInputAriaLabel","type":"string","description":"Accessible label for the year input."}]},{"name":"DatePickerRef","description":"Allows finer control over the calendar's open state when a React ref is passed into the\ndate picker component. Accessed via ref.current[property], e.g. ref.current.toggleCalendar().","props":[{"name":"isCalendarOpen","type":"boolean","description":"Current calendar open status.","required":true},{"name":"setCalendarOpen","type":"(isOpen: boolean) => void","description":"Sets the calendar open status.","required":true},{"name":"toggleCalendar","type":"(isOpen?: boolean) => void","description":"Toggles the calendar open status. If no parameters are passed, the calendar will simply\ntoggle its open status.\nIf the isOpen parameter is passed, that will set the calendar open status to the value\nof the isOpen parameter.\nIf the eventKey parameter is set to 'Escape', that will invoke the date pickers\nonEscapePress event to toggle the correct control appropriately.","required":true}]},{"name":"DatePickerRequiredObject","description":"Props that customize the requirement of a date","props":[{"name":"emptyDateText","type":"string","description":"Error message to display when the text input is empty and the isRequired prop is also passed in."},{"name":"isRequired","type":"boolean","description":"Flag indicating the date is required."}]}]},"Data list":{"id":"Data list","title":"Data list","source":"react","tabName":null,"slug":"/components/data-list/react","propComponents":[{"name":"DataList","description":"","props":[{"name":"aria-label","type":"string","description":"Adds accessible text to the DataList list","required":true},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the DataList list"},{"name":"className","type":"string","description":"Additional classes added to the DataList list"},{"name":"gridBreakpoint","type":"'none' | 'always' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'","description":"Specifies the grid breakpoints"},{"name":"isCompact","type":"boolean","description":"Flag indicating if DataList should have compact styling"},{"name":"onSelectableRowChange","type":"(event: React.FormEvent<HTMLInputElement>, id: string) => void","description":"Object that causes the data list to render hidden inputs which improve selectable item a11y"},{"name":"onSelectDataListItem","type":"(event: React.MouseEvent | React.KeyboardEvent, id: string) => void","description":"Optional callback to make DataList selectable, fired when DataListItem selected"},{"name":"selectedDataListItemId","type":"string","description":"Id of DataList item currently selected"},{"name":"wrapModifier","type":"DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord'","description":"Determines which wrapping modifier to apply to the DataList"}]},{"name":"DataListAction","description":"","props":[{"name":"aria-label","type":"string","description":"Adds accessible text to the DataList Action","required":true},{"name":"aria-labelledby","type":"string","description":"Adds accessible text to the DataList Action","required":true},{"name":"children","type":"React.ReactNode","description":"Content rendered as DataList Action  (e.g <Button> or <Dropdown>)","required":true},{"name":"className","type":"string","description":"Additional classes added to the DataList Action"},{"name":"id","type":"string","description":"Identify the DataList toggle number","required":true},{"name":"isPlainButtonAction","type":"boolean","description":"Flag to indicate that the action is a plain button (e.g. kebab dropdown toggle) so that styling is applied to align the button"},{"name":"visibility","type":"{\n  default?: 'hidden' | 'visible';\n  sm?: 'hidden' | 'visible';\n  md?: 'hidden' | 'visible';\n  lg?: 'hidden' | 'visible';\n  xl?: 'hidden' | 'visible';\n  '2xl'?: 'hidden' | 'visible';\n}","description":"What breakpoints to hide/show the data list action"}]},{"name":"DataListCell","description":"","props":[{"name":"alignRight","type":"boolean","description":"Aligns the cell content to the right of its parent.","defaultValue":"false"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the DataList cell","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the DataList cell","defaultValue":"''"},{"name":"isFilled","type":"boolean","description":"Enables the body Content to fill the height of the card","defaultValue":"true"},{"name":"isIcon","type":"boolean","description":"Set to true if the cell content is an Icon","defaultValue":"false"},{"name":"width","type":"1 | 2 | 3 | 4 | 5","description":"Width (from 1-5) to the DataList cell","defaultValue":"1"},{"name":"wrapModifier","type":"DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord'","description":"Determines which wrapping modifier to apply to the DataListCell","defaultValue":"null"}]},{"name":"DataListCheck","description":"","props":[{"name":"aria-labelledby","type":"string","description":"Aria-labelledby of the DataList checkbox","required":true},{"name":"checked","type":"boolean","description":"Flag to show if the DataList checkbox is checked when it is controlled by React state. Both isChecked and checked are valid,\nbut only use one.\nTo make the DataList checkbox uncontrolled, instead use the defaultChecked prop, but do not use both.","defaultValue":"false"},{"name":"className","type":"string","description":"Additional classes added to the DataList item checkbox","defaultValue":"''"},{"name":"defaultChecked","type":"boolean","description":"Flag to set default value of DataList checkbox when it is uncontrolled by React state.\nTo make the DataList checkbox controlled, instead use the isChecked prop, but do not use both."},{"name":"isChecked","type":"boolean","description":"Flag to show if the DataList checkbox is checked when it is controlled by React state. Both isChecked and checked are valid,\nbut only use one.\nTo make the DataList checkbox uncontrolled, instead use the defaultChecked prop, but do not use both.","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Flag to show if the DataList checkbox is disabled","defaultValue":"false"},{"name":"isValid","type":"boolean","description":"Flag to show if the DataList checkbox selection is valid or invalid","defaultValue":"true"},{"name":"onChange","type":"(event: React.FormEvent<HTMLInputElement>, checked: boolean) => void","description":"A callback for when the DataList checkbox selection changes","defaultValue":"(event: React.FormEvent<HTMLInputElement>, checked: boolean) => {}"},{"name":"otherControls","type":"boolean","description":"Flag to indicate if other controls are used in the DataListItem","defaultValue":"false"}]},{"name":"DataListItem","description":"","props":[{"name":"aria-labelledby","type":"string","description":"Adds accessible text to the DataList item","defaultValue":"''"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the DataList item","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the DataList item should be either <DataListItemRow> or <DataListContent>","defaultValue":"''"},{"name":"id","type":"string","description":"Unique id for the DataList item","defaultValue":"''"},{"name":"isExpanded","type":"boolean","description":"Flag to show if the expanded content of the DataList item is visible","defaultValue":"false"},{"name":"selectableInputAriaLabel","type":"string","description":"Aria label to apply to the selectable input if one is rendered"}]},{"name":"DataListItemCells","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the DataList item Content Wrapper.  Children should be one ore more <DataListCell> nodes","defaultValue":"''"},{"name":"dataListCells","type":"React.ReactNode","description":"Array of <DataListCell> nodes that are rendered one after the other."},{"name":"rowid","type":"string","description":"Id for the row","defaultValue":"''"}]},{"name":"DataListItemRow","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the DataListItemRow","required":true},{"name":"className","type":"string","description":"Additional classes added to the DataListItemRow","defaultValue":"''"},{"name":"rowid","type":"string","description":"Id for the row item","defaultValue":"''"},{"name":"wrapModifier","type":"DataListWrapModifier | 'nowrap' | 'truncate' | 'breakWord'","description":"Determines which wrapping modifier to apply to the DataListItemRow","defaultValue":"null"}]},{"name":"DataListToggle","description":"","props":[{"name":"aria-controls","type":"string","description":"Allows users of some screen readers to shift focus to the controlled element. Should be used when the controlled contents are not adjacent to the toggle that controls them.","defaultValue":"''"},{"name":"aria-label","type":"string","description":"Adds accessible text to the DataList toggle","defaultValue":"'Details'"},{"name":"aria-labelledby","type":"string","description":"Adds accessible text to the DataList toggle"},{"name":"buttonProps","type":"ButtonProps","description":"Additional properties spread to the toggle button"},{"name":"className","type":"string","description":"Additional classes added to the DataList cell","defaultValue":"''"},{"name":"id","type":"string","description":"Identify the DataList toggle number","required":true},{"name":"isExpanded","type":"boolean","description":"Flag to show if the expanded content of the DataList item is visible","defaultValue":"false"},{"name":"rowid","type":"string","description":"Id for the row","defaultValue":"''"}]},{"name":"DataListContent","description":"","props":[{"name":"aria-label","type":"string","description":"Adds accessible text to the DataList toggle","required":true},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the DataList item","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the DataList cell","defaultValue":"''"},{"name":"hasNoPadding","type":"boolean","description":"Flag to remove padding from the expandable content","defaultValue":"false"},{"name":"id","type":"string","description":"Identify the DataListContent item","defaultValue":"''"},{"name":"isHidden","type":"boolean","description":"Flag to show if the expanded content of the DataList item is visible","defaultValue":"false"},{"name":"rowid","type":"string","description":"Id for the row","defaultValue":"''"}]},{"name":"DataListDragButton","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the drag button","defaultValue":"''"},{"name":"isDisabled","type":"boolean","description":"Flag indicating if drag is disabled for the item","defaultValue":"false"},{"name":"type","type":"'button' | 'submit' | 'reset'","description":"Sets button type"}]},{"name":"DataListControl","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Children of the data list control"},{"name":"className","type":"string","description":"Additional classes added to the DataList item control","defaultValue":"''"}]}]},"Content":{"id":"Content","title":"Content","source":"react","tabName":null,"slug":"/components/content/react","propComponents":[{"name":"Content","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Children rendered within the Content."},{"name":"className","type":"string","description":"Additional classes added to the Content.","defaultValue":"''"},{"name":"component","type":"| 'h1'\n| 'h2'\n| 'h3'\n| 'h4'\n| 'h5'\n| 'h6'\n| 'p'\n| 'a'\n| 'small'\n| 'blockquote'\n| 'pre'\n| 'hr'\n| 'ul'\n| 'ol'\n| 'dl'\n| 'li'\n| 'dt'\n| 'dd'","description":"The content component. If none provided, it will be a 'div' and styling will be applied to all its child components."},{"name":"isPlainList","type":"boolean","description":"Modifies the list (ul, ol and dl components) to have plain styling.","defaultValue":"false"},{"name":"isVisitedLink","type":"boolean","description":"Flag to indicate the link (or all links within the content) has visited styles applied if the browser determines the link has been visited.","defaultValue":"false"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"}]}]},"Code block":{"id":"Code block","title":"Code block","source":"react","tabName":null,"slug":"/components/code-block/react","propComponents":[{"name":"CodeBlock","description":"","props":[{"name":"actions","type":"React.ReactNode","description":"Actions in the code block header. Should be wrapped with CodeBlockAction.","defaultValue":"null"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the code block","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes passed to the code block wrapper"}]},{"name":"CodeBlockAction","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the code block action","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes passed to the code block action"}]},{"name":"CodeBlockCode","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Code rendered inside the code block","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes passed to the code block pre wrapper"},{"name":"codeClassName","type":"string","description":"Additional classes passed to the code block code"}]}]},"Clipboard copy":{"id":"Clipboard copy","title":"Clipboard copy","source":"react","tabName":null,"slug":"/components/clipboard-copy/react","propComponents":[{"name":"ClipboardCopy","description":"","props":[{"name":"additionalActions","type":"React.ReactNode","description":"Additional actions for inline clipboard copy. Should be wrapped with ClipboardCopyAction.","defaultValue":"null"},{"name":"children","type":"string","description":"The text which is copied.","required":true},{"name":"className","type":"string","description":"Additional classes added to the clipboard copy container."},{"name":"clickTip","type":"string","description":"Tooltip message to display when clicking the copy button","defaultValue":"'Successfully copied to clipboard!'"},{"name":"entryDelay","type":"number","description":"Delay in ms before the tooltip appears.","defaultValue":"300"},{"name":"exitDelay","type":"number","description":"Delay in ms before the tooltip disappears.","defaultValue":"1500"},{"name":"hoverTip","type":"string","description":"Tooltip message to display when hover the copy button","defaultValue":"'Copy to clipboard'"},{"name":"isBlock","type":"boolean","description":"Flag to determine if inline clipboard copy should be block styling"},{"name":"isCode","type":"boolean","description":"Flag to determine if clipboard copy content includes code","defaultValue":"false"},{"name":"isExpanded","type":"boolean","description":"Flag to determine if clipboard copy is in the expanded state initially","defaultValue":"false"},{"name":"isReadOnly","type":"boolean","description":"Flag to show if the input is read only.","defaultValue":"false"},{"name":"maxWidth","type":"string","description":"Maximum width of the tooltip (default 150px).","defaultValue":"'150px'"},{"name":"onChange","type":"(event: React.FormEvent, text?: string) => void","description":"A function that is triggered on changing the text.","defaultValue":"(): any => undefined"},{"name":"onCopy","type":"(event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => void","description":"A function that is triggered on clicking the copy button. This will replace the existing clipboard copy functionality entirely.","defaultValue":"(_event: React.ClipboardEvent<HTMLDivElement>, text?: React.ReactNode) => {\n  try {\n    navigator.clipboard.writeText(text.toString());\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      \"Clipboard API not found, this copy function will not work. This is likely because you're using an\",\n      \"unsupported browser or you're not using HTTPS. \\n\\nIf you're a developer building an application which needs\",\n      \"to support copying to the clipboard without the clipboard API, you'll have to create your own copy\",\n      'function and pass it to the ClipboardCopy component as the onCopy prop. For more information see',\n      'https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard'\n    );\n\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n}"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"position","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Copy button tooltip position.","defaultValue":"TooltipPosition.top"},{"name":"textAriaLabel","type":"string","description":"Aria-label to use on the TextInput.","defaultValue":"'Copyable input'"},{"name":"toggleAriaLabel","type":"string","description":"Aria-label to use on the ClipboardCopyToggle.","defaultValue":"'Show content'"},{"name":"variant","type":"typeof ClipboardCopyVariant | 'inline' | 'expansion' | 'inline-compact'","description":"Adds Clipboard Copy variant styles.","defaultValue":"'inline'"}]},{"name":"ClipboardCopyButton","description":"","props":[{"name":"aria-label","type":"string","description":"Aria-label for the copy button","defaultValue":"'Copyable input'"},{"name":"children","type":"React.ReactNode","description":"Content of the copy button","required":true},{"name":"className","type":"string","description":"Additional classes added to the copy button"},{"name":"entryDelay","type":"number","description":"Entry delay on the copy button tooltip","defaultValue":"300"},{"name":"exitDelay","type":"number","description":"Exit delay on the copy button tooltip","defaultValue":"0"},{"name":"hasNoPadding","type":"boolean","description":"Removes padding from clipboard copy button. This is used for inline-compact variant","defaultValue":"false"},{"name":"id","type":"string","description":"ID of the copy button","required":true},{"name":"maxWidth","type":"string","description":"Max width of the copy button tooltip","defaultValue":"'100px'"},{"name":"onClick","type":"(event: React.MouseEvent) => void","description":"Callback for the copy when the button is clicked","required":true},{"name":"onTooltipHidden","type":"() => void","description":"Callback when tooltip's hide transition has finished executing","defaultValue":"() => {}"},{"name":"position","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Position of the copy button tooltip","defaultValue":"'top'"},{"name":"textId","type":"string","description":"ID of the content that is being copied","required":true},{"name":"variant","type":"'control' | 'plain'","description":"Variant of the copy button","defaultValue":"'control'"}]}]},"Checkbox":{"id":"Checkbox","title":"Checkbox","source":"react","tabName":null,"slug":"/components/forms/checkbox/react","propComponents":[{"name":"Checkbox","description":"","props":[{"name":"aria-label","type":"string","description":"Aria-label of the checkbox."},{"name":"body","type":"React.ReactNode","description":"Body text of the checkbox"},{"name":"checked","type":"boolean","description":""},{"name":"className","type":"string","description":"Additional classes added to the checkbox wrapper. This wrapper will be div element by default. It will be a label element if\nisLabelWrapped is true, or it can be overridden by any element specified in the component prop.","defaultValue":"''"},{"name":"component","type":"React.ElementType","description":"Sets the checkbox wrapper component to render. Defaults to \"div\". If set to \"label\", behaves the same as if isLabelWrapped prop was specified."},{"name":"description","type":"React.ReactNode","description":"Description text of the checkbox."},{"name":"id","type":"string","description":"Id of the checkbox.","required":true},{"name":"inputClassName","type":"string","description":"Additional classes added to the checkbox input."},{"name":"isChecked","type":"boolean | null","description":"Flag to show if the checkbox is checked. If null, the checkbox will be indeterminate (partially checked).","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Flag to show if the checkbox is disabled.","defaultValue":"false"},{"name":"isLabelWrapped","type":"boolean","description":"Flag to indicate whether the checkbox wrapper element is a <label> element for the checkbox input. Will not apply if a component prop (with a value other than a \"label\") is specified.","defaultValue":"false"},{"name":"isRequired","type":"boolean","description":"Flag to show if the checkbox is required.","defaultValue":"false"},{"name":"isValid","type":"boolean","description":"Flag to show if the checkbox selection is valid or invalid.","defaultValue":"true"},{"name":"label","type":"React.ReactNode","description":"Label text of the checkbox."},{"name":"labelPosition","type":"'start' | 'end'","description":"Sets the position of the label. Defaults to 'end' (after the checkbox input)."},{"name":"onChange","type":"(event: React.FormEvent<HTMLInputElement>, checked: boolean) => void","description":"A callback for when the checkbox selection changes.","defaultValue":"() => {}"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"}]}]},"Card":{"id":"Card","title":"Card","source":"react","tabName":null,"slug":"/components/card/react","propComponents":[{"name":"Card","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Card"},{"name":"className","type":"string","description":"Additional classes added to the Card"},{"name":"component","type":"unknown","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"},{"name":"id","type":"string","description":"ID of the Card. Also passed back in the CardHeader onExpand callback.","defaultValue":"''"},{"name":"isClickable","type":"boolean","description":"Flag indicating that the card is clickable and contains some action that triggers on click.","defaultValue":"false"},{"name":"isClicked","type":"boolean","description":"Flag indicating whether a card that is either only clickable or that is both clickable and selectable\nis currently clicked and has clicked styling.","defaultValue":"false"},{"name":"isCompact","type":"boolean","description":"Modifies the card to include compact styling. Should not be used with isLarge.","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Flag indicating that a clickable or selectable card is disabled.","defaultValue":"false"},{"name":"isExpanded","type":"boolean","description":"Flag indicating if a card is expanded. Modifies the card to be expandable.","defaultValue":"false"},{"name":"isFullHeight","type":"boolean","description":"Cause component to consume the available height of its container","defaultValue":"false"},{"name":"isLarge","type":"boolean","description":"Modifies the card to be large. Should not be used with isCompact.","defaultValue":"false"},{"name":"isPlain","type":"boolean","description":"Modifies the card to include plain styling; this removes border and background","defaultValue":"false"},{"name":"isSelectable","type":"boolean","description":"Flag indicating that the card is selectable.","defaultValue":"false"},{"name":"isSelected","type":"boolean","description":"Flag indicating whether a card that is either selectable only or both clickable and selectable is\ncurrently selected and has selected styling.","defaultValue":"false"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"variant","type":"'default' | 'secondary'","description":"Card background color variant","defaultValue":"'default'"}]},{"name":"CardHeader","description":"","props":[{"name":"actions","type":"CardHeaderActionsObject","description":"Actions of the card header"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the card header"},{"name":"className","type":"string","description":"Additional classes added to the card header"},{"name":"id","type":"string","description":"ID of the card header."},{"name":"isToggleRightAligned","type":"boolean","description":"Whether to right-align expandable toggle button"},{"name":"onExpand","type":"(event: React.MouseEvent, id: string) => void","description":"Callback expandable card"},{"name":"selectableActions","type":"CardHeaderSelectableActionsObject","description":"Selectable actions of the card header"},{"name":"toggleButtonProps","type":"any","description":"Additional props for expandable toggle button"}]},{"name":"CardHeaderActionsObject","description":"","props":[{"name":"actions","type":"React.ReactNode","description":"Actions of the card header","required":true},{"name":"className","type":"string","description":"Additional classes added to the actions wrapper"},{"name":"hasNoOffset","type":"boolean","description":"Flag indicating that the actions have no offset"}]},{"name":"CardHeaderSelectableActionsObject","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the selectable actions wrapper"},{"name":"hasNoOffset","type":"boolean","description":"Flag indicating that the actions have no offset"},{"name":"isChecked","type":"boolean","description":""},{"name":"isExternalLink","type":"boolean","description":"Flag to indicate whether a clickable-only card's link should open in a new tab/window."},{"name":"name","type":"string","description":"Name for the input element of a selectable card."},{"name":"onChange","type":"(event: React.FormEvent<HTMLInputElement>, checked: boolean) => void","description":"Callback for when a selectable card input changes"},{"name":"onClickAction","type":"(event: React.MouseEvent) => void","description":"Action to call when a clickable-only card is clicked. This cannot be combined with the to prop."},{"name":"selectableActionAriaLabel","type":"string","description":"Adds an accessible name to the input of a selectable card or clickable button/anchor of a clickable-only card.\nThis or selectableActionAriaLabelledby is required for clickable-only cards."},{"name":"selectableActionAriaLabelledby","type":"string","description":"A single or list of space-delimited ID's that provide an accessible name to the input of a selectable card\nor clickable button/anchor of a clickable-only card. This or selectableActionAriaLabelledby is required\nfor clickable-only cards."},{"name":"selectableActionId","type":"string","description":"Custom ID passed to the selectable card's input or a clickable-only card's button/anchor.\nIf omitted, a random unique ID will be assigned to a selectable card's input."},{"name":"selectableActionProps","type":"any","description":"Additional props spread to a selectable card input or clickable-only card's button/anchor."},{"name":"to","type":"string","description":"Link to navigate to when a clickable-only card is clicked. This cannot be combined with the onClickAction prop."},{"name":"variant","type":"'single' | 'multiple'","description":"Determines the type of input to be used for a selectable card."}]},{"name":"CardTitle","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the CardTitle"},{"name":"className","type":"string","description":"Additional classes added to the CardTitle"},{"name":"component","type":"unknown","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"}]},{"name":"CardBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Card Body"},{"name":"className","type":"string","description":"Additional classes added to the Card Body"},{"name":"component","type":"unknown","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"},{"name":"isFilled","type":"boolean","description":"Enables the body Content to fill the height of the card","defaultValue":"true"}]},{"name":"CardFooter","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Card Footer"},{"name":"className","type":"string","description":"Additional classes added to the Footer"},{"name":"component","type":"unknown","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"}]},{"name":"CardExpandableContent","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Card Body"},{"name":"className","type":"string","description":"Additional classes added to the Card Body"}]}]},"Calendar month":{"id":"Calendar month","title":"Calendar month","source":"react","tabName":null,"slug":"/components/date-and-time/calendar-month/react","propComponents":[{"name":"CalendarMonth","description":"The main calendar month component.","props":[{"name":"cellAriaLabel","type":"(date: Date) => string","description":"Accessible label for the date cells."},{"name":"className","type":"string","description":"Additional classes to add to the outer div of the calendar month."},{"name":"date","type":"Date","description":"Month/year to base other dates around."},{"name":"dayFormat","type":"(date: Date) => React.ReactNode","description":"How to format days in buttons in table cells.","defaultValue":"(date) => date.getDate()"},{"name":"inlineProps","type":"CalendarMonthInlineProps","description":"Props used to ensure accessibility when displaying the calendar month inline."},{"name":"isDateFocused","type":"boolean","description":"Flag to set browser focus on the passed date. *","defaultValue":"false"},{"name":"locale","type":"string","description":"If using the default formatters which locale to use. Undefined defaults to current locale.\nSee https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation","defaultValue":"undefined"},{"name":"longWeekdayFormat","type":"(date: Date) => React.ReactNode","description":"How to format days in header for screen readers.","defaultValue":"(date) => date.toLocaleDateString(locale, { weekday: 'long' })"},{"name":"monthFormat","type":"(date: Date) => React.ReactNode","description":"How to format months in month select.","defaultValue":"(date) => date.toLocaleDateString(locale, { month: 'long' })"},{"name":"nextMonthAriaLabel","type":"string","description":"Accessible label for the next month button.","defaultValue":"'Next month'"},{"name":"onChange","type":"(event: React.MouseEvent<HTMLButtonElement, MouseEvent>, date: Date) => void","description":"Callback when date is selected.","defaultValue":"() => {}"},{"name":"onMonthChange","type":"(\n  event?: React.MouseEvent | React.ChangeEvent | React.FormEvent<HTMLInputElement>,\n  newDate?: Date\n) => void","description":"Callback when month or year is changed.","defaultValue":"() => {}"},{"name":"prevMonthAriaLabel","type":"string","description":"Accessible label for the previous month button.","defaultValue":"'Previous month'"},{"name":"rangeStart","type":"Date","description":"Which date to start range styles from."},{"name":"validators","type":"((date: Date) => boolean)[]","description":"Functions that returns if a date is valid and selectable.","defaultValue":"[() => true]"},{"name":"weekdayFormat","type":"(date: Date) => React.ReactNode","description":"How to format week days in header.","defaultValue":"(date) => date.toLocaleDateString(locale, { weekday: 'narrow' })"},{"name":"weekStart","type":"0 | 1 | 2 | 3 | 4 | 5 | 6 | Weekday","description":"Day of week that starts the week. 0 is Sunday, 6 is Saturday.","defaultValue":"0"},{"name":"yearInputAriaLabel","type":"string","description":"Accessible label for the year input.","defaultValue":"'Select year'"}]},{"name":"CalendarFormat","description":"Additional properties that extend from and can be passed to the main component. These\nproperties allow customizing the calendar formatting and aria-labels.","props":[{"name":"cellAriaLabel","type":"(date: Date) => string","description":"Accessible label for the date cells."},{"name":"dayFormat","type":"(date: Date) => React.ReactNode","description":"How to format days in buttons in table cells."},{"name":"inlineProps","type":"CalendarMonthInlineProps","description":"Props used to ensure accessibility when displaying the calendar month inline."},{"name":"locale","type":"string","description":"If using the default formatters which locale to use. Undefined defaults to current locale.\nSee https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation"},{"name":"longWeekdayFormat","type":"(date: Date) => React.ReactNode","description":"How to format days in header for screen readers."},{"name":"monthFormat","type":"(date: Date) => React.ReactNode","description":"How to format months in month select."},{"name":"nextMonthAriaLabel","type":"string","description":"Accessible label for the next month button."},{"name":"prevMonthAriaLabel","type":"string","description":"Accessible label for the previous month button."},{"name":"rangeStart","type":"Date","description":"Which date to start range styles from."},{"name":"weekdayFormat","type":"(date: Date) => React.ReactNode","description":"How to format week days in header."},{"name":"weekStart","type":"0 | 1 | 2 | 3 | 4 | 5 | 6 | Weekday","description":"Day of week that starts the week. 0 is Sunday, 6 is Saturday."},{"name":"yearInputAriaLabel","type":"string","description":"Accessible label for the year input."}]},{"name":"CalendarMonthInlineProps","description":"","props":[{"name":"ariaLabelledby","type":"string","description":"Id of the accessible label of the calendar month. Recommended to map to the title."},{"name":"component","type":"keyof JSX.IntrinsicElements","description":"Component wrapping the calendar month when used inline. Recommended to be 'article'."},{"name":"title","type":"React.ReactNode","description":"Title of the calendar rendered above the inline calendar month. Recommended to be a 'title' component."}]}]},"Button":{"id":"Button","title":"Button","source":"react","tabName":null,"slug":"/components/button/react","propComponents":[{"name":"Button","description":"","props":[{"name":"aria-label","type":"string","description":"Adds accessible text to the button."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the button"},{"name":"className","type":"string","description":"Additional classes added to the button"},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Sets the base component to render. defaults to button"},{"name":"countOptions","type":"BadgeCountObject","description":"Adds count number to button"},{"name":"hasNoPadding","type":"boolean","description":"Applies no padding on a plain button variant. Use when plain button is placed inline with text"},{"name":"icon","type":"React.ReactNode | null","description":"Icon for the button. Usable by all variants except for plain."},{"name":"iconPosition","type":"'start' | 'end' | 'left' | 'right'","description":"Sets position of the icon. Note: \"left\" and \"right\" are deprecated. Use \"start\" and \"end\" instead"},{"name":"inoperableEvents","type":"string[]","description":"Events to prevent when the button is in an aria-disabled state"},{"name":"isAriaDisabled","type":"boolean","description":"Adds disabled styling and communicates that the button is disabled using the aria-disabled html attribute"},{"name":"isBlock","type":"boolean","description":"Adds block styling to button"},{"name":"isClicked","type":"boolean","description":"Adds clicked styling to button."},{"name":"isDanger","type":"boolean","description":"Adds danger styling to secondary or link button variants"},{"name":"isDisabled","type":"boolean","description":"Adds disabled styling and disables the button using the disabled html attribute"},{"name":"isInline","type":"boolean","description":"Adds inline styling to a link button"},{"name":"isLoading","type":"boolean","description":"Adds progress styling to button"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"size","type":"'default' | 'sm' | 'lg'","description":"Adds styling which affects the size of the button"},{"name":"spinnerAriaLabel","type":"string","description":"Accessible label for the spinner to describe what is loading"},{"name":"spinnerAriaLabelledBy","type":"string","description":"Id of element which describes what is being loaded"},{"name":"spinnerAriaValueText","type":"string","description":"Text describing that current loading status or progress"},{"name":"state","type":"'read' | 'unread' | 'attention'","description":"Sets state of the stateful button variant. Default is \"unread\""},{"name":"tabIndex","type":"number","description":"Sets the button tabindex."},{"name":"type","type":"'button' | 'submit' | 'reset'","description":"Sets button type"},{"name":"variant","type":"'primary' | 'secondary' | 'tertiary' | 'danger' | 'warning' | 'link' | 'plain' | 'control' | 'stateful'","description":"Adds button variant styles"}]},{"name":"BadgeCountObject","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the badge count"},{"name":"count","type":"number","description":"Adds count number right of button"},{"name":"isRead","type":"boolean","description":"Adds styling to the badge to indicate it has been read"}]}]},"Breadcrumb":{"id":"Breadcrumb","title":"Breadcrumb","source":"react","tabName":null,"slug":"/components/breadcrumb/react","propComponents":[{"name":"Breadcrumb","description":"","props":[{"name":"aria-label","type":"string","description":"Aria label added to the breadcrumb nav.","defaultValue":"'Breadcrumb'"},{"name":"children","type":"React.ReactNode","description":"Children nodes be rendered to the BreadCrumb. Should be of type BreadCrumbItem.","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the breadcrumb nav.","defaultValue":"''"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"}]},{"name":"BreadcrumbItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the breadcrumb item.","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the breadcrumb item.","defaultValue":"''"},{"name":"component","type":"React.ElementType","description":"Sets the base component to render. Defaults to <a>","defaultValue":"'a'"},{"name":"isActive","type":"boolean","description":"Flag indicating whether the item is active.","defaultValue":"false"},{"name":"isDropdown","type":"boolean","description":"Flag indicating whether the item contains a dropdown.","defaultValue":"false"},{"name":"render","type":"(props: BreadcrumbItemRenderArgs) => React.ReactNode","description":"A render function to render the component inside the breadcrumb item.","defaultValue":"undefined"},{"name":"showDivider","type":"boolean","description":"Internal prop set by Breadcrumb on all but the first crumb"},{"name":"target","type":"string","description":"Target for breadcrumb link.","defaultValue":"undefined"},{"name":"to","type":"string","description":"HREF for breadcrumb link.","defaultValue":"undefined"}]},{"name":"BreadcrumbHeading","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the breadcrumb title.","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the breadcrumb item.","defaultValue":"''"},{"name":"component","type":"React.ReactNode","description":"Sets the base component to render. Defaults to <a>","defaultValue":"'a'"},{"name":"showDivider","type":"boolean","description":"Internal prop set by Breadcrumb on all but the first crumb"},{"name":"target","type":"string","description":"Target for breadcrumb link.","defaultValue":"undefined"},{"name":"to","type":"string","description":"HREF for breadcrumb link.","defaultValue":"undefined"}]}]},"Brand":{"id":"Brand","title":"Brand","source":"react","tabName":null,"slug":"/components/brand/react","propComponents":[{"name":"Brand","description":"","props":[{"name":"alt","type":"string","description":"Attribute that specifies the alt text of a <img> Brand. For a <picture> Brand this specifies the fallback <img> alt text.","required":true},{"name":"children","type":"React.ReactNode","description":"Transforms the Brand into a <picture> element from an <img> element. Container for <source> child elements."},{"name":"className","type":"string","description":"Additional classes added to the either type of Brand.","defaultValue":"''"},{"name":"heights","type":"{\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}","description":"Heights at various breakpoints for a <picture> Brand."},{"name":"src","type":"string","description":"Attribute that specifies the URL of a <img> Brand. For a <picture> Brand this specifies the fallback <img> URL.","defaultValue":"''"},{"name":"widths","type":"{\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}","description":"Widths at various breakpoints for a <picture> Brand."}]}]},"Banner":{"id":"Banner","title":"Banner","source":"react","tabName":null,"slug":"/components/banner/react","propComponents":[{"name":"Banner","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the banner."},{"name":"className","type":"string","description":"Additional classes added to the banner."},{"name":"color","type":"'red' | 'orangered' | 'orange' | 'yellow' | 'green' | 'teal' | 'blue' | 'purple'","description":"Color options for the banner, will be overwritten by any applied using the status prop."},{"name":"isSticky","type":"boolean","description":"If set to true, the banner sticks to the top of its container","defaultValue":"false"},{"name":"screenReaderText","type":"string","description":"Text announced by screen readers to indicate the type of banner. This prop should only\nbe passed in when the banner conveys status/severity."},{"name":"status","type":"'success' | 'warning' | 'danger' | 'info' | 'custom'","description":"Status style options for the banner, will overwrite any color applied using the color prop."}]}]},"Badge":{"id":"Badge","title":"Badge","source":"react","tabName":null,"slug":"/components/badge/react","propComponents":[{"name":"Badge","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Badge","defaultValue":"''"},{"name":"className","type":"string","description":"additional classes added to the Badge","defaultValue":"''"},{"name":"isDisabled","type":"boolean","description":"Adds styling to the badge to indicate it is disabled","defaultValue":"false"},{"name":"isRead","type":"boolean","description":"Adds styling to the badge to indicate it has been read","defaultValue":"false"},{"name":"screenReaderText","type":"string","description":"Text announced by screen readers to indicate the current content/status of the badge."}]}]},"Background image":{"id":"Background image","title":"Background image","source":"react","tabName":null,"slug":"/components/background-image/react","propComponents":[{"name":"BackgroundImage","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the background image."},{"name":"src","type":"string","description":"The URL or file path of the image for the background","required":true}]}]},"Backdrop":{"id":"Backdrop","title":"Backdrop","source":"react","tabName":null,"slug":"/components/backdrop/react","propComponents":[{"name":"Backdrop","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the backdrop","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the backdrop","defaultValue":"''"}]}]},"Back to top":{"id":"Back to top","title":"Back to top","source":"react","tabName":null,"slug":"/components/back-to-top/react","propComponents":[{"name":"BackToTop","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the back to top."},{"name":"isAlwaysVisible","type":"boolean","description":"Flag to always show back to top button, defaults to false."},{"name":"scrollableSelector","type":"string","description":"Selector for the scrollable element to spy on. Not passing a selector defaults to spying on window scroll events."},{"name":"title","type":"string","description":"Title to appear in back to top button."}]}]},"Avatar":{"id":"Avatar","title":"Avatar","source":"react","tabName":null,"slug":"/components/avatar/react","propComponents":[{"name":"Avatar","description":"","props":[{"name":"alt","type":"string","description":"Attribute that specifies the alternate text of the image for the avatar.","required":true},{"name":"className","type":"string","description":"Additional classes added to the avatar."},{"name":"isBordered","type":"boolean","description":"Flag to indicate the avatar should have a border."},{"name":"size","type":"'sm' | 'md' | 'lg' | 'xl'","description":"Size variant of avatar."},{"name":"src","type":"string","description":"Attribute that specifies the URL of the image for the avatar.","defaultValue":"''"}]}]},"Alert":{"id":"Alert","title":"Alert","source":"react","tabName":null,"slug":"/components/alert/react","propComponents":[{"name":"Alert","description":"The main alert component.","props":[{"name":"actionClose","type":"React.ReactNode","description":"Close button; use the alert action close button component."},{"name":"actionLinks","type":"React.ReactNode","description":"Action links; use a single alert action link component or multiple wrapped in an array\nor React.Fragment."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the alert.","defaultValue":"''"},{"name":"className","type":"string","description":"Additional classes to add to the alert.","defaultValue":"''"},{"name":"component","type":"unknown","description":"Sets the element to use as the alert title. Default is h4.","defaultValue":"'h4'"},{"name":"customIcon","type":"React.ReactNode","description":"Set a custom icon to the alert. If not set the icon is set according to the variant."},{"name":"id","type":"string","description":"Uniquely identifies the alert."},{"name":"isExpandable","type":"boolean","description":"Flag indicating that the alert is expandable.","defaultValue":"false"},{"name":"isInline","type":"boolean","description":"Flag to indicate if the alert is inline.","defaultValue":"false"},{"name":"isLiveRegion","type":"boolean","description":"Flag to indicate if the alert is in a live region.","defaultValue":"false"},{"name":"isPlain","type":"boolean","description":"Flag to indicate if the alert is plain.","defaultValue":"false"},{"name":"onMouseEnter","type":"No type info","defaultValue":"() => {}"},{"name":"onMouseLeave","type":"No type info","defaultValue":"() => {}"},{"name":"onTimeout","type":"() => void","description":"Function to be executed on alert timeout. Relevant when the timeout prop is set.","defaultValue":"() => {}"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"timeout","type":"number | boolean","description":"If set to true, the timeout is 8000 milliseconds. If a number is provided, alert will\nbe dismissed after that amount of time in milliseconds.","defaultValue":"false"},{"name":"timeoutAnimation","type":"number","description":"If the user hovers over the alert and `timeout` expires, this is how long to wait\nbefore finally dismissing the alert.","defaultValue":"3000"},{"name":"title","type":"React.ReactNode","description":"Title of the alert.","required":true},{"name":"toggleAriaLabel","type":"string","description":"Adds accessible text to the alert toggle.","defaultValue":"`${capitalize(variant)} alert details`"},{"name":"tooltipPosition","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Position of the tooltip which is displayed if text is truncated."},{"name":"truncateTitle","type":"number","description":"Truncate title to number of lines.","defaultValue":"0"},{"name":"variant","type":"'success' | 'danger' | 'warning' | 'info' | 'custom'","description":"Adds alert variant styles.","defaultValue":"AlertVariant.custom"},{"name":"variantLabel","type":"string","description":"Variant label text for screen readers.","defaultValue":"`${capitalize(variant)} alert:`"}]},{"name":"AlertGroup","description":"","props":[{"name":"appendTo","type":"HTMLElement | (() => HTMLElement)","description":"Determine where the alert is appended to"},{"name":"aria-label","type":"string","description":"Adds an accessible label to the alert group."},{"name":"children","type":"React.ReactNode","description":"Alerts to be rendered in the AlertGroup"},{"name":"className","type":"string","description":"Additional classes added to the AlertGroup"},{"name":"isLiveRegion","type":"boolean","description":"Turns the container into a live region so that changes to content within the AlertGroup, such as appending an Alert, are reliably announced to assistive technology."},{"name":"isToast","type":"boolean","description":"Toast notifications are positioned at the top right corner of the viewport"},{"name":"onOverflowClick","type":"() => void","description":"Function to call if user clicks on overflow message"},{"name":"overflowMessage","type":"string","description":"Custom text to show for the overflow message"}]},{"name":"AlertActionCloseButton","description":"Renders a close button for a dismissable alert when this sub-component is passed into\nthe alert's actionClose property.","props":[{"name":"aria-label","type":"string","description":"Accessible label for the close button","defaultValue":"''"},{"name":"className","type":"string","description":"Additional classes added to the alert action close button."},{"name":"onClose","type":"() => void","description":"A callback for when the close button is clicked.","defaultValue":"() => undefined as any"},{"name":"variantLabel","type":"string","description":"Variant Label for the close button."}]},{"name":"AlertActionLink","description":"Renders buttons styled as links beneath the alert title and description when this sub-component\nis passed into the alert's actionLinks property.","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the alert action link. Interactive content such as anchor elements should not be passed in."},{"name":"className","type":"string","description":"Additional classes added to the alert action link.","defaultValue":"''"}]}]},"Action list":{"id":"Action list","title":"Action list","source":"react","tabName":null,"slug":"/components/action-list/react","propComponents":[{"name":"ActionList","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Children of the action list"},{"name":"className","type":"string","description":"Additional classes added to the action list"},{"name":"isIconList","type":"boolean","description":"Flag indicating the action list contains multiple icons and item padding should be removed"}]},{"name":"ActionListGroup","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Children of the action list group"},{"name":"className","type":"string","description":"Additional classes added to the action list group"},{"name":"isIconGroup","type":"boolean","description":"Flag indicating the action list group contains multiple icons and item padding should be removed"}]},{"name":"ActionListItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Children of the action list item"},{"name":"className","type":"string","description":"Additional classes added to the action list item"}]}]},"Accordion":{"id":"Accordion","title":"Accordion","source":"react","tabName":null,"slug":"/components/accordion/react","propComponents":[{"name":"Accordion","description":"","props":[{"name":"aria-label","type":"string","description":"Adds accessible text to the Accordion"},{"name":"asDefinitionList","type":"boolean","description":"Flag to indicate whether use definition list or div","defaultValue":"true"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Accordion","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the Accordion","defaultValue":"''"},{"name":"displaySize","type":"'default' | 'lg'","description":"Display size variant.","defaultValue":"'default'"},{"name":"headingLevel","type":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"Heading level to use","defaultValue":"'h3'"},{"name":"isBordered","type":"boolean","description":"Flag to indicate the accordion had a border","defaultValue":"false"},{"name":"togglePosition","type":"'start' | 'end'","description":"Sets the toggle icon position for all accordion toggles.","defaultValue":"'end'"}]},{"name":"AccordionItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the accordion item.","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the accordion item."},{"name":"isExpanded","type":"boolean","description":"Flag to indicate whether the accordion item is expanded.","defaultValue":"false"}]},{"name":"AccordionContent","description":"","props":[{"name":"aria-label","type":"string","description":"Adds accessible text to the Accordion content","defaultValue":"''"},{"name":"aria-labelledby","type":"string","description":"Id of the controlling accordion toggle to label the content."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Accordion","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the Accordion content","defaultValue":"''"},{"name":"component","type":"React.ElementType","description":"Component to use as content container"},{"name":"contentBodyProps","type":"AccordionExpandableContentBodyProps","description":"Props passed to the AccordionExpandableContentBody *"},{"name":"id","type":"string","description":"Identify the AccordionContent item","defaultValue":"''"},{"name":"isCustomContent","type":"React.ReactNode","description":"Flag indicating content is custom. Expanded content Body wrapper will be removed from children.  This allows multiple bodies to be rendered as content.","defaultValue":"false"},{"name":"isFixed","type":"boolean","description":"Flag to indicate Accordion content is fixed","defaultValue":"false"}]},{"name":"AccordionToggle","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Accordion toggle","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the Accordion Toggle","defaultValue":"''"},{"name":"component","type":"React.ElementType","description":"Container to override the default for toggle"},{"name":"id","type":"string","description":"Identify the Accordion toggle number","required":true}]},{"name":"AccordionExpandableContentBody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the accordion content body","defaultValue":"null"}]}]},"About modal":{"id":"About modal","title":"About modal","source":"react","tabName":null,"slug":"/components/about-modal/react","propComponents":[{"name":"AboutModal","description":"","props":[{"name":"appendTo","type":"HTMLElement | (() => HTMLElement)","description":"The parent container to append the modal to. Defaults to document.body"},{"name":"aria-label","type":"string","description":"Aria label for the about modal.  This should be used when no productName prop is provided"},{"name":"backgroundImageSrc","type":"string","description":"The URL or file path of the image for the background"},{"name":"brandImageAlt","type":"string","description":"The alternate text of the brand image","required":true},{"name":"brandImageSrc","type":"string","description":"The URL of the image for the brand","required":true},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the about modal","required":true},{"name":"className","type":"string","description":"Additional classes added to the about modal"},{"name":"closeButtonAriaLabel","type":"string","description":"Set aria label to the close button"},{"name":"disableFocusTrap","type":"boolean","description":"Flag to disable focus trap"},{"name":"hasNoContentContainer","type":"boolean","description":"Prevents the about modal from rendering content inside a container; allows for more flexible layouts","defaultValue":"false"},{"name":"isOpen","type":"boolean","description":"Flag to show the about modal","defaultValue":"false"},{"name":"onClose","type":"(event: React.MouseEvent | MouseEvent | KeyboardEvent) => void","description":"A callback for when the close button is clicked","defaultValue":"(_e): any => undefined"},{"name":"productName","type":"string","description":"Product name"},{"name":"trademark","type":"string","description":"Trademark information"}]}]},"Stack":{"id":"Stack","title":"Stack","source":"react","tabName":null,"slug":"/layouts/stack/react","propComponents":[{"name":"Stack","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Stack layout","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Stack layout","defaultValue":"''"},{"name":"component","type":"React.ReactNode","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"},{"name":"hasGutter","type":"boolean","description":"Adds space between children.","defaultValue":"false"}]},{"name":"StackItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"additional classes added to the Stack Layout Item","defaultValue":"null"},{"name":"className","type":"string","description":"content rendered inside the Stack Layout Item","defaultValue":"''"},{"name":"isFilled","type":"boolean","description":"Flag indicating if this Stack Layout item should fill the available vertical space.","defaultValue":"false"}]}]},"Split":{"id":"Split","title":"Split","source":"react","tabName":null,"slug":"/layouts/split/react","propComponents":[{"name":"Split","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Split layout","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Split layout","defaultValue":"''"},{"name":"component","type":"React.ReactNode","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"},{"name":"hasGutter","type":"boolean","description":"Adds space between children.","defaultValue":"false"},{"name":"isWrappable","type":"boolean","description":"Allows children to wrap","defaultValue":"false"}]},{"name":"SplitItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Split Layout Item","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Split Layout Item","defaultValue":"''"},{"name":"isFilled","type":"boolean","description":"Flag indicating if this Split Layout item should fill the available horizontal space.","defaultValue":"false"}]}]},"Level":{"id":"Level","title":"Level","source":"react","tabName":null,"slug":"/layouts/level/react","propComponents":[{"name":"Level","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Level layout","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Level layout","defaultValue":"''"},{"name":"hasGutter","type":"boolean","description":"Adds space between children."}]},{"name":"LevelItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Level Layout Item","defaultValue":"null"}]}]},"Grid":{"id":"Grid","title":"Grid","source":"react","tabName":null,"slug":"/layouts/grid/react","propComponents":[{"name":"Grid","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Grid layout","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Grid layout","defaultValue":"''"},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"},{"name":"hasGutter","type":"boolean","description":"Adds space between children."},{"name":"lg","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns all grid items should span on a large device"},{"name":"md","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns all grid items should span on a medium device"},{"name":"order","type":"{\n  default?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}","description":"Modifies the flex layout element order property"},{"name":"sm","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns all grid items should span on a small device"},{"name":"span","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"The number of rows a column in the grid should span.  Value should be a number 1-12","defaultValue":"null"},{"name":"xl","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns all grid items should span on a xLarge device"},{"name":"xl2","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns all grid items should span on a 2xLarge device"}]},{"name":"GridItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Grid Layout Item","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Grid Layout Item","defaultValue":"''"},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"},{"name":"lg","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item spans on large device. Value should be a number 1-12"},{"name":"lgOffset","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item is offset on large device. Value should be a number 1-12"},{"name":"lgRowSpan","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of rows the grid item spans on large device. Value should be a number 1-12"},{"name":"md","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item spans on medium device. Value should be a number 1-12"},{"name":"mdOffset","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item is offset on medium device. Value should be a number 1-12"},{"name":"mdRowSpan","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of rows the grid item spans on medium device. Value should be a number 1-12"},{"name":"offset","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns a grid item is offset","defaultValue":"null"},{"name":"order","type":"{\n  default?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}","description":"Modifies the flex layout element order property"},{"name":"rowSpan","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of rows the grid item spans. Value should be a number 1-12","defaultValue":"null"},{"name":"sm","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item spans on small device. Value should be a number 1-12"},{"name":"smOffset","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item is offset on small device. Value should be a number 1-12"},{"name":"smRowSpan","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of rows the grid item spans on medium device. Value should be a number 1-12"},{"name":"span","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item spans. Value should be a number 1-12","defaultValue":"null"},{"name":"xl","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item spans on xLarge device. Value should be a number 1-12"},{"name":"xl2","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item spans on 2xLarge device. Value should be a number 1-12"},{"name":"xl2Offset","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item is offset on 2xLarge device. Value should be a number 1-12"},{"name":"xl2RowSpan","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of rows the grid item spans on 2xLarge device. Value should be a number 1-12"},{"name":"xlOffset","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of columns the grid item is offset on xLarge device. Value should be a number 1-12"},{"name":"xlRowSpan","type":"1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12","description":"the number of rows the grid item spans on large device. Value should be a number 1-12"}]}]},"Gallery":{"id":"Gallery","title":"Gallery","source":"react","tabName":null,"slug":"/layouts/gallery/react","propComponents":[{"name":"Gallery","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Gallery layout","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Gallery layout","defaultValue":"''"},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"},{"name":"hasGutter","type":"boolean","description":"Adds space between children.","defaultValue":"false"},{"name":"maxWidths","type":"{\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}","description":"Maximum widths at various breakpoints."},{"name":"minWidths","type":"{\n  default?: string;\n  sm?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}","description":"Minimum widths at various breakpoints."}]},{"name":"GalleryItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Gallery Item","defaultValue":"null"},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"}]}]},"Flex":{"id":"Flex","title":"Flex","source":"react","tabName":null,"slug":"/layouts/flex/react","propComponents":[{"name":"Flex","description":"","props":[{"name":"align","type":"{\n  default?: 'alignLeft' | 'alignRight';\n  sm?: 'alignLeft' | 'alignRight';\n  md?: 'alignLeft' | 'alignRight';\n  lg?: 'alignLeft' | 'alignRight';\n  xl?: 'alignLeft' | 'alignRight';\n  '2xl'?: 'alignLeft' | 'alignRight';\n}","description":"Value to use for margin: auto at various breakpoints"},{"name":"alignContent","type":"{\n  default?:\n    | 'alignContentFlexStart'\n    | 'alignContentFlexEnd'\n    | 'alignContentCenter'\n    | 'alignContentStretch'\n    | 'alignContentSpaceBetween'\n    | 'alignContentSpaceAround';\n  sm?:\n    | 'alignContentFlexStart'\n    | 'alignContentFlexEnd'\n    | 'alignContentCenter'\n    | 'alignContentStretch'\n    | 'alignContentSpaceBetween'\n    | 'alignContentSpaceAround';\n  md?:\n    | 'alignContentFlexStart'\n    | 'alignContentFlexEnd'\n    | 'alignContentCenter'\n    | 'alignContentStretch'\n    | 'alignContentSpaceBetween'\n    | 'alignContentSpaceAround';\n  lg?:\n    | 'alignContentFlexStart'\n    | 'alignContentFlexEnd'\n    | 'alignContentCenter'\n    | 'alignContentStretch'\n    | 'alignContentSpaceBetween'\n    | 'alignContentSpaceAround';\n  xl?:\n    | 'alignContentFlexStart'\n    | 'alignContentFlexEnd'\n    | 'alignContentCenter'\n    | 'alignContentStretch'\n    | 'alignContentSpaceBetween'\n    | 'alignContentSpaceAround';\n  '2xl'?:\n    | 'alignContentFlexStart'\n    | 'alignContentFlexEnd'\n    | 'alignContentCenter'\n    | 'alignContentStretch'\n    | 'alignContentSpaceBetween'\n    | 'alignContentSpaceAround';\n}","description":"Value to add for align-content property at various breakpoints"},{"name":"alignItems","type":"{\n  default?:\n    | 'alignItemsFlexStart'\n    | 'alignItemsFlexEnd'\n    | 'alignItemsCenter'\n    | 'alignItemsStretch'\n    | 'alignItemsBaseline';\n  sm?: 'alignItemsFlexStart' | 'alignItemsFlexEnd' | 'alignItemsCenter' | 'alignItemsStretch' | 'alignItemsBaseline';\n  md?: 'alignItemsFlexStart' | 'alignItemsFlexEnd' | 'alignItemsCenter' | 'alignItemsStretch' | 'alignItemsBaseline';\n  lg?: 'alignItemsFlexStart' | 'alignItemsFlexEnd' | 'alignItemsCenter' | 'alignItemsStretch' | 'alignItemsBaseline';\n  xl?: 'alignItemsFlexStart' | 'alignItemsFlexEnd' | 'alignItemsCenter' | 'alignItemsStretch' | 'alignItemsBaseline';\n  '2xl'?:\n    | 'alignItemsFlexStart'\n    | 'alignItemsFlexEnd'\n    | 'alignItemsCenter'\n    | 'alignItemsStretch'\n    | 'alignItemsBaseline';\n}","description":"Value to add for align-items property at various breakpoints"},{"name":"alignSelf","type":"{\n  default?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n  sm?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n  md?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n  lg?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n  xl?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n  '2xl'?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n}","description":"Value to add for align-self property at various breakpoints"},{"name":"children","type":"React.ReactNode","description":"content rendered inside the Flex layout","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Flex layout","defaultValue":"''"},{"name":"columnGap","type":"{\n  default?:\n    | 'columnGap'\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap2xl'\n    | 'columnGap3xl'\n    | 'columnGap4xl';\n  sm?:\n    | 'columnGap'\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap2xl'\n    | 'columnGap3xl'\n    | 'columnGap4xl';\n  md?:\n    | 'columnGap'\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap2xl'\n    | 'columnGap3xl'\n    | 'columnGap4xl';\n  lg?:\n    | 'columnGap'\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap2xl'\n    | 'columnGap3xl'\n    | 'columnGap4xl';\n  xl?:\n    | 'columnGap'\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap2xl'\n    | 'columnGap3xl'\n    | 'columnGap4xl';\n  '2xl'?:\n    | 'columnGap'\n    | 'columnGapNone'\n    | 'columnGapXs'\n    | 'columnGapSm'\n    | 'columnGapMd'\n    | 'columnGapLg'\n    | 'columnGapXl'\n    | 'columnGap2xl'\n    | 'columnGap3xl'\n    | 'columnGap4xl';\n}","description":"Gap beween columns at various breakpoints. This will override spacers for the main axis."},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"},{"name":"direction","type":"{\n  default?: 'column' | 'columnReverse' | 'row' | 'rowReverse';\n  sm?: 'column' | 'columnReverse' | 'row' | 'rowReverse';\n  md?: 'column' | 'columnReverse' | 'row' | 'rowReverse';\n  lg?: 'column' | 'columnReverse' | 'row' | 'rowReverse';\n  xl?: 'column' | 'columnReverse' | 'row' | 'rowReverse';\n  '2xl'?: 'column' | 'columnReverse' | 'row' | 'rowReverse';\n}","description":"Value to add for flex-direction property at various breakpoints"},{"name":"display","type":"{\n  default?: 'inlineFlex';\n  sm?: 'flex' | 'inlineFlex';\n  md?: 'flex' | 'inlineFlex';\n  lg?: 'flex' | 'inlineFlex';\n  xl?: 'flex' | 'inlineFlex';\n  '2xl'?: 'flex' | 'inlineFlex';\n}","description":"Value to set to display property at various breakpoints"},{"name":"flex","type":"{\n  default?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n  sm?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n  md?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n  lg?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n  xl?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n  '2xl'?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n}","description":"Value to add for flex property at various breakpoints"},{"name":"flexWrap","type":"{\n  default?: 'wrap' | 'wrapReverse' | 'nowrap';\n  sm?: 'wrap' | 'wrapReverse' | 'nowrap';\n  md?: 'wrap' | 'wrapReverse' | 'nowrap';\n  lg?: 'wrap' | 'wrapReverse' | 'nowrap';\n  xl?: 'wrap' | 'wrapReverse' | 'nowrap';\n  '2xl'?: 'wrap' | 'wrapReverse' | 'nowrap';\n}","description":"Value to set for flex-wrap property at various breakpoints"},{"name":"fullWidth","type":"{\n  default?: 'fullWidth';\n  sm?: 'fullWidth';\n  md?: 'fullWidth';\n  lg?: 'fullWidth';\n  xl?: 'fullWidth';\n  '2xl'?: 'fullWidth';\n}","description":"Whether to set width: 100% at various breakpoints"},{"name":"gap","type":"{\n  default?: 'gap' | 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap2xl' | 'gap3xl' | 'gap4xl';\n  sm?: 'gap' | 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap2xl' | 'gap3xl' | 'gap4xl';\n  md?: 'gap' | 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap2xl' | 'gap3xl' | 'gap4xl';\n  lg?: 'gap' | 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap2xl' | 'gap3xl' | 'gap4xl';\n  xl?: 'gap' | 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap2xl' | 'gap3xl' | 'gap4xl';\n  '2xl'?: 'gap' | 'gapNone' | 'gapXs' | 'gapSm' | 'gapMd' | 'gapLg' | 'gapXl' | 'gap2xl' | 'gap3xl' | 'gap4xl';\n}","description":"Gap between items at various breakpoints. This will override spacers for the main axis."},{"name":"grow","type":"{\n  default?: 'grow';\n  sm?: 'grow';\n  md?: 'grow';\n  lg?: 'grow';\n  xl?: 'grow';\n  '2xl'?: 'grow';\n}","description":"Whether to add flex: grow at various breakpoints"},{"name":"justifyContent","type":"{\n  default?:\n    | 'justifyContentFlexStart'\n    | 'justifyContentFlexEnd'\n    | 'justifyContentCenter'\n    | 'justifyContentSpaceBetween'\n    | 'justifyContentSpaceAround'\n    | 'justifyContentSpaceEvenly';\n  sm?:\n    | 'justifyContentFlexStart'\n    | 'justifyContentFlexEnd'\n    | 'justifyContentCenter'\n    | 'justifyContentSpaceBetween'\n    | 'justifyContentSpaceAround'\n    | 'justifyContentSpaceEvenly';\n  md?:\n    | 'justifyContentFlexStart'\n    | 'justifyContentFlexEnd'\n    | 'justifyContentCenter'\n    | 'justifyContentSpaceBetween'\n    | 'justifyContentSpaceAround'\n    | 'justifyContentSpaceEvenly';\n  lg?:\n    | 'justifyContentFlexStart'\n    | 'justifyContentFlexEnd'\n    | 'justifyContentCenter'\n    | 'justifyContentSpaceBetween'\n    | 'justifyContentSpaceAround'\n    | 'justifyContentSpaceEvenly';\n  xl?:\n    | 'justifyContentFlexStart'\n    | 'justifyContentFlexEnd'\n    | 'justifyContentCenter'\n    | 'justifyContentSpaceBetween'\n    | 'justifyContentSpaceAround'\n    | 'justifyContentSpaceEvenly';\n  '2xl'?:\n    | 'justifyContentFlexStart'\n    | 'justifyContentFlexEnd'\n    | 'justifyContentCenter'\n    | 'justifyContentSpaceBetween'\n    | 'justifyContentSpaceAround'\n    | 'justifyContentSpaceEvenly';\n}","description":"Value to add for justify-content property at various breakpoints"},{"name":"order","type":"{\n  default?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}","description":"Modifies the flex layout element order property"},{"name":"rowGap","type":"{\n  default?:\n    | 'rowGap'\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap2xl'\n    | 'rowGap3xl'\n    | 'rowGap4xl';\n  sm?:\n    | 'rowGap'\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap2xl'\n    | 'rowGap3xl'\n    | 'rowGap4xl';\n  md?:\n    | 'rowGap'\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap2xl'\n    | 'rowGap3xl'\n    | 'rowGap4xl';\n  lg?:\n    | 'rowGap'\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap2xl'\n    | 'rowGap3xl'\n    | 'rowGap4xl';\n  xl?:\n    | 'rowGap'\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap2xl'\n    | 'rowGap3xl'\n    | 'rowGap4xl';\n  '2xl'?:\n    | 'rowGap'\n    | 'rowGapNone'\n    | 'rowGapXs'\n    | 'rowGapSm'\n    | 'rowGapMd'\n    | 'rowGapLg'\n    | 'rowGapXl'\n    | 'rowGap2xl'\n    | 'rowGap3xl'\n    | 'rowGap4xl';\n}","description":"Gap between rows at various breakpoints. This will override spacers for the main axis."},{"name":"shrink","type":"{\n  default?: 'shrink';\n  sm?: 'shrink';\n  md?: 'shrink';\n  lg?: 'shrink';\n  xl?: 'shrink';\n  '2xl'?: 'shrink';\n}","description":"Whether to add flex: shrink at various breakpoints"},{"name":"spaceItems","type":"{\n  default?:\n    | 'spaceItemsNone'\n    | 'spaceItemsXs'\n    | 'spaceItemsSm'\n    | 'spaceItemsMd'\n    | 'spaceItemsLg'\n    | 'spaceItemsXl'\n    | 'spaceItems2xl'\n    | 'spaceItems3xl'\n    | 'spaceItems4xl';\n  sm?:\n    | 'spaceItemsNone'\n    | 'spaceItemsXs'\n    | 'spaceItemsSm'\n    | 'spaceItemsMd'\n    | 'spaceItemsLg'\n    | 'spaceItemsXl'\n    | 'spaceItems2xl'\n    | 'spaceItems3xl'\n    | 'spaceItems4xl';\n  md?:\n    | 'spaceItemsNone'\n    | 'spaceItemsXs'\n    | 'spaceItemsSm'\n    | 'spaceItemsMd'\n    | 'spaceItemsLg'\n    | 'spaceItemsXl'\n    | 'spaceItems2xl'\n    | 'spaceItems3xl'\n    | 'spaceItems4xl';\n  lg?:\n    | 'spaceItemsNone'\n    | 'spaceItemsXs'\n    | 'spaceItemsSm'\n    | 'spaceItemsMd'\n    | 'spaceItemsLg'\n    | 'spaceItemsXl'\n    | 'spaceItems2xl'\n    | 'spaceItems3xl'\n    | 'spaceItems4xl';\n  xl?:\n    | 'spaceItemsNone'\n    | 'spaceItemsXs'\n    | 'spaceItemsSm'\n    | 'spaceItemsMd'\n    | 'spaceItemsLg'\n    | 'spaceItemsXl'\n    | 'spaceItems2xl'\n    | 'spaceItems3xl'\n    | 'spaceItems4xl';\n  '2xl'?:\n    | 'spaceItemsNone'\n    | 'spaceItemsXs'\n    | 'spaceItemsSm'\n    | 'spaceItemsMd'\n    | 'spaceItemsLg'\n    | 'spaceItemsXl'\n    | 'spaceItems2xl'\n    | 'spaceItems3xl'\n    | 'spaceItems4xl';\n}","description":"Space items at various breakpoints"},{"name":"spacer","type":"{\n  default?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n  sm?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n  md?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n  lg?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n  xl?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n  '2xl'?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n}","description":"Spacers at various breakpoints"}]},{"name":"FlexItem","description":"","props":[{"name":"align","type":"{\n  default?: 'alignLeft' | 'alignRight';\n  sm?: 'alignLeft' | 'alignRight';\n  md?: 'alignLeft' | 'alignRight';\n  lg?: 'alignLeft' | 'alignRight';\n  xl?: 'alignLeft' | 'alignRight';\n  '2xl'?: 'alignLeft' | 'alignRight';\n}","description":"Value to use for margin: auto at various breakpoints"},{"name":"alignSelf","type":"{\n  default?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n  sm?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n  md?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n  lg?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n  xl?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n  '2xl'?: 'alignSelfFlexStart' | 'alignSelfFlexEnd' | 'alignSelfCenter' | 'alignSelfStretch' | 'alignSelfBaseline';\n}","description":"Value to add for align-self property at various breakpoints"},{"name":"children","type":"React.ReactNode","description":"content rendered inside the Flex layout","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Flex layout","defaultValue":"''"},{"name":"component","type":"React.ElementType<any> | React.ComponentType<any>","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"},{"name":"flex","type":"{\n  default?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n  sm?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n  md?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n  lg?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n  xl?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n  '2xl'?: 'flexDefault' | 'flexNone' | 'flex_1' | 'flex_2' | 'flex_3' | 'flex_4';\n}","description":"Value to add for flex property at various breakpoints"},{"name":"fullWidth","type":"{\n  default?: 'fullWidth';\n  sm?: 'fullWidth';\n  md?: 'fullWidth';\n  lg?: 'fullWidth';\n  xl?: 'fullWidth';\n  '2xl'?: 'fullWidth';\n}","description":"Whether to set width: 100% at various breakpoints"},{"name":"grow","type":"{\n  default?: 'grow';\n  sm?: 'grow';\n  md?: 'grow';\n  lg?: 'grow';\n  xl?: 'grow';\n  '2xl'?: 'grow';\n}","description":"Whether to add flex: grow at various breakpoints"},{"name":"order","type":"{\n  default?: string;\n  md?: string;\n  lg?: string;\n  xl?: string;\n  '2xl'?: string;\n}","description":"Modifies the flex layout element order property"},{"name":"shrink","type":"{\n  default?: 'shrink';\n  sm?: 'shrink';\n  md?: 'shrink';\n  lg?: 'shrink';\n  xl?: 'shrink';\n  '2xl'?: 'shrink';\n}","description":"Whether to add flex: shrink at various breakpoints"},{"name":"spacer","type":"{\n  default?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n  sm?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n  md?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n  lg?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n  xl?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n  '2xl'?:\n    | 'spacerNone'\n    | 'spacerXs'\n    | 'spacerSm'\n    | 'spacerMd'\n    | 'spacerLg'\n    | 'spacerXl'\n    | 'spacer2xl'\n    | 'spacer3xl'\n    | 'spacer4xl';\n}","description":"Spacers at various breakpoints"}]}]},"Bullseye":{"id":"Bullseye","title":"Bullseye","source":"react","tabName":null,"slug":"/layouts/bullseye/react","propComponents":[{"name":"Bullseye","description":"","props":[{"name":"children","type":"React.ReactNode","description":"content rendered inside the Bullseye layout","defaultValue":"null"},{"name":"className","type":"string","description":"additional classes added to the Bullseye layout","defaultValue":"''"},{"name":"component","type":"unknown","description":"Sets the base component to render. defaults to div","defaultValue":"'div'"}]}]},"Table":{"id":"Table","title":"Table","source":"react","tabName":null,"slug":"/components/table/react","propComponents":[{"name":"Table","description":"","props":[{"name":"aria-label","type":"string","description":"Adds an accessible name for the Table"},{"name":"borders","type":"boolean","description":"Render borders"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Table"},{"name":"className","type":"string","description":"Additional classes added to the Table"},{"name":"gridBreakPoint","type":"'' | 'grid' | 'grid-md' | 'grid-lg' | 'grid-xl' | 'grid-2xl'","description":"Specifies the grid breakpoints"},{"name":"hasNoInset","type":"boolean","description":"Flag indicating this table's rows will not have the inset typically reserved for expanding/collapsing rows in a tree table. Intended for use on tree tables with no visible rows with children."},{"name":"isExpandable","type":"boolean","description":"Flag indicating this table contains expandable rows to maintain proper striping"},{"name":"isNested","type":"boolean","description":"Flag indicating this table is nested within another table"},{"name":"isStickyHeader","type":"boolean","description":"If set to true, the table header sticks to the top of its container"},{"name":"isStriped","type":"boolean","description":"Flag indicating this table should be striped. This property works best for a single <tbody> table. Striping may also be done manually by applying this property to Tbody and Tr components."},{"name":"isTreeTable","type":"boolean","description":"Flag indicating table is a tree table"},{"name":"nestedHeaderColumnSpans","type":"number[]","description":"Collection of column spans for nested headers. Deprecated: see https://github.com/patternfly/patternfly/issues/4584"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"role","type":"string","description":"A valid WAI-ARIA role to be applied to the table element"},{"name":"selectableRowCaptionText","type":"string","description":"Visible text to add alongside the hidden a11y caption for tables with selectable rows."},{"name":"variant","type":"TableVariant | 'compact'","description":"Style variant for the Table\ncompact: Reduces spacing and makes the table more compact"}]},{"name":"Thead","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the <thead> row group"},{"name":"className","type":"string","description":"Additional classes added to the <thead> element"},{"name":"hasNestedHeader","type":"boolean","description":"Indicates the <thead> contains a nested header"},{"name":"noWrap","type":"boolean","description":"Won't wrap the table head if true"}]},{"name":"Tbody","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the <tbody> row group"},{"name":"className","type":"string","description":"Additional classes added to the <tbody> element"},{"name":"isEvenStriped","type":"boolean","description":"Flag indicating the <tbody> contains evenly striped rows."},{"name":"isExpanded","type":"boolean","description":"Modifies the body to allow for expandable rows"},{"name":"isOddStriped","type":"boolean","description":"Flag indicating the <tbody> contains oddly striped rows."}]},{"name":"Tr","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the <tr> row"},{"name":"className","type":"string","description":"Additional classes added to the <tr> row"},{"name":"isBorderRow","type":"boolean","description":"Flag indicating the row will act as a border. This is typically used for a table with a nested and sticky header."},{"name":"isClickable","type":"boolean","description":"Flag which adds hover styles for the clickable table row"},{"name":"isControlRow","type":"boolean","description":"Flag indicating the row is controlling the expansion of another row."},{"name":"isEditable","type":"boolean","description":"Only applicable to Tr within the Tbody: Whether the row is editable"},{"name":"isExpanded","type":"boolean","description":"Only applicable to Tr within the Tbody: Makes the row expandable and determines if it's expanded or not.\nTo prevent column widths from responding automatically when expandable rows are toggled, the width prop must also be passed into either the th or td component"},{"name":"isHidden","type":"boolean","description":"Flag indicating the Tr is hidden"},{"name":"isRowSelected","type":"boolean","description":"Flag indicating the row is selected - adds selected styling"},{"name":"isSelectable","type":"boolean","description":"Flag indicating that the row is selectable"},{"name":"isStriped","type":"boolean","description":"Flag indicating the row is striped"},{"name":"onRowClick","type":"(event?: React.KeyboardEvent | React.MouseEvent) => void","description":"An event handler for the row"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false."},{"name":"resetOffset","type":"boolean","description":"Flag indicating the spacing offset of the first cell should be reset"}]},{"name":"Th","description":"","props":[{"name":"aria-label","type":"string","description":"Provides an accessible name to the th. This should only be passed in when the th contains only non-text\ncontent, such as a \"select all\" checkbox or \"expand all\" toggle."},{"name":"dataLabel","type":"string","description":"The column header the cell corresponds to. Applicable when this component is used as a direct child to <Tr>.\nThis attribute replaces table header in mobile viewport. It is rendered by ::before pseudo element."},{"name":"expand","type":"ThExpandType","description":"Renders a chevron so that all row chevrons can be expanded/collapsed"},{"name":"hasLeftBorder","type":"boolean","description":"Adds a border to the left side of the cell"},{"name":"hasRightBorder","type":"boolean","description":"Adds a border to the right side of the cell"},{"name":"info","type":"ThInfoType","description":"Adds tooltip/popover info button"},{"name":"isStickyColumn","type":"boolean","description":"Indicates the header column should be sticky"},{"name":"isSubheader","type":"boolean","description":"Indicates the <th> is part of a subheader of a nested header"},{"name":"onMouseEnter","type":"(event: any) => void","description":"Callback on mouse enter"},{"name":"scope","type":"string","description":"Adds scope to the column to associate header cells with data cells"},{"name":"screenReaderText","type":"string","description":"Visually hidden text accessible only via assistive technologies. This must be passed in if the\nth is intended to be visually empty, and must be conveyed as a column header text."},{"name":"select","type":"ThSelectType","description":"Renders a checkbox select so that all row checkboxes can be selected/deselected"},{"name":"sort","type":"ThSortType","description":"Formats the header so that its column will be sortable"},{"name":"stickyLeftOffset","type":"string","description":"Left offset of a sticky column. This will typically be equal to the combined value set by stickyMinWidth of any sticky columns that precede the current sticky column."},{"name":"stickyMinWidth","type":"string","description":"Minimum width for a sticky column"},{"name":"stickyRightOffset","type":"string","description":"Right offset of a sticky column. This will typically be equal to the combined value set by stickyMinWidth of any sticky columns that come after the current sticky column."},{"name":"tooltip","type":"React.ReactNode","description":"Tooltip to show on the header cell.\nNote: If the header cell is truncated and has simple string content, it will already attempt to display the header text.\nIf you want to show a tooltip that differs from the header text, you can set it here.\nTo disable it completely you can set it to null."},{"name":"tooltipProps","type":"Omit<TooltipProps, 'content'>","description":"other props to pass to the tooltip"}]},{"name":"Td","description":"","props":[{"name":"actions","type":"TdActionsType","description":"Turns the cell into an actions cell. Recommended to use an ActionsColumn component as a child of the Td rather than this prop."},{"name":"compoundExpand","type":"TdCompoundExpandType","description":"Turns the cell into a compound expansion toggle"},{"name":"dataLabel","type":"string","description":"The column header the cell corresponds to.\nThis attribute replaces table header in mobile viewport. It is rendered by ::before pseudo element."},{"name":"draggableRow","type":"TdDraggableType","description":"Turns the cell into the first cell in a draggable row"},{"name":"expand","type":"TdExpandType","description":"Turns the cell into an expansion toggle and determines if the corresponding expansion row is open"},{"name":"favorites","type":"TdFavoritesType","description":"Turns the cell into a favorites cell with a star button"},{"name":"hasLeftBorder","type":"boolean","description":"Adds a border to the left side of the cell"},{"name":"hasRightBorder","type":"boolean","description":"Adds a border to the right side of the cell"},{"name":"isActionCell","type":"boolean","description":"Applies pf-v6-c-table__action to td"},{"name":"isStickyColumn","type":"boolean","description":"Indicates the column should be sticky"},{"name":"noPadding","type":"boolean","description":"True to remove padding"},{"name":"onMouseEnter","type":"(event: any) => void","description":"Callback on mouse enter"},{"name":"select","type":"TdSelectType","description":"Renders a checkbox or radio select"},{"name":"stickyLeftOffset","type":"string","description":"Left offset of a sticky column. This will typically be equal to the combined value set by stickyMinWidth of any sticky columns that precede the current sticky column."},{"name":"stickyMinWidth","type":"string","description":"Minimum width for a sticky column"},{"name":"stickyRightOffset","type":"string","description":"Right offset of a sticky column. This will typically be equal to the combined value set by stickyMinWidth of any sticky columns that come after the current sticky column."},{"name":"tooltip","type":"React.ReactNode","description":"Tooltip to show on the body cell.\nNote: If the body cell is truncated and has simple string content, it will already attempt to display the cell text.\nIf you want to show a tooltip that differs from the cell text, you can set it here.\nTo disable it completely you can set it to null."},{"name":"treeRow","type":"TdTreeRowType","description":"Turns the cell into the first cell in a tree table row"}]},{"name":"Caption","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the caption"},{"name":"className","type":"string","description":"Additional classes added to the caption"}]},{"name":"TableText","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered within the table text","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the table text","defaultValue":"''"},{"name":"focused","type":"boolean","description":"Determines if the TableText is focused by parent component","defaultValue":"false"},{"name":"onMouseEnter","type":"(event: any) => void","description":"callback used to create the tooltip if text is truncated","defaultValue":"() => {}"},{"name":"tooltip","type":"React.ReactNode","description":"text to display on the tooltip","defaultValue":"''"},{"name":"tooltipHasDefaultBehavior","type":"boolean","description":"Determines if tooltip should have normal visbility behavior. If false, the tooltip will only be shown when children is not entirely visible","defaultValue":"false"},{"name":"tooltipProps","type":"Omit<TooltipProps, 'content'>","description":"other props to pass to the tooltip","defaultValue":"{}"},{"name":"variant","type":"TableTextVariant | 'span' | 'div'","description":"Determines which element to render as a table text","defaultValue":"'span'"},{"name":"wrapModifier","type":"WrapModifier | 'wrap' | 'nowrap' | 'truncate' | 'breakWord' | 'fitContent'","description":"Determines which wrapping modifier to apply to the table text","defaultValue":"null"}]},{"name":"TdActionsType","description":"","props":[{"name":"actionsToggle","type":"(props: CustomActionsToggleProps) => React.ReactNode","description":"Custom toggle for the actions menu"},{"name":"dropdownDirection","type":"'up' | 'down'","description":"Actions dropdown direction"},{"name":"dropdownPosition","type":"'right' | 'left'","description":"Actions dropdown position"},{"name":"isDisabled","type":"boolean","description":"Whether the actions are disabled"},{"name":"items","type":"IActions","description":"Cell actions","required":true},{"name":"menuAppendTo","type":"HTMLElement | (() => HTMLElement) | 'inline' | 'parent'","description":"The container to append the dropdown menu to. Defaults to 'inline'.\nIf your menu is being cut off you can append it to an element higher up the DOM tree.\nSome examples:\nmenuAppendTo=\"parent\"\nmenuAppendTo={() => document.body}\nmenuAppendTo={document.getElementById('target')}"},{"name":"rowIndex","type":"number","description":"The row index"}]},{"name":"TdSelectType","description":"","props":[{"name":"isDisabled","type":"boolean","description":"Whether the selection is disabled"},{"name":"isSelected","type":"boolean","description":"Whether the cell is selected","required":true},{"name":"onSelect","type":"OnSelect","description":"Callback on select"},{"name":"props","type":"any","description":"Additional props forwarded to select rowData"},{"name":"rowIndex","type":"number","description":"The row index","required":true},{"name":"variant","type":"'checkbox' | 'radio'","description":"The selectable variant"}]},{"name":"ThSelectType","description":"","props":[{"name":"isDisabled","type":"boolean","description":"Whether to disable the selection"},{"name":"isHeaderSelectDisabled","type":"boolean","description":"Flag indicating the select checkbox in the th is disabled"},{"name":"isSelected","type":"boolean","description":"Whether the cell is selected","required":true},{"name":"onSelect","type":"OnSelect","description":"Callback on select"},{"name":"props","type":"any","description":"Additional props forwarded to select rowData"}]},{"name":"TdTreeRowType","description":"","props":[{"name":"onCheckChange","type":"OnCheckChange","description":"(optional) Callback when user changes the checkbox on a row"},{"name":"onCollapse","type":"OnTreeRowCollapse","description":"Callback when user expands/collapses a row to reveal/hide the row's children","required":true},{"name":"onToggleRowDetails","type":"OnToggleRowDetails","description":"(optional) Callback when user shows/hides the row details in responsive view."},{"name":"props","type":"any","description":"Additional props forwarded to the title cell of the tree row"},{"name":"rowIndex","type":"number","description":"The row index"}]},{"name":"ActionsColumn","description":"","props":[{"name":"actionsToggle","type":"(props: CustomActionsToggleProps) => React.ReactNode","description":"Custom actions toggle for the actions dropdown"},{"name":"extraData","type":"IExtraData","description":"Extra data of a row"},{"name":"firstActionItemRef","type":"React.Ref<HTMLButtonElement>","description":"Ref to forward to the first item in the popup menu"},{"name":"isDisabled","type":"boolean","description":"Indicates whether the actions dropdown is disabled"},{"name":"isOnOpenChangeDisabled","type":"boolean","description":"Flag indicating that the dropdown's onOpenChange callback should not be called."},{"name":"items","type":"IAction[]","description":"Actions to be rendered within or without the action dropdown","required":true},{"name":"popperProps","type":"any","description":"Additional properties for the actions dropdown popper"},{"name":"rowData","type":"IRowData","description":"Data of the row the action dropdown is located"}]},{"name":"TdCompoundExpandType","description":"","props":[{"name":"columnIndex","type":"number","description":"The column index"},{"name":"expandId","type":"string","description":"Id prefix for expandable cells *"},{"name":"isExpanded","type":"boolean","description":"determines if the corresponding expansion row is open","required":true},{"name":"onToggle","type":"OnExpand","description":"Callback on toggling of the expansion"},{"name":"rowIndex","type":"number","description":"The row index"}]},{"name":"TdFavoritesType","description":"","props":[{"name":"isFavorited","type":"boolean","description":"Whether the corresponding row is favorited","required":true},{"name":"onFavorite","type":"OnFavorite","description":"Callback on clicking the favorites button"},{"name":"props","type":"any","description":"Additional props forwarded to the FavoritesCell"},{"name":"rowIndex","type":"number","description":"The row index"}]},{"name":"TdDraggableType","description":"","props":[{"name":"id","type":"string","description":"Id of the draggable row","required":true}]},{"name":"ThInfoType","description":"","props":[{"name":"ariaLabel","type":"string","description":null},{"name":"className","type":"string","description":null},{"name":"popover","type":"React.ReactNode","description":null},{"name":"popoverProps","type":"Omit<PopoverProps, 'bodyContent'>","description":null},{"name":"tooltip","type":"React.ReactNode","description":null},{"name":"tooltipProps","type":"Omit<TooltipProps, 'content'>","description":null}]},{"name":"TdExpandType","description":"","props":[{"name":"columnIndex","type":"number","description":"The column index"},{"name":"expandId","type":"string","description":"Id prefix for expandable rows *"},{"name":"isExpanded","type":"boolean","description":"Flag indicating the child row associated with this cell is expanded","required":true},{"name":"onToggle","type":"OnCollapse","description":"On toggling the expansion"},{"name":"rowIndex","type":"number","description":"The row index","required":true}]},{"name":"ThExpandType","description":"","props":[{"name":"areAllExpanded","type":"boolean","description":"Whether all are expanded","required":true},{"name":"collapseAllAriaLabel","type":"string","description":"Alternative aria label","required":true},{"name":"onToggle","type":"OnCollapse","description":"On toggling the expansion"}]},{"name":"EditableSelectInputCell","description":"","props":[{"name":"cellIndex","type":"number","description":"Cell index of this select input cell","required":true},{"name":"clearSelection","type":"(event: React.MouseEvent, rowIndex: number, cellIndex: number) => void","description":"Event handler which fires when the user clears the selections"},{"name":"isDisabled","type":"boolean","description":"Flag indicating the select input is disabled"},{"name":"isOpen","type":"boolean","description":"Flag indicating the select menu is open","defaultValue":"false"},{"name":"onSelect","type":"(\n  event: React.MouseEvent | React.ChangeEvent,\n  newValue: any | any[],\n  rowIndex: number,\n  cellIndex: number,\n  isPlaceholder?: boolean\n) => void","description":"Event handler which fires when user selects an option in this cell","defaultValue":"() => {}"},{"name":"onToggle","type":"(event: React.MouseEvent | undefined) => void","description":"Event handler which fires when the select toggle is toggled","defaultValue":"() => {}"},{"name":"options","type":"React.ReactElement[]","description":"Options to display in the expandable select menu","defaultValue":"[]"},{"name":"props","type":"EditableSelectInputProps","description":"Props to build the select component","required":true},{"name":"rowIndex","type":"number","description":"Row index of this select input cell","required":true},{"name":"selections","type":"any | any[]","description":"Current selected options to display as the read only value of the table cell","defaultValue":"['']"}]},{"name":"EditableTextCell","description":"","props":[{"name":"cellIndex","type":"number","description":"Cell index of this text cell","required":true},{"name":"handleTextInputChange","type":"(\n  newValue: string,\n  event: React.FormEvent<HTMLInputElement>,\n  rowIndex: number,\n  cellIndex: number\n) => void","description":"Event handler which fires when user changes the text in this cell","required":true},{"name":"inputAriaLabel","type":"string","description":"accessible label of the text input","required":true},{"name":"isDisabled","type":"boolean","description":"flag indicating if the text input is disabled","defaultValue":"false"},{"name":"props","type":"EditableTextCellProps","description":"Props to build the input","required":true},{"name":"rowIndex","type":"number","description":"Row index of this text cell","required":true},{"name":"value","type":"string","description":"The current value of the text input","required":true}]},{"name":"EditableSelectInputProps","description":"","props":[{"name":"[key: string]","type":"any","description":"arbitrary data to pass to the internal select component in the editable select input cell","required":true},{"name":"editableSelectProps","type":"SelectProps","description":"Props to be passed down to the select component"},{"name":"isSelectOpen","type":"boolean","description":"Flag controlling isOpen state of select","required":true},{"name":"name","type":"string","description":"Name of the select input","required":true},{"name":"options","type":"React.ReactElement[]","description":"Array of react elements to display in the select menu","required":true},{"name":"selected","type":"any | any[]","description":"Single select option value for single select menus, or array of select option values for multi select. You can also specify isSelected on the SelectOption","required":true},{"name":"value","type":"string | string[]","description":"Value to display in the cell","required":true}]},{"name":"EditableTextCellProps","description":"","props":[{"name":"[key: string]","type":"any","description":"arbitrary data to pass to the internal text input in the editable text cell","required":true},{"name":"name","type":"string","description":"Name of the input","required":true},{"name":"value","type":"string","description":"Value to display in the cell","required":true}]},{"name":"ThSortType","description":"","props":[{"name":"columnIndex","type":"number","description":"The column index","required":true},{"name":"isFavorites","type":"boolean","description":"True to make this a favoritable sorting cell"},{"name":"onSort","type":"OnSort","description":"Wraps the content in a button and adds a sort icon - Click callback on the sortable cell"},{"name":"sortBy","type":"ISortBy","description":"Provide the currently active column's index and direction","required":true}]},{"name":"ISortBy","description":"","props":[{"name":"defaultDirection","type":"'asc' | 'desc'","description":"Defaulting sorting direction. Defaults to \"asc\"."},{"name":"direction","type":"'asc' | 'desc'","description":"Current sort direction"},{"name":"index","type":"number","description":"Index of the current sorted column"}]},{"name":"InnerScrollContainer","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the inner scroll container"},{"name":"className","type":"string","description":"Additional classes added to the container"}]},{"name":"OuterScrollContainer","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the outer scroll container"},{"name":"className","type":"string","description":"Additional classes added to the container"}]}]},"Sparkline chart":{"id":"Sparkline chart","title":"Sparkline chart","source":"react","tabName":null,"slug":"/charts/sparkline-chart/react","propComponents":[{"name":"ChartArea","description":"ChartArea renders a dataset as a single area path. Since ChartArea renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartArea can be composed with Chart to create area charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-area/src/victory-area.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartArea: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use its default Area component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function | string[] | number[]","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartArea events.\nSince ChartArea only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartArea uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartArea. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartContainer","description":"ChartContainer provides a top-level <svg> element for other Victory based components to render within. By default,\nChartContainer renders responsive SVGs.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-core/src/victory-container/victory-container.tsx","props":[{"name":"children","type":"React.ReactElement | React.ReactElement[]","description":"The children prop specifies the child or children that will be rendered within the container. It will be set by\nwhatever Victory component is rendering the container."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by ChartContainer"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"containerRef","type":"React.RefObject<HTMLElement>","description":"The containerRef prop may be used to attach a ref to the outermost element rendered by the container.\n\n@example containerRef={(ref) => { this.chartRef = ref; }}"},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. VictoryTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height."},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string","description":"The title prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers. The more descriptive this title is, the more\nuseful it will be. If no title prop is passed, it will default to Chart.\n\n@example \"Popularity of Dog Breeds by Percentage\""},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]},{"name":"ChartGroup","description":"ChartGroup is a wrapper component that renders a given set of children with some shared props. ChartGroup reconciles\nthe domain and layout for all its children, and coordinates animations and shared events. ChartGroup may also be used\nto supply common data and styles to all its children. This is especially useful when adding markers to a line, or\nadding voronoi tooltips to data. ChartGroup may also be used to apply an offset to a group of children, as with\ngrouped bar charts, or may be used to stack several components on the same level, e.g., stacked area charts with\ndata markers.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-group/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"color","type":"string","description":"The color prop is an optional prop that defines a single color to be applied to the\nchildren of ChartGroup. The color prop will override colors specified via colorScale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartGroup will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartGroup: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartGroup will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartGroup events.\nSince ChartGroup only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartGroup uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartGroup. If individual labels are required for each\ndata point, they should be created by composing ChartGroup with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"offset","type":"number","description":"The offset prop determines the number of pixels each element in a group should\nbe offset from its original position of the on the independent axis. In the\ncase of groups of bars, this number should be equal to the width of the bar\nplus the desired spacing between bars."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart,\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartGroup with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartGroup. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar or ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartLabel","description":"ChartLabel renders the label components that are used across all Victory based components.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-core/src/victory-label/victory-label.tsx","props":[{"name":"active","type":"boolean","description":"The active prop specifies whether the label is active or not. The active prop is set by defaultEvents in components\nlike ChartTooltip and VictorySelectionContainer. The active prop is used when evaluating functional styles and\nprops."},{"name":"angle","type":"string | number","description":"Specifies the angle to rotate the text by."},{"name":"capHeight","type":"number | string | Function","description":"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\nunitless number, it is assumed to be ems."},{"name":"className","type":"string","description":"The className prop specifies a class name that will be applied to the rendered text element."},{"name":"data","type":"any[]","description":"Labels that apply to an entire data series will recieve the entire series as `data` instead of an individual datum\nprop."},{"name":"datum","type":"{}","description":"Victory components can pass a datum prop to their label component. This can be used to calculate functional styles,\nand determine child text"},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with accessibility for screen readers. The more\ndescriptive this title is, the more useful it will be for people using screen readers."},{"name":"direction","type":"'rtl' | 'ltr' | 'inherit'","description":"The direction prop determines which text direction to apply to the rendered text element"},{"name":"dx","type":"number | string | Function","description":"The dx prop defines a horizontal shift from the `x` coordinate."},{"name":"dy","type":"number | string | Function","description":"The dy prop defines a vertical shift from the `y` coordinate. Since this component already accounts for\n`capHeight`, `lineHeight`, and `verticalAnchor`, this will usually not be necessary."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the label component.\nEvent handlers are currently only called with their corresponding events."},{"name":"id","type":"StringOrNumberOrCallback","description":"The id prop specifies a HTML ID that will be applied to the rendered text element."},{"name":"inline","type":"boolean","description":"When the text property contains an array of strings, the inline property lets the <tspan /> elements lay out next\nto each other. If this property is not specified, the <tspan /> elements will stack vertically instead."},{"name":"labelPlacement","type":"string","description":"The labelPlacement prop is used to specify the placement of labels relative to the data point they represent.\nThis prop may be given as “vertical”, “parallel” or “perpendicular”. This props is particularly useful in polar\ncharts, where it may be desireable to position a label either parallel or perpendicular to its corresponding angle.\nWhen this prop is not set, perpendicular label placement will be used for polar charts, and vertical label\nplacement will be used for cartesian charts."},{"name":"lineHeight","type":"number | string | Function","description":"The lineHeight prop defines how much space a single line of text should take up.\nNote that SVG has no notion of line-height, so the positioning may differ slightly from what you would expect with CSS,\nbut the result is similar: a roughly equal amount of extra space is distributed above and below the line of text.\nThe value should ideally use the same units as `capHeight` and `dy`, preferably ems.\nIf given a unitless number, it is assumed to be ems."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"renderInPortal","type":"boolean","description":"The renderInPortal prop specifies whether ChartLabel should render text in place or within a VictoryPortal.\nSetting renderInPortal to true is equivalent to wrapping ChartLabel in a VictoryPortal. This prop is false by default."},{"name":"style","type":"React.CSSProperties | React.CSSProperties[]","description":"The style prop applies CSS properties to the rendered `<text>` element."},{"name":"text","type":"number | string | Function | string[]","description":"The text prop defines the text ChartLabel will render. The text prop may be given as a string, number, a function\nof datum, or an array of any of these. Strings may include newline characters, which ChartLabel will split into\nseparate <tspan/> elements. When text is given as an array, separate <tspan/> elements will be created for each\nelement in the array."},{"name":"textAnchor","type":"string | Function","description":"The textAnchor prop defines how the text is horizontally positioned relative to the given `x` and `y` coordinates.\nOptions are \"start\", \"middle\" and \"end\". Note that this overrides the style prop."},{"name":"transform","type":"string | {} | (() => string | {})","description":"The transform prop applies a transform to the rendered `<text>` element.\nIn addition to being a string, it can be an object containing transform definitions for easier authoring."},{"name":"verticalAnchor","type":"string","description":"The verticalAnchor prop defines how the text is vertically positioned relative to the given `x` and `y`\ncoordinates. Options are \"start\", \"middle\" and \"end\"."},{"name":"x","type":"number","description":"The x prop defines the x coordinate to use as a basis for horizontal positioning."},{"name":"y","type":"number","description":"The y prop defines the y coordinate to use as a basis for vertical positioning."}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Skeletons":{"id":"Skeletons","title":"Skeletons","source":"react","tabName":null,"beta":true,"slug":"/charts/skeletons/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartArea","description":"ChartArea renders a dataset as a single area path. Since ChartArea renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartArea can be composed with Chart to create area charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-area/src/victory-area.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartArea: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use its default Area component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function | string[] | number[]","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartArea events.\nSince ChartArea only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartArea uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartArea. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartBar","description":"ChartBar renders a dataset as series of bars. ChartBar can be composed with Chart to create bar charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-bar/src/index.d.ts","props":[{"name":"alignment","type":"string","description":"The alignment prop specifies how bars should be aligned relative to their data points.\nThis prop may be given as “start”, “middle” or “end”. When this prop is not specified,\nbars will have “middle” alignment relative to their data points."},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"barRatio","type":"number","description":"The barRatio prop specifies an approximate ratio between bar widths and spaces between bars.\nWhen width is not specified via the barWidth prop or in bar styles, the barRatio prop will\nbe used to calculate a default width for each bar given the total number of bars in the data series\nand the overall width of the chart."},{"name":"barWidth","type":"number | Function","description":"The barWidth prop is used to specify the width of each bar. This prop may be given as\na number of pixels or as a function that returns a number. When this prop is given as\na function, it will be evaluated with the arguments datum, and active. When this value\nis not given, a default value will be calculated based on the overall dimensions of\nthe chart, and the number of bars."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartBar: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"Function | number | { top, bottom, topLeft, topRight, bottomLeft, bottomRight }","description":"The cornerRadius prop specifies a radius to apply to each bar.\nIf this prop is given as a single number, the radius will only be applied to the top of each bar.\nWhen this prop is given as a function, it will be evaluated with the arguments datum, and active.\n\n\n@example {topLeft: ({ datum }) => datum.x * 4}"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create a bar.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartBar: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use its default Bar component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for VictoryBar events.\nThe eventKey may optionally be used to select a single element by index rather than an entire\nset. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: \"thisOne\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: \"theOtherOne\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: \"theOtherOne\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartBar uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the bar. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartBar. If individual labels are required for each\ndata point, they should be created by composing ChartBar with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartBar with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartBar. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartBar as a solo component, implement the theme directly on\nChartBar. If you are wrapping ChartBar in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartBoxPlot","description":"ChartBoxPlot renders a box plot to describe the distribution of a set of data. Data for ChartBoxPlot may be given\nwith summary statistics pre-calculated (min, median, max, q1, q3), or as an array of raw data. ChartBoxPlot can be\ncomposed with Chart to create box plot charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-bar/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"boxWidth","type":"number","description":"The boxWidth prop specifies how wide each box should be. If the whiskerWidth prop is not set, this prop will also\ndetermine the width of the whisker crosshair."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartBoxPlot: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBoxPlot will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop for ChartBoxPlot may be given in a variety of formats:\n\n@example\nAs an array of standard data objects with values specified for x and y When given in this format, repeated values\nfor x will be used for calculating summary statistics\n\ndata={[\n  { x: 1, y: 2 },\n  { x: 1, y: 3 },\n  { x: 1, y: 5 },\n  { x: 2, y: 1 },\n  { x: 2, y: 4 },\n  { x: 2, y: 5 },\n  ...\n]}\n\n@example As an array of data objects where y is given as an array of values When given in this format, array values\nare used for calculating summary statistics.\n\ndata={[\n  { x: 1, y: [1, 2, 3, 5] },\n  { x: 2, y: [3, 2, 8, 10] },\n  { x: 3, y: [2, 8, 6, 5] },\n  { x: 4, y: [1, 3, 2, 9] }\n]}\n\n@example As an array of data objects with pre-calculated summary statistics(min, median, max, q1, q3) When given in\nthis format, ChartBoxPlot will not perform statistical analysis. Pre-calculating summary statistics for large\ndatasets will improve performance.\n\ndata={[\n  { x: 1, min: 2, median: 5, max: 10, q1: 3, q3: 7 },\n  { x: 2, min: 1, median: 4, max: 9, q1: 3, q3: 6 },\n  { x: 3, min: 1, median: 6, max: 12, q1: 4, q3: 10 },\n]}\n\nUse the x, y, min, max, median, q1, and q3 data accessor props to specify custom data formats."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartBoxPlot events.\nThe eventKey may optionally be used to select a single element by index rather than an entire\nset. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\n\nevents={[\n  {\n    target: \"data\",\n    eventKey: \"thisOne\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: \"theOtherOne\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: \"theOtherOne\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartBoxPlot uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelOrientation","type":"OrientationTypes | VictoryBoxPlotLabelOrientationInterface","description":"The labelOrientation prop determines where labels are placed relative to their corresponding data. If this prop is\nnot set, it will be set to \"top\" for horizontal charts, and \"right\" for vertical charts."},{"name":"labels","type":"boolean","description":"When the boolean labels prop is set to true, the values for min, max, median, q1, and q3 will be displayed for\neach box. For more granular label control, use the individual minLabels, maxLabels, medianLabels, q1Labels, and\nq3Labels props."},{"name":"max","type":"string | array[string] | function","description":"Use the max data accessor prop to define the max value of a box plot.\n\n\n@example Specify which property in an array of data objects should be used as the max value\n\nmax=\"max_value\"\n\n@example Use a function to translate each element in a data array into a max value\n\nmax={() => 10}\n\n@example Specify which property in an array of nested data objects should be used as a max value\n\nmax=\"bonds.max\", max={[\"bonds\", \"max\"]}"},{"name":"maxComponent","type":"React.ReactElement","description":"The maxComponent prop takes a component instance which will be responsible for rendering an element to represent\nthe maximum value of the box plot. The new element created from the passed maxComponent will be provided with the\nfollowing props calculated by ChartBoxPlot: datum, index, scale, style, events, majorWhisker and minorWhisker.\nThe majorWhisker and minorWhisker props are given as objects with values for x1, y1, x2 and y2 that describes the\nlines that make up the major and minor whisker. Any of these props may be overridden by passing in props to the\nsupplied component, or modified or ignored within the custom component itself. If a maxComponent is not provided,\nChartBoxPlot will use its default Whisker component."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"maxLabelComponent","type":"React.ReactElement","description":"The maxLabelComponent prop takes a component instance which will be used to render the label corresponding to the\nmaximum value for each box. The new element created from the passed maxLabelComponent will be supplied with the\nfollowing props: x, y, datum, index, scale, verticalAnchor, textAnchor, angle, transform, style and events. Any of\nthese props may be overridden by passing in props to the supplied component, or modified or ignored within the\ncustom component itself. If maxLabelComponent is omitted, a new ChartLabel will be created with props described\nabove."},{"name":"maxLabels","type":"VictoryBoxPlotLabelType","description":"The maxLabels prop defines the labels that will appear above each point. This prop should be given as a boolean,\nan array or as a function of the props corresponding to that label. When given as a boolean value, the max value\nof each datum will be used for the label.\n\n@example\n\nmaxLabels={[\"first\", \"second\", \"third\"]}\nmaxLabels={({ datum }) => Math.round(datum.max)}"},{"name":"median","type":"string | array[string] | function","description":"Use the median data accessor prop to define the median value of a box plot.\n\n\n@example Specify which property in an array of data objects should be used as the median value\n\nmedian=\"median_value\"\n\n@example Use a function to translate each element in a data array into a median value\n\nmedian={() => 10}\n\n@example Specify which property in an array of nested data objects should be used as a median value\n\nmedian=\"bonds.median\", median={[\"bonds\", \"median\"]}"},{"name":"medianComponent","type":"React.ReactElement","description":"The medianComponent prop takes a component instance which will be responsible for rendering an element to represent\nthe median value of the box plot. The new element created from the passed medianComponent will be provided with the\nfollowing props calculated by ChartBoxPlot: datum, index, scale, style, events, x1, y1, x2 and y2 Any of these\nprops may be overridden by passing in props to the supplied component, or modified or ignored within the custom\ncomponent itself. If a medianComponent is not provided, ChartBoxPlot will use its default Line component."},{"name":"medianLabelComponent","type":"React.ReactElement","description":"The medianLabelComponent prop takes a component instance which will be used to render the label corresponding to\nthe median value for each box. The new element created from the passed medianLabelComponent will be supplied with\nthe following props: x, y, datum, index, scale, verticalAnchor, textAnchor, angle, transform, style and events. Any\nof these props may be overridden by passing in props to the supplied component, or modified or ignored within the\ncustom component itself. If medianLabelComponent is omitted, a new ChartLabel will be created with props\ndescribed above."},{"name":"medianLabels","type":"string | function | boolean","description":"The medianLabels prop defines the labels that will appear above each point. This prop should be given as a boolean,\nan array or as a function of the props corresponding to that label. When given as a boolean value, the median value\nof each datum will be used for the label.\n\n\n@example\n\nmedianLabels={[\"first\", \"second\", \"third\"]}\nmedianLabels={({ datum }) => Math.round(datum.median)}"},{"name":"min","type":"string | array[string] | function","description":"Use the min data accessor prop to define the min value of a box plot.\n\n\n@example Specify which property in an array of data objects should be used as the min value\n\nmin=\"min_value\"\n\n@example Use a function to translate each element in a data array into a min value\n\nmin={() => 10}\n\n@example Specify which property in an array of nested data objects should be used as a min value\n\nmin=\"bonds.min\", min={[\"bonds\", \"min\"]}"},{"name":"minComponent","type":"React.ReactElement","description":"The minComponent prop takes a component instance which will be responsible for rendering an element to represent\nthe minimum value of the box plot. The new element created from the passed minComponent will be provided with the\nfollowing props calculated by ChartBoxPlot: datum, index, scale, style, events, majorWhisker and minorWhisker.\nThe majorWhisker and minorWhisker props are given as objects with values for x1, y1, x2 and y2 that describes the\nlines that make up the major and minor whisker. Any of these props may be overridden by passing in props to the\nsupplied component, or modified or ignored within the custom component itself. If a minComponent is not provided,\nChartBoxPlot will use its default Whisker component."},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"minLabelComponent","type":"React.ReactElement","description":"The minLabelComponent prop takes a component instance which will be used to render the label corresponding to the\nminimum value for each box. The new element created from the passed minLabelComponent will be supplied with the\nfollowing props: x, y, datum, index, scale, verticalAnchor, textAnchor, angle, transform, style and events. Any of\nthese props may be overridden by passing in props to the supplied component, or modified or ignored within the\ncustom component itself. If minLabelComponent is omitted, a new ChartLabel will be created with props described\nabove."},{"name":"minLabels","type":"string | function | boolean","description":"The minLabels prop defines the labels that will appear above each point. This prop should be given as a boolean, an\narray or as a function of the props corresponding to that label. When given as a boolean value, the min value of\neach datum will be used for the label.\n\n\n@example\n\nminLabels={[\"first\", \"second\", \"third\"]}\nminLabels={({ datum }) => Math.round(datum.min)}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"q1","type":"string | array[string] | function","description":"Use the q1 data accessor prop to define the q1 value of a box plot.\n\n\n@example Specify which property in an array of data objects should be used as the q1 value\n\nq1=\"q1_value\"\n\n@example Use a function to translate each element in a data array into a q1 value\n\nq1={() => 10}\n\n@example Specify which property in an array of nested data objects should be used as a q1 value\n\nq1=\"bonds.q1\", q1={[\"bonds\", \"q1\"]}"},{"name":"q1Component","type":"React.ReactElement","description":"The q1Component prop takes a component instance which will be responsible for rendering an element to represent the\nq1 value of the box plot. The new element created from the passed q1Component will be provided with the following\nprops calculated by ChartBoxPlot: datum, index, scale, style, events, x, y, width and height Any of these props\nmay be overridden by passing in props to the supplied component, or modified or ignored within the custom component\nitself. If a q1Component is not provided, ChartBoxPlot will use its default Box component."},{"name":"q1LabelComponent","type":"React.ReactElement","description":"The q1LabelComponent prop takes a component instance which will be used to render the label corresponding to the q1\nvalue for each box. The new element created from the passed q1LabelComponent will be supplied with the following\nprops: x, y, datum, index, scale, verticalAnchor, textAnchor, angle, transform, style and events. Any of these\nprops may be overridden by passing in props to the supplied component, or modified or ignored within the custom\ncomponent itself. If q1LabelComponent is omitted, a new ChartLabel will be created with props described above."},{"name":"q1Labels","type":"string | function | boolean","description":"The q1Labels prop defines the labels that will appear above each point. This prop should be given as a boolean, an\narray or as a function of the props corresponding to that label. When given as a boolean value, the q1 value of\neach datum will be used for the label.\n\n\n@example\n\nq1Labels={[\"first\", \"second\", \"third\"]}\nq1Labels={({ datum }) => Math.round(datum.q1)}"},{"name":"q3","type":"string | array[string] | function","description":"Use the q3 data accessor prop to define the q3 value of a box plot.\n\n\n@example Specify which property in an array of data objects should be used as the q3 value\n\nq3=\"q3_value\"\n\n@example Use a function to translate each element in a data array into a q3 value\n\nq3={() => 10}\n\n@example Specify which property in an array of nested data objects should be used as a q3 value\n\nq3=\"bonds.q3\", q3={[\"bonds\", \"q3\"]}"},{"name":"q3Component","type":"React.ReactElement","description":"The q3Component prop takes a component instance which will be responsible for rendering an element to represent the\nq3 value of the box plot. The new element created from the passed q3Component will be provided with the following\nprops calculated by ChartBoxPlot: datum, index, scale, style, events, x, y, width and height Any of these props\nmay be overridden by passing in props to the supplied component, or modified or ignored within the custom component\nitself. If a q3Component is not provided, ChartBoxPlot will use its default Box component."},{"name":"q3LabelComponent","type":"React.ReactElement","description":"The q3LabelComponent prop takes a component instance which will be used to render the label corresponding to the q3\nvalue for each box. The new element created from the passed q3LabelComponent will be supplied with the following\nprops: x, y, datum, index, scale, verticalAnchor, textAnchor, angle, transform, style and events. Any of these\nprops may be overridden by passing in props to the supplied component, or modified or ignored within the custom\ncomponent itself. If q3LabelComponent is omitted, a new ChartLabel will be created with props described above."},{"name":"q3Labels","type":"string | function | boolean","description":"The q3Labels prop defines the labels that will appear above each point. This prop should be given as a boolean, an\narray or as a function of the props corresponding to that label. When given as a boolean value, the q3 value of\neach datum will be used for the label.\n\n\n@example\n\nq3Labels={[\"first\", \"second\", \"third\"]}\nq3Labels={({ datum }) => Math.round(datum.q3)}"},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartBoxPlot with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartBoxPlot. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartBoxPlot as a solo component, implement the theme directly on\nChartBoxPlot. If you are wrapping ChartBoxPlot in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"whiskerWidth","type":"number","description":"The whiskerWidth prop specifies how wide each whisker crosshair should be. If the whiskerWidth prop is not set, the\nwidth of the whisker crosshair will match the width of the box."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBoxPlot.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartBullet","description":"ChartBullet renders a dataset as a bullet chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers."},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers."},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axis component to render with the chart","defaultValue":"<ChartAxis />"},{"name":"bulletSize","type":"number","description":"Specifies the size of the bullet chart. For a horizontal chart, this adjusts bar height; although, it\ntechnically scales the underlying barWidth property.\n\nNote: Values should be >= 125, the default is 140","defaultValue":"theme.chart.height"},{"name":"comparativeErrorMeasureComponent","type":"React.ReactElement<any>","description":"The comparative error measure component to render with the chart","defaultValue":"<ChartBulletComparativeErrorMeasure />"},{"name":"comparativeErrorMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example comparativeErrorMeasureData={[{ y: 50 }]}"},{"name":"comparativeErrorMeasureDataY","type":"number | string | Function | string[]","description":"The comparativeErrorMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"comparativeErrorMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"comparativeWarningMeasureComponent","type":"React.ReactElement<any>","description":"The comparative warning measure component to render with the chart","defaultValue":"<ChartBulletComparativeWarningMeasure />"},{"name":"comparativeWarningMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example comparativeWarningMeasureData={[{ y: 50 }]}"},{"name":"comparativeWarningMeasureDataY","type":"number | string | Function | string[]","description":"The comparativeWarningMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"comparativeWarningMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"comparativeZeroMeasureComponent","type":"React.ReactElement<any>","description":"The comparative zero measure component to render with the chart","defaultValue":"<ChartBulletComparativeMeasure />"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\nNote: The x domain is expected to be `x: [0, 2]` in order to position all measures properly\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n{x: [0, 2], y: [0, 100]}","defaultValue":"getBulletDomain({\n  comparativeErrorMeasureComponent,\n  comparativeErrorMeasureData,\n  comparativeWarningMeasureComponent,\n  comparativeWarningMeasureData,\n  maxDomain,\n  minDomain,\n  primaryDotMeasureComponent,\n  primaryDotMeasureData,\n  primarySegmentedMeasureComponent,\n  primarySegmentedMeasureData,\n  qualitativeRangeComponent,\n  qualitativeRangeData\n})"},{"name":"groupSubTitle","type":"string","description":"The subtitle to render for grouped bullets"},{"name":"groupTitle","type":"string","description":"The title to render for grouped bullets"},{"name":"groupTitleComponent","type":"React.ReactElement<any>","description":"The group title component to render for grouped bullets","defaultValue":"<ChartBulletGroupTitle />"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"horizontal ? theme.chart.height : theme.chart.width"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis.","defaultValue":"true"},{"name":"invert","type":"boolean","description":"Invert the color scales used to represent primary measures and qualitative ranges.","defaultValue":"false"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property","defaultValue":"false"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.","defaultValue":"<ChartLegend />"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendItemsPerRow","type":"number","description":"The legendItemsPerRow prop determines how many items to render in each row\nof a horizontal legend, or in each column of a vertical legend. This\nprop should be given as an integer. When this prop is not given,\nlegend items will be rendered in a single row or column."},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"'bottom'"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}\n\nNote: The x domain is expected to be `x: 2` in order to position all measures properly"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}\n\nNote: The x domain is expected to be `x: 0` in order to position all measures properly"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right.\n\nNote: The underlying bullet chart is a different size than height and width. For a horizontal chart, left and right\npadding may need to be applied at (approx) 2 to 1 scale."},{"name":"primaryDotMeasureComponent","type":"React.ReactElement<any>","description":"The primary dot measure component to render with the chart","defaultValue":"<ChartBulletPrimaryDotMeasure />"},{"name":"primaryDotMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example primaryDotMeasureData={[{ y: 50 }]}"},{"name":"primaryDotMeasureDataY","type":"number | string | Function | string[]","description":"The primaryDotMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"primaryDotMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"primarySegmentedMeasureComponent","type":"React.ReactElement<any>","description":"The primary segmented measure component to render with the chart","defaultValue":"<ChartBulletPrimarySegmentedMeasure />"},{"name":"primarySegmentedMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example primarySegmentedMeasureData={[{ y: 50 }]}"},{"name":"primarySegmentedMeasureDataY","type":"number | string | Function | string[]","description":"The primarySegmentedMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"primarySegmentedMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"qualitativeRangeComponent","type":"React.ReactElement<any>","description":"The qualitative range component to render with the chart","defaultValue":"<ChartBulletQualitativeRange />"},{"name":"qualitativeRangeData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example qualitativeRangeData={[{ y: 50 }]}"},{"name":"qualitativeRangeDataY","type":"number | string | Function | string[]","description":"The qualitativeRangeDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"qualitativeRangeDataY0","type":"number | string | Function | string[]","description":"Use qualitativeRangeDataY0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"},{"name":"qualitativeRangeLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"subTitle","type":"string","description":"The subtitle for the chart"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getBulletThemeWithLegendColorScale({\n  comparativeErrorMeasureData,\n  comparativeErrorMeasureLegendData,\n  comparativeWarningMeasureData,\n  comparativeWarningMeasureLegendData,\n  invert,\n  primaryDotMeasureData,\n  primaryDotMeasureLegendData,\n  primarySegmentedMeasureData,\n  primarySegmentedMeasureLegendData,\n  qualitativeRangeData,\n  qualitativeRangeLegendData,\n  themeColor\n})"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string","description":"The title for the chart"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart title.","defaultValue":"<ChartBulletTitle />"},{"name":"titlePosition","type":"'left' | 'top-left'","description":"The title position relation to the chart. Valid values are 'left', and 'top-left'\n\nNote: These properties are only valid for horizontal layouts"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"horizontal ? theme.chart.width : theme.chart.height"}]},{"name":"ChartDonut","description":"ChartDonut renders a dataset as a donut chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"capHeight","type":"number | string | Function","description":"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\nunitless number, it is assumed to be ems.","defaultValue":"1.1"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartDonut will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartDonut: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartDonut will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonut"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of an array of data points.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartDonut; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartDonut; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartDonut's Slice component will be used."},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartDonut\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartDonut uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: When adding a legend, height (the overall SVG height) may need to be larger than donutHeight (the donut size)\nin order to accommodate the extra legend.\n\nBy default, donutHeight is the min. of either height or width. This covers most use cases in order to accommodate\nlegends within the same SVG. However, donutHeight (not height) may need to be set in order to adjust the donut height.\n\nTypically, the parent container is set to the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartDonut. If individual labels are required for each\ndata point, they should be created by composing ChartDonut with VictoryScatter"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nWhen this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartDonut with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartDonut relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"subTitle","type":"string","description":"The subtitle for the donut chart"},{"name":"subTitleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart subTitle.\n\nWhen overriding the subTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied"},{"name":"subTitlePosition","type":"'bottom' | 'center' | 'right'","description":"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'","defaultValue":"ChartDonutStyles.label.subTitlePosition"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartDonut as a solo component, implement the theme directly on\nChartDonut. If you are wrapping ChartDonut in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getDonutTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string","description":"The title for the donut chart"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart title.\n\nWhen centering both title and subTitle props, it's possible to override both styles via an array provided to\nChartLabel. The first item in the array is associated with title styles, while the second item in the array is\nassociated with subtitle styles.\n\n<pre>\nsubTitle=\"Pets\"\ntitle={100}\ntitleComponent={\n  <ChartLabel style={[{\n      fill: 'red', // title color\n      fontSize: 24\n    }, {\n      fill: 'blue', // subtitle color\n      fontSize: 14\n    }]}\n  />\n}\n</pre>\n\nIn this case, both title and subTitle will be centered together. However, should you also override the\nsubTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied","defaultValue":"<ChartLabel />"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartDonutThreshold","description":"ChartDonutThreshold renders a dataset as a donut threshold chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartDonutThreshold will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartDonutThreshold: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartDonutThreshold will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonutThreshold"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of a single data point.\nThe data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\nNote: The Y-value is expected to represent a percentage\n\n@example data={[{ x: 'Warning at 60%', y: 60 }, { x: 'Danger at 90%', y: 90 }]}","defaultValue":"[]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartDonutThreshold; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartDonutThreshold; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartDonutThreshold's Slice component will be used."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\nNote: Overridden by containerComponent\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartDonutThreshold\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartDonutThreshold uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same height in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge."},{"name":"invert","type":"boolean","description":"Invert the threshold color scale used to represent warnings, errors, etc.","defaultValue":"false"},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title","defaultValue":"[]"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartDonutThreshold with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartDonutThreshold relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"subTitle","type":"string","description":"The subtitle for the donut chart"},{"name":"subTitlePosition","type":"'bottom' | 'center' | 'right'","description":"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'","defaultValue":"ChartDonutStyles.label.subTitlePosition"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartDonutThreshold as a solo component, implement the theme directly on\nChartDonutThreshold. If you are wrapping ChartDonutThreshold in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getDonutThresholdStaticTheme(themeColor, invert)"},{"name":"title","type":"string","description":"The title for the donut chart"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartDonutUtilization","description":"ChartDonutUtilization renders a dataset as a donut utilization chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"capHeight","type":"number | string | Function","description":"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\nunitless number, it is assumed to be ems."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartDonutUtilization will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartDonutUtilization: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartDonutUtilization will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonutUtilization"},{"name":"data","type":"any","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of a single data point.\nThe data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\nNote: The Y-value is expected to represent a percentage\n\n@example data={{ x: 'GBps capacity', y: 75 }}"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartDonutUtilization; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartDonutUtilization; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartDonutUtilization's Slice component will be used."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\nNote: Overridden by containerComponent\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartDonutUtilization\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartDonutUtilization uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge."},{"name":"invert","type":"boolean","description":"Invert the threshold color scale used to represent warnings, errors, etc.\n\nInstead of showing a warning at 60% and an error at 90%; for example, this would allow users to show a warning\nbelow 60% and an error below 20%","defaultValue":"false"},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartDonutUtilization. If individual labels are required for each\ndata point, they should be created by composing ChartDonutUtilization with VictoryScatter"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nThis prop should be given as \"startAngle\", \"endAngle\", \"centroid\", or as a function that returns one of these\nvalues. When this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartDonutUtilization with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartDonutUtilization relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"subTitle","type":"string","description":"The subtitle for the donut chart label"},{"name":"subTitleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart subTitle.\n\nWhen overriding the subTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied"},{"name":"subTitlePosition","type":"'bottom' | 'center' | 'right'","description":"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartDonutUtilization as a solo component, implement the theme directly on\nChartDonutUtilization. If you are wrapping ChartDonutUtilization in ChartChart, ChartGroup, or ChartThreshold\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getDonutUtilizationTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"thresholds","type":"any[]","description":"The dynamic portion of the chart will change colors when data reaches the given threshold. Colors may be\noverridden, but defaults shall be provided.\n\n@example thresholds={[{ value: 60, color: '#F0AB00' }, { value: 90, color: '#C9190B' }]}"},{"name":"title","type":"string","description":"The title for the donut chart label"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the donut chart title.\n\nWhen centering both title and subTitle props, it's possible to override both styles via an array provided to\nChartLabel. The first item in the array is associated with title styles, while the second item in the array is\nassociated with subtitle styles.\n\n<pre>\nsubTitle=\"Pets\"\ntitle={100}\ntitleComponent={\n  <ChartLabel style={[{\n      fill: 'red', // title color\n      fontSize: 24\n    }, {\n      fill: 'blue', // subtitle color\n      fontSize: 14\n    }]}\n  />\n}\n</pre>\n\nIn this case, both title and subTitle will be centered together. However, should you also override the\nsubTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartLegend","description":"ChartLegend renders a chart legend component.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-legend/src/index.d.ts","props":[{"name":"borderComponent","type":"React.ReactElement<any>","description":"The borderComponent prop takes a component instance which will be responsible\nfor rendering a border around the legend. The new element created from the passed\nborderComponent will be provided with the following properties calculated by\nChartLegend: x, y, width, height, and style. Any of these props may be\noverridden by passing in props to the supplied component, or modified or ignored\nwithin the custom component itself. If a borderComponent\nis not provided, ChartLegend will use its default Border component.\nPlease note that the default width and height calculated\nfor the border component is based on approximated\ntext measurements, and may need to be adjusted."},{"name":"borderPadding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The borderPadding specifies the amount of padding that should\nbe added between the legend items and the border. This prop may be given as\na number, or asanobject with values specified for top, bottom, left, and right.\nPlease note that the default width and height calculated for the border\ncomponent is based on approximated text measurements, so padding may need to be adjusted."},{"name":"centerTitle","type":"boolean","description":"The centerTitle boolean prop specifies whether a legend title should be centered."},{"name":"colorScale","type":"string[]","description":"The colorScale prop defines a color scale to be applied to each data\nsymbol in ChartLegend. This prop should be given as an array of CSS\ncolors, or as a string corresponding to one of the built in color\nscales. Colors will repeat when there are more symbols than colors in the\nprovided colorScale."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLegend: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLegend will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"{\n  name?: string;\n  labels?: {\n    fill?: string;\n  };\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array."},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes a component instance which will be\nresponsible for rendering a data element used to associate a symbol\nor color with each data series. The new element created from the\npassed dataComponent will be provided with the following properties\ncalculated by ChartLegend: x, y, size, style, and symbol. Any of\nthese props may be overridden by passing in props to the supplied\ncomponent, or modified or ignored within the custom component itself.\nIf a dataComponent is not provided, ChartLegend will use its\ndefault Point component.","defaultValue":"<ChartPoint />"},{"name":"eventKey","type":"number | string | Function | string[]","description":"ChartLegend uses the standard eventKey prop to specify how event targets\nare addressed. This prop is not commonly used."},{"name":"events","type":"object[]","description":"ChartLegend uses the standard events prop."},{"name":"externalEventMutations","type":"object[]","description":"ChartLegend uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"gutter","type":"number | { left: number; right: number }","description":"The gutter prop defines the number of pixels between legend rows or\ncolumns, depending on orientation. When orientation is horizontal,\ngutters are between columns. When orientation is vertical, gutters\nare the space between rows."},{"name":"itemsPerRow","type":"number","description":"The itemsPerRow prop determines how many items to render in each row\nof a horizontal legend, or in each column of a vertical legend. This\nprop should be given as an integer. When this prop is not given,\nlegend items will be rendered in a single row or column."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes a component instance which will be used\nto render each legend label. The new element created from the passed\nlabelComponent will be supplied with the following properties: x, y,\nstyle, and text. Any of these props may be overridden by passing in\nprops to the supplied component, or modified or ignored within the\ncustom component itself. If labelComponent is omitted, a new\nChartLabel will be created with the props described above.","defaultValue":"<ChartLabel />"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"orientation","type":"string","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container with a viewBox\nattribute, or a static container with absolute width and height.\n\nUseful when legend is located inside a chart -- default is false.\n\nNote: Not compatible with containerComponent prop","defaultValue":"true"},{"name":"rowGutter","type":"number | { top: number, bottom: number }","description":"The rowGutter prop defines the number of pixels between legend rows.\nThis prop may be given as a number, or as an object with values\nspecified for “top” and “bottom” gutters. To set spacing between columns,\nuse the gutter prop.\n\n\n@example { top: 0, bottom: 10 }"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLegend with other components within an enclosing <svg> tag."},{"name":"style","type":"{ border: object, data: object, labels: object, parent: object, title: object }","description":"The style prop specifies styles for your pie. ChartLegend relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"symbolSpacer","type":"number","description":"The symbolSpacer prop defines the number of pixels between data\ncomponents and label components."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLegend as a solo component, implement the theme directly on\nChartLegend. If you are wrapping ChartLegend in ChartChart or\nChartGroup, please call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string | string[]","description":"The title prop specifies a title to render with the legend.\nThis prop should be given as a string, or an array of strings for multi-line titles."},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The titleComponent prop takes a component instance which will be used to render\na title for the component. The new element created from the passed label\ncomponent will be supplied with the following properties: x, y, index, data,\ndatum, verticalAnchor, textAnchor, style, text, and events. Any of these props\nmay be overridden by passing in props to the supplied component, or modified\nor ignored within the custom component itself. If labelComponent is omitted,\na new ChartLabel will be created with the props described above.","defaultValue":"<ChartLabel />"},{"name":"titleOrientation","type":"string","description":"The titleOrientation prop specifies where the title should be rendered\nin relation to the rest of the legend. Possible values\nfor this prop are “top”, “bottom”, “left”, and “right”."},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"x","type":"number","description":"The x and y props define the base position of the legend element."},{"name":"y","type":"number","description":"The x and y props define the base position of the legend element."}]},{"name":"ChartLine","description":"ChartLine renders a dataset as a single line path. Since ChartLine renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartLine can be composed with Chart to create line charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-line/src/victory-line.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLine: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartLine: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartLine events.\nSince ChartLine only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartLine uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartLine. If individual labels are required for each\ndata point, they should be created by composing ChartLine with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"DataGetterPropType","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLine with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartLine. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLine as a solo component, implement the theme directly on\nChartLine. If you are wrapping ChartLine in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartLine.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartGroup","description":"ChartGroup is a wrapper component that renders a given set of children with some shared props. ChartGroup reconciles\nthe domain and layout for all its children, and coordinates animations and shared events. ChartGroup may also be used\nto supply common data and styles to all its children. This is especially useful when adding markers to a line, or\nadding voronoi tooltips to data. ChartGroup may also be used to apply an offset to a group of children, as with\ngrouped bar charts, or may be used to stack several components on the same level, e.g., stacked area charts with\ndata markers.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-group/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"color","type":"string","description":"The color prop is an optional prop that defines a single color to be applied to the\nchildren of ChartGroup. The color prop will override colors specified via colorScale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartGroup will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartGroup: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartGroup will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartGroup events.\nSince ChartGroup only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartGroup uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartGroup. If individual labels are required for each\ndata point, they should be created by composing ChartGroup with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"offset","type":"number","description":"The offset prop determines the number of pixels each element in a group should\nbe offset from its original position of the on the independent axis. In the\ncase of groups of bars, this number should be equal to the width of the bar\nplus the desired spacing between bars."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart,\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartGroup with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartGroup. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar or ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartPie","description":"ChartPie renders a dataset as a pie chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartPie will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartPie: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartPie will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartPie"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of an array of data points.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartPie; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartPie; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartPie's Slice component will be used."},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartPie uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: When adding a legend, height (the overall SVG height) may need to be larger than pieHeight (the pie size)\nin order to accommodate the extra legend.\n\nBy default, pieHeight is the min. of either height or width. This covers most use cases in order to accommodate\nlegends within the same SVG. However, pieHeight (not height) may need to be set in order to adjust the pie height.\n\nTypically, the parent container is set to the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge. When this prop is set to zero\na regular pie chart is rendered."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartPie. If individual labels are required for each\ndata point, they should be created by composing ChartPie with VictoryScatter","defaultValue":"allowTooltip ? (\n  <ChartTooltip constrainToVisibleArea={constrainToVisibleArea} theme={theme} />\n) : undefined"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nThis prop should be given as \"startAngle\", \"endAngle\", \"centroid\", or as a function that returns one of these\nvalues. When this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property","defaultValue":"false"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the pie chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the final dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartPie with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartPie relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartPie as a solo component, implement the theme directly on\nChartPie. If you are wrapping ChartPie in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartScatter","description":"ChartScatter renders a dataset as a series of points. ChartScatter can be composed with Chart to create scatter plots.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-scatter/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"bubbleProperty","type":"string","description":"The bubbleProperty prop indicates which property of the data object should be used\nto scale data points in a bubble chart"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartScatter: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartScatter will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartScatter: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartScatter will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartScatter events.\nSince ChartScatter only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartScatter uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartScatter. If individual labels are required for each\ndata point, they should be created by composing ChartScatter with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxBubbleSize","type":"number","description":"The maxBubbleSize prop sets an upper limit for scaling data points in a bubble chart"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minBubbleSize","type":"number","description":"The minBubbleSize prop sets a lower limit for scaling data points in a bubble chart"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"size","type":"number | ((data: any) => number)","description":"The size prop determines how to scale each data point"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartScatter with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartScatter. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"symbol","type":"string | Function","description":"The symbol prop determines which symbol should be drawn to represent data points. Options are: \"circle\", \"cross\",\n\"diamond\", \"plus\", \"minus\", \"square\", \"star\", \"triangleDown\", \"triangleUp\"."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartScatter as a solo component, implement the theme directly on\nChartScatter. If you are wrapping ChartScatter in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartScatter.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartStack","description":"ChartStack is a wrapper component that renders a given set of children in a stacked layout. Like other wrapper\ncomponents, ChartStack also reconciles the domain and layout for all its children, and coordinates animations and\nshared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-stack/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese values for x and y. When categories are not given as an object\nWhen this prop is set on a wrapper component, it will dictate the categories of\nits the children. If this prop is not set, any categories on child component\nor catigorical data, will be merged to create a shared set of categories.\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode","description":"ChartStack works with any combination of the following children: ChartArea, ChartBar, VictoryCandlestick,\nVictoryErrorBar, ChartGroup, ChartLine, VictoryScatter, ChartStack, and ChartVoronoi. Children supplied to\nChartGroup will be cloned and rendered with new props so that all children share common props such as domain and\nscale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartStack will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na childName, target, eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, (i.e. \"data\" and \"labels\"). The childName will refer to an\nindividual child of ChartStack, either by its name prop, or by index. The eventKey\nmay optionally be used to select a single element by index or eventKey rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey and childName keys,\nand a mutation key whose value is a function. The target and eventKey and childName keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    childName: \"firstBar\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             childName: \"secondBar\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             childName: \"secondBar\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartStack uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your grouped chart. These styles will be\napplied to all grouped children"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"xOffset","type":"number","description":"The xOffset prop is used for grouping stacks of bars. This prop will be set\nby the ChartGroup component wrapper, or can be set manually."}]},{"name":"ChartThreshold","description":"CharThreshold renders a dataset as a threshold chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-line/src/victory-line.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLine: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartLine: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: [number, number] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartLine events.\nSince ChartLine only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartLine uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartLine. If individual labels are required for each\ndata point, they should be created by composing ChartLine with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"[number, number] | { x: [number, number], y: [number, number] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"DataGetterPropType","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLine with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartLine. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}","defaultValue":"{}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLine as a solo component, implement the theme directly on\nChartLine. If you are wrapping ChartLine in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getThresholdTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartLine.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Resize observer":{"id":"Resize observer","title":"Resize observer","source":"react","tabName":null,"slug":"/charts/resize-observer/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartArea","description":"ChartArea renders a dataset as a single area path. Since ChartArea renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartArea can be composed with Chart to create area charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-area/src/victory-area.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartArea: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use its default Area component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function | string[] | number[]","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartArea events.\nSince ChartArea only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartArea uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartArea. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartBar","description":"ChartBar renders a dataset as series of bars. ChartBar can be composed with Chart to create bar charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-bar/src/index.d.ts","props":[{"name":"alignment","type":"string","description":"The alignment prop specifies how bars should be aligned relative to their data points.\nThis prop may be given as “start”, “middle” or “end”. When this prop is not specified,\nbars will have “middle” alignment relative to their data points."},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"barRatio","type":"number","description":"The barRatio prop specifies an approximate ratio between bar widths and spaces between bars.\nWhen width is not specified via the barWidth prop or in bar styles, the barRatio prop will\nbe used to calculate a default width for each bar given the total number of bars in the data series\nand the overall width of the chart."},{"name":"barWidth","type":"number | Function","description":"The barWidth prop is used to specify the width of each bar. This prop may be given as\na number of pixels or as a function that returns a number. When this prop is given as\na function, it will be evaluated with the arguments datum, and active. When this value\nis not given, a default value will be calculated based on the overall dimensions of\nthe chart, and the number of bars."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartBar: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"Function | number | { top, bottom, topLeft, topRight, bottomLeft, bottomRight }","description":"The cornerRadius prop specifies a radius to apply to each bar.\nIf this prop is given as a single number, the radius will only be applied to the top of each bar.\nWhen this prop is given as a function, it will be evaluated with the arguments datum, and active.\n\n\n@example {topLeft: ({ datum }) => datum.x * 4}"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create a bar.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartBar: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use its default Bar component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for VictoryBar events.\nThe eventKey may optionally be used to select a single element by index rather than an entire\nset. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: \"thisOne\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: \"theOtherOne\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: \"theOtherOne\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartBar uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the bar. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartBar. If individual labels are required for each\ndata point, they should be created by composing ChartBar with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartBar with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartBar. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartBar as a solo component, implement the theme directly on\nChartBar. If you are wrapping ChartBar in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartBullet","description":"ChartBullet renders a dataset as a bullet chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers."},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers."},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axis component to render with the chart","defaultValue":"<ChartAxis />"},{"name":"bulletSize","type":"number","description":"Specifies the size of the bullet chart. For a horizontal chart, this adjusts bar height; although, it\ntechnically scales the underlying barWidth property.\n\nNote: Values should be >= 125, the default is 140","defaultValue":"theme.chart.height"},{"name":"comparativeErrorMeasureComponent","type":"React.ReactElement<any>","description":"The comparative error measure component to render with the chart","defaultValue":"<ChartBulletComparativeErrorMeasure />"},{"name":"comparativeErrorMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example comparativeErrorMeasureData={[{ y: 50 }]}"},{"name":"comparativeErrorMeasureDataY","type":"number | string | Function | string[]","description":"The comparativeErrorMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"comparativeErrorMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"comparativeWarningMeasureComponent","type":"React.ReactElement<any>","description":"The comparative warning measure component to render with the chart","defaultValue":"<ChartBulletComparativeWarningMeasure />"},{"name":"comparativeWarningMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example comparativeWarningMeasureData={[{ y: 50 }]}"},{"name":"comparativeWarningMeasureDataY","type":"number | string | Function | string[]","description":"The comparativeWarningMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"comparativeWarningMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"comparativeZeroMeasureComponent","type":"React.ReactElement<any>","description":"The comparative zero measure component to render with the chart","defaultValue":"<ChartBulletComparativeMeasure />"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\nNote: The x domain is expected to be `x: [0, 2]` in order to position all measures properly\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n{x: [0, 2], y: [0, 100]}","defaultValue":"getBulletDomain({\n  comparativeErrorMeasureComponent,\n  comparativeErrorMeasureData,\n  comparativeWarningMeasureComponent,\n  comparativeWarningMeasureData,\n  maxDomain,\n  minDomain,\n  primaryDotMeasureComponent,\n  primaryDotMeasureData,\n  primarySegmentedMeasureComponent,\n  primarySegmentedMeasureData,\n  qualitativeRangeComponent,\n  qualitativeRangeData\n})"},{"name":"groupSubTitle","type":"string","description":"The subtitle to render for grouped bullets"},{"name":"groupTitle","type":"string","description":"The title to render for grouped bullets"},{"name":"groupTitleComponent","type":"React.ReactElement<any>","description":"The group title component to render for grouped bullets","defaultValue":"<ChartBulletGroupTitle />"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"horizontal ? theme.chart.height : theme.chart.width"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis.","defaultValue":"true"},{"name":"invert","type":"boolean","description":"Invert the color scales used to represent primary measures and qualitative ranges.","defaultValue":"false"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property","defaultValue":"false"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.","defaultValue":"<ChartLegend />"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendItemsPerRow","type":"number","description":"The legendItemsPerRow prop determines how many items to render in each row\nof a horizontal legend, or in each column of a vertical legend. This\nprop should be given as an integer. When this prop is not given,\nlegend items will be rendered in a single row or column."},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"'bottom'"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}\n\nNote: The x domain is expected to be `x: 2` in order to position all measures properly"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}\n\nNote: The x domain is expected to be `x: 0` in order to position all measures properly"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right.\n\nNote: The underlying bullet chart is a different size than height and width. For a horizontal chart, left and right\npadding may need to be applied at (approx) 2 to 1 scale."},{"name":"primaryDotMeasureComponent","type":"React.ReactElement<any>","description":"The primary dot measure component to render with the chart","defaultValue":"<ChartBulletPrimaryDotMeasure />"},{"name":"primaryDotMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example primaryDotMeasureData={[{ y: 50 }]}"},{"name":"primaryDotMeasureDataY","type":"number | string | Function | string[]","description":"The primaryDotMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"primaryDotMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"primarySegmentedMeasureComponent","type":"React.ReactElement<any>","description":"The primary segmented measure component to render with the chart","defaultValue":"<ChartBulletPrimarySegmentedMeasure />"},{"name":"primarySegmentedMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example primarySegmentedMeasureData={[{ y: 50 }]}"},{"name":"primarySegmentedMeasureDataY","type":"number | string | Function | string[]","description":"The primarySegmentedMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"primarySegmentedMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"qualitativeRangeComponent","type":"React.ReactElement<any>","description":"The qualitative range component to render with the chart","defaultValue":"<ChartBulletQualitativeRange />"},{"name":"qualitativeRangeData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example qualitativeRangeData={[{ y: 50 }]}"},{"name":"qualitativeRangeDataY","type":"number | string | Function | string[]","description":"The qualitativeRangeDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"qualitativeRangeDataY0","type":"number | string | Function | string[]","description":"Use qualitativeRangeDataY0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"},{"name":"qualitativeRangeLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"subTitle","type":"string","description":"The subtitle for the chart"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getBulletThemeWithLegendColorScale({\n  comparativeErrorMeasureData,\n  comparativeErrorMeasureLegendData,\n  comparativeWarningMeasureData,\n  comparativeWarningMeasureLegendData,\n  invert,\n  primaryDotMeasureData,\n  primaryDotMeasureLegendData,\n  primarySegmentedMeasureData,\n  primarySegmentedMeasureLegendData,\n  qualitativeRangeData,\n  qualitativeRangeLegendData,\n  themeColor\n})"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string","description":"The title for the chart"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart title.","defaultValue":"<ChartBulletTitle />"},{"name":"titlePosition","type":"'left' | 'top-left'","description":"The title position relation to the chart. Valid values are 'left', and 'top-left'\n\nNote: These properties are only valid for horizontal layouts"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"horizontal ? theme.chart.width : theme.chart.height"}]},{"name":"ChartGroup","description":"ChartGroup is a wrapper component that renders a given set of children with some shared props. ChartGroup reconciles\nthe domain and layout for all its children, and coordinates animations and shared events. ChartGroup may also be used\nto supply common data and styles to all its children. This is especially useful when adding markers to a line, or\nadding voronoi tooltips to data. ChartGroup may also be used to apply an offset to a group of children, as with\ngrouped bar charts, or may be used to stack several components on the same level, e.g., stacked area charts with\ndata markers.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-group/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"color","type":"string","description":"The color prop is an optional prop that defines a single color to be applied to the\nchildren of ChartGroup. The color prop will override colors specified via colorScale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartGroup will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartGroup: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartGroup will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartGroup events.\nSince ChartGroup only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartGroup uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartGroup. If individual labels are required for each\ndata point, they should be created by composing ChartGroup with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"offset","type":"number","description":"The offset prop determines the number of pixels each element in a group should\nbe offset from its original position of the on the independent axis. In the\ncase of groups of bars, this number should be equal to the width of the bar\nplus the desired spacing between bars."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart,\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartGroup with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartGroup. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar or ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartLegend","description":"ChartLegend renders a chart legend component.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-legend/src/index.d.ts","props":[{"name":"borderComponent","type":"React.ReactElement<any>","description":"The borderComponent prop takes a component instance which will be responsible\nfor rendering a border around the legend. The new element created from the passed\nborderComponent will be provided with the following properties calculated by\nChartLegend: x, y, width, height, and style. Any of these props may be\noverridden by passing in props to the supplied component, or modified or ignored\nwithin the custom component itself. If a borderComponent\nis not provided, ChartLegend will use its default Border component.\nPlease note that the default width and height calculated\nfor the border component is based on approximated\ntext measurements, and may need to be adjusted."},{"name":"borderPadding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The borderPadding specifies the amount of padding that should\nbe added between the legend items and the border. This prop may be given as\na number, or asanobject with values specified for top, bottom, left, and right.\nPlease note that the default width and height calculated for the border\ncomponent is based on approximated text measurements, so padding may need to be adjusted."},{"name":"centerTitle","type":"boolean","description":"The centerTitle boolean prop specifies whether a legend title should be centered."},{"name":"colorScale","type":"string[]","description":"The colorScale prop defines a color scale to be applied to each data\nsymbol in ChartLegend. This prop should be given as an array of CSS\ncolors, or as a string corresponding to one of the built in color\nscales. Colors will repeat when there are more symbols than colors in the\nprovided colorScale."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLegend: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLegend will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"{\n  name?: string;\n  labels?: {\n    fill?: string;\n  };\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array."},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes a component instance which will be\nresponsible for rendering a data element used to associate a symbol\nor color with each data series. The new element created from the\npassed dataComponent will be provided with the following properties\ncalculated by ChartLegend: x, y, size, style, and symbol. Any of\nthese props may be overridden by passing in props to the supplied\ncomponent, or modified or ignored within the custom component itself.\nIf a dataComponent is not provided, ChartLegend will use its\ndefault Point component.","defaultValue":"<ChartPoint />"},{"name":"eventKey","type":"number | string | Function | string[]","description":"ChartLegend uses the standard eventKey prop to specify how event targets\nare addressed. This prop is not commonly used."},{"name":"events","type":"object[]","description":"ChartLegend uses the standard events prop."},{"name":"externalEventMutations","type":"object[]","description":"ChartLegend uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"gutter","type":"number | { left: number; right: number }","description":"The gutter prop defines the number of pixels between legend rows or\ncolumns, depending on orientation. When orientation is horizontal,\ngutters are between columns. When orientation is vertical, gutters\nare the space between rows."},{"name":"itemsPerRow","type":"number","description":"The itemsPerRow prop determines how many items to render in each row\nof a horizontal legend, or in each column of a vertical legend. This\nprop should be given as an integer. When this prop is not given,\nlegend items will be rendered in a single row or column."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes a component instance which will be used\nto render each legend label. The new element created from the passed\nlabelComponent will be supplied with the following properties: x, y,\nstyle, and text. Any of these props may be overridden by passing in\nprops to the supplied component, or modified or ignored within the\ncustom component itself. If labelComponent is omitted, a new\nChartLabel will be created with the props described above.","defaultValue":"<ChartLabel />"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"orientation","type":"string","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container with a viewBox\nattribute, or a static container with absolute width and height.\n\nUseful when legend is located inside a chart -- default is false.\n\nNote: Not compatible with containerComponent prop","defaultValue":"true"},{"name":"rowGutter","type":"number | { top: number, bottom: number }","description":"The rowGutter prop defines the number of pixels between legend rows.\nThis prop may be given as a number, or as an object with values\nspecified for “top” and “bottom” gutters. To set spacing between columns,\nuse the gutter prop.\n\n\n@example { top: 0, bottom: 10 }"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLegend with other components within an enclosing <svg> tag."},{"name":"style","type":"{ border: object, data: object, labels: object, parent: object, title: object }","description":"The style prop specifies styles for your pie. ChartLegend relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"symbolSpacer","type":"number","description":"The symbolSpacer prop defines the number of pixels between data\ncomponents and label components."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLegend as a solo component, implement the theme directly on\nChartLegend. If you are wrapping ChartLegend in ChartChart or\nChartGroup, please call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string | string[]","description":"The title prop specifies a title to render with the legend.\nThis prop should be given as a string, or an array of strings for multi-line titles."},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The titleComponent prop takes a component instance which will be used to render\na title for the component. The new element created from the passed label\ncomponent will be supplied with the following properties: x, y, index, data,\ndatum, verticalAnchor, textAnchor, style, text, and events. Any of these props\nmay be overridden by passing in props to the supplied component, or modified\nor ignored within the custom component itself. If labelComponent is omitted,\na new ChartLabel will be created with the props described above.","defaultValue":"<ChartLabel />"},{"name":"titleOrientation","type":"string","description":"The titleOrientation prop specifies where the title should be rendered\nin relation to the rest of the legend. Possible values\nfor this prop are “top”, “bottom”, “left”, and “right”."},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"x","type":"number","description":"The x and y props define the base position of the legend element."},{"name":"y","type":"number","description":"The x and y props define the base position of the legend element."}]},{"name":"ChartStack","description":"ChartStack is a wrapper component that renders a given set of children in a stacked layout. Like other wrapper\ncomponents, ChartStack also reconciles the domain and layout for all its children, and coordinates animations and\nshared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-stack/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese values for x and y. When categories are not given as an object\nWhen this prop is set on a wrapper component, it will dictate the categories of\nits the children. If this prop is not set, any categories on child component\nor catigorical data, will be merged to create a shared set of categories.\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode","description":"ChartStack works with any combination of the following children: ChartArea, ChartBar, VictoryCandlestick,\nVictoryErrorBar, ChartGroup, ChartLine, VictoryScatter, ChartStack, and ChartVoronoi. Children supplied to\nChartGroup will be cloned and rendered with new props so that all children share common props such as domain and\nscale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartStack will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na childName, target, eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, (i.e. \"data\" and \"labels\"). The childName will refer to an\nindividual child of ChartStack, either by its name prop, or by index. The eventKey\nmay optionally be used to select a single element by index or eventKey rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey and childName keys,\nand a mutation key whose value is a function. The target and eventKey and childName keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    childName: \"firstBar\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             childName: \"secondBar\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             childName: \"secondBar\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartStack uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your grouped chart. These styles will be\napplied to all grouped children"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"xOffset","type":"number","description":"The xOffset prop is used for grouping stacks of bars. This prop will be set\nby the ChartGroup component wrapper, or can be set manually."}]},{"name":"ChartThreshold","description":"CharThreshold renders a dataset as a threshold chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-line/src/victory-line.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLine: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartLine: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: [number, number] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartLine events.\nSince ChartLine only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartLine uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartLine. If individual labels are required for each\ndata point, they should be created by composing ChartLine with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"[number, number] | { x: [number, number], y: [number, number] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"DataGetterPropType","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLine with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartLine. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}","defaultValue":"{}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLine as a solo component, implement the theme directly on\nChartLine. If you are wrapping ChartLine in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getThresholdTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartLine.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartTooltip","description":"ChartTooltip renders a tooltip component with a set of default events. When ChartTooltip is used as a label component\nfor any Victory based component that renders data, it will attach events to rendered data components that will\nactivate the tooltip when hovered or focused. ChartTooltipTooltip renders text as well as a configurable Flyout\ncontainer.\n\nNote: When providing tooltips for ChartLine or ChartArea, it is necessary to use ChartVoronoiContainer, as these\ncomponents only render a single element for the entire dataset.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-tooltip/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When true, tooltip events will set the active prop on both data and label elements."},{"name":"active","type":"boolean","description":"The active prop specifies whether the tooltip component should be displayed."},{"name":"angle","type":"number","description":"The angle prop specifies the angle to rotate the tooltip around its origin point."},{"name":"center","type":"{ x: number; y: number }","description":"The center prop determines the position of the center of the tooltip flyout. This prop should be given as an object\nthat describes the desired x and y svg coordinates of the center of the tooltip. This prop is useful for\npositioning the flyout of a tooltip independent from the pointer. When ChartTooltip is used with\nChartVoronoiContainer, the center prop is what enables the mouseFollowTooltips option. When this prop is set,\nnon-zero pointerLength values will no longer be respected."},{"name":"centerOffset","type":"{ x: number | Function, y: number | Function }","description":"The centerOffset prop determines the position of the center of the tooltip flyout in relation to the flyout\npointer. This prop should be given as an object of x and y, where each is either a numeric offset value or a\nfunction that returns a numeric value. When this prop is set, non-zero pointerLength values will no longer be\nrespected."},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"cornerRadius","type":"number | Function","description":"The cornerRadius prop determines corner radius of the flyout container. This prop may be given as a positive number\nor a function of datum."},{"name":"data","type":"any[]","description":"Victory components can pass a data prop to their label component. This can be useful in custom components that need\nto make use of the entire dataset."},{"name":"datum","type":"{}","description":"Victory components can pass a datum prop to their label component. This can be used to calculate functional styles,\nand determine text."},{"name":"dx","type":"number | Function","description":"The dx prop defines a horizontal shift from the x coordinate."},{"name":"dy","type":"number | Function","description":"The dy prop defines a vertical shift from the y coordinate."},{"name":"events","type":"object","description":"The events prop attaches arbitrary event handlers to the label component. This prop should be given as an object of\nevent names and corresponding event handlers. When events are provided via Victory’s event system, event handlers\nwill be called with the event, the props of the component is attached to, and an eventKey.\n\n\n@example events={{onClick: (evt) => alert(\"x: \" + evt.clientX)}}"},{"name":"flyoutComponent","type":"React.ReactElement<any>","description":"The flyoutComponent prop takes a component instance which will be used to create the flyout path for each tooltip.\nThe new element created from the passed flyoutComponent will be supplied with the following properties: x, y, dx, dy,\nindex, datum, cornerRadius, pointerLength, pointerWidth, width, height, orientation, style, and events.\nAny of these props may be overridden by passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If flyoutComponent is omitted, a default Flyout component will be created with props\ndescribed above.\n\n@example flyoutComponent={<Flyout x={50} y={50}/>}, flyoutComponent={<MyCustomFlyout/>}"},{"name":"flyoutHeight","type":"number | Function","description":"The flyoutHeight prop defines the height of the tooltip flyout. This prop may be given as a positive number or a function\nof datum. If this prop is not set, height will be determined based on an approximate text size calculated from the\ntext and style props provided to ChartTooltip."},{"name":"flyoutStyle","type":"number | Function","description":"The style prop applies SVG style properties to the rendered flyout container. These props will be passed to the\nflyoutComponent."},{"name":"flyoutWidth","type":"number | Function","description":"The flyoutWidth prop defines the width of the tooltip flyout. This prop may be given as a positive number or a\nfunction of datum. If this prop is not set, flyoutWidth will be determined based on an approximate text size\ncalculated from the text and style props provided to VictoryTooltip."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes a component instance which will be used to create group elements for use within\ncontainer elements. This prop defaults to a <g> tag.}"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether to plot the flyouts to the left / right of the (x, y) coordinate rather than top / bottom.\nThis is useful when an orientation prop is not provided, and data will determine the default orientation. i.e.\nnegative values result in a left orientation and positive values will result in a right orientation by default."},{"name":"index","type":"number | string","description":"The index prop represents the index of the datum in the data array."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes a component instance which will be used to render each tooltip label. The new element\ncreated from the passed labelComponent will be supplied with the following properties: x, y, index, datum,\nverticalAnchor, textAnchor, style, text, and events. Any of these props may be overridden by passing in props to\nthe supplied component, or modified or ignored within the custom component itself. If labelComponent is omitted, a\nnew ChartLabel will be created with the props described above.\n\n@example labelComponent={<ChartLabel dy={20}/>}, labelComponent={<MyCustomLabel/>}","defaultValue":"<ChartLabel />"},{"name":"labelTextAnchor","type":"string | Function","description":"Defines how the labelComponent text is horizontally positioned relative to its `x` and `y` coordinates. Valid\nvalues are 'start', 'middle', 'end', and 'inherit'."},{"name":"orientation","type":"string | Function","description":"The orientation prop determines which side of the (x, y) coordinate the tooltip should be rendered on.\nThis prop can be given as “top”, “bottom”, “left”, “right”, or as a function of datum that returns one of these\nvalues. If this prop is not provided it will be determined from the sign of the datum, and the value of the\nhorizontal prop."},{"name":"pointerLength","type":"number | Function","description":"The pointerLength prop determines the length of the triangular pointer extending from the flyout. This prop may be\ngiven as a positive number or a function of datum."},{"name":"pointerOrientation","type":"string | Function","description":"This prop determines which side of the tooltip flyout the pointer should originate on. When this prop is not set,\nit will be determined based on the overall orientation of the flyout in relation to its data point, and any center\nor centerOffset values. Valid values are 'top', 'bottom', 'left' and 'right."},{"name":"pointerWidth","type":"number | Function","description":"The pointerWidth prop determines the width of the base of the triangular pointer extending from\nthe flyout. This prop may be given as a positive number or a function of datum."},{"name":"renderInPortal","type":"boolean","description":"When renderInPortal is true, rendered tooltips will be wrapped in VictoryPortal and rendered within the Portal element\nwithin ChartContainer. Note: This prop should not be set to true when using a custom container element."},{"name":"style","type":"React.CSSProperties | React.CSSProperties[]","description":"The style prop applies CSS properties to the rendered `<text>` element."},{"name":"text","type":"number | string | Function | string[] | number[]","description":"The text prop defines the text ChartTooltip will render. The text prop may be given as a string, number, or\nfunction of datum. When ChartLabel is used as the labelComponent, strings may include newline characters, which\nChartLabel will split in to separate <tspan/> elements."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"x","type":"number","description":"The x prop defines the x coordinate to use as a basis for horizontal positioning."},{"name":"y","type":"number","description":"The y prop defines the y coordinate to use as a basis for vertical positioning."}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Patterns":{"id":"Patterns","title":"Patterns","source":"react","tabName":null,"slug":"/charts/patterns/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartArea","description":"ChartArea renders a dataset as a single area path. Since ChartArea renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartArea can be composed with Chart to create area charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-area/src/victory-area.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartArea: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use its default Area component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function | string[] | number[]","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartArea events.\nSince ChartArea only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartArea uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartArea. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartBar","description":"ChartBar renders a dataset as series of bars. ChartBar can be composed with Chart to create bar charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-bar/src/index.d.ts","props":[{"name":"alignment","type":"string","description":"The alignment prop specifies how bars should be aligned relative to their data points.\nThis prop may be given as “start”, “middle” or “end”. When this prop is not specified,\nbars will have “middle” alignment relative to their data points."},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"barRatio","type":"number","description":"The barRatio prop specifies an approximate ratio between bar widths and spaces between bars.\nWhen width is not specified via the barWidth prop or in bar styles, the barRatio prop will\nbe used to calculate a default width for each bar given the total number of bars in the data series\nand the overall width of the chart."},{"name":"barWidth","type":"number | Function","description":"The barWidth prop is used to specify the width of each bar. This prop may be given as\na number of pixels or as a function that returns a number. When this prop is given as\na function, it will be evaluated with the arguments datum, and active. When this value\nis not given, a default value will be calculated based on the overall dimensions of\nthe chart, and the number of bars."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartBar: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"Function | number | { top, bottom, topLeft, topRight, bottomLeft, bottomRight }","description":"The cornerRadius prop specifies a radius to apply to each bar.\nIf this prop is given as a single number, the radius will only be applied to the top of each bar.\nWhen this prop is given as a function, it will be evaluated with the arguments datum, and active.\n\n\n@example {topLeft: ({ datum }) => datum.x * 4}"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create a bar.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartBar: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use its default Bar component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for VictoryBar events.\nThe eventKey may optionally be used to select a single element by index rather than an entire\nset. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: \"thisOne\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: \"theOtherOne\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: \"theOtherOne\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartBar uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the bar. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartBar. If individual labels are required for each\ndata point, they should be created by composing ChartBar with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartBar with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartBar. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartBar as a solo component, implement the theme directly on\nChartBar. If you are wrapping ChartBar in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartDonut","description":"ChartDonut renders a dataset as a donut chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"capHeight","type":"number | string | Function","description":"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\nunitless number, it is assumed to be ems.","defaultValue":"1.1"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartDonut will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartDonut: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartDonut will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonut"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of an array of data points.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartDonut; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartDonut; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartDonut's Slice component will be used."},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartDonut\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartDonut uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: When adding a legend, height (the overall SVG height) may need to be larger than donutHeight (the donut size)\nin order to accommodate the extra legend.\n\nBy default, donutHeight is the min. of either height or width. This covers most use cases in order to accommodate\nlegends within the same SVG. However, donutHeight (not height) may need to be set in order to adjust the donut height.\n\nTypically, the parent container is set to the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartDonut. If individual labels are required for each\ndata point, they should be created by composing ChartDonut with VictoryScatter"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nWhen this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartDonut with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartDonut relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"subTitle","type":"string","description":"The subtitle for the donut chart"},{"name":"subTitleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart subTitle.\n\nWhen overriding the subTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied"},{"name":"subTitlePosition","type":"'bottom' | 'center' | 'right'","description":"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'","defaultValue":"ChartDonutStyles.label.subTitlePosition"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartDonut as a solo component, implement the theme directly on\nChartDonut. If you are wrapping ChartDonut in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getDonutTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string","description":"The title for the donut chart"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart title.\n\nWhen centering both title and subTitle props, it's possible to override both styles via an array provided to\nChartLabel. The first item in the array is associated with title styles, while the second item in the array is\nassociated with subtitle styles.\n\n<pre>\nsubTitle=\"Pets\"\ntitle={100}\ntitleComponent={\n  <ChartLabel style={[{\n      fill: 'red', // title color\n      fontSize: 24\n    }, {\n      fill: 'blue', // subtitle color\n      fontSize: 14\n    }]}\n  />\n}\n</pre>\n\nIn this case, both title and subTitle will be centered together. However, should you also override the\nsubTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied","defaultValue":"<ChartLabel />"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartDonutThreshold","description":"ChartDonutThreshold renders a dataset as a donut threshold chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartDonutThreshold will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartDonutThreshold: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartDonutThreshold will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonutThreshold"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of a single data point.\nThe data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\nNote: The Y-value is expected to represent a percentage\n\n@example data={[{ x: 'Warning at 60%', y: 60 }, { x: 'Danger at 90%', y: 90 }]}","defaultValue":"[]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartDonutThreshold; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartDonutThreshold; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartDonutThreshold's Slice component will be used."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\nNote: Overridden by containerComponent\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartDonutThreshold\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartDonutThreshold uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same height in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge."},{"name":"invert","type":"boolean","description":"Invert the threshold color scale used to represent warnings, errors, etc.","defaultValue":"false"},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title","defaultValue":"[]"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartDonutThreshold with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartDonutThreshold relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"subTitle","type":"string","description":"The subtitle for the donut chart"},{"name":"subTitlePosition","type":"'bottom' | 'center' | 'right'","description":"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'","defaultValue":"ChartDonutStyles.label.subTitlePosition"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartDonutThreshold as a solo component, implement the theme directly on\nChartDonutThreshold. If you are wrapping ChartDonutThreshold in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getDonutThresholdStaticTheme(themeColor, invert)"},{"name":"title","type":"string","description":"The title for the donut chart"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartDonutUtilization","description":"ChartDonutUtilization renders a dataset as a donut utilization chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"capHeight","type":"number | string | Function","description":"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\nunitless number, it is assumed to be ems."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartDonutUtilization will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartDonutUtilization: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartDonutUtilization will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonutUtilization"},{"name":"data","type":"any","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of a single data point.\nThe data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\nNote: The Y-value is expected to represent a percentage\n\n@example data={{ x: 'GBps capacity', y: 75 }}"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartDonutUtilization; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartDonutUtilization; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartDonutUtilization's Slice component will be used."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\nNote: Overridden by containerComponent\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartDonutUtilization\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartDonutUtilization uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge."},{"name":"invert","type":"boolean","description":"Invert the threshold color scale used to represent warnings, errors, etc.\n\nInstead of showing a warning at 60% and an error at 90%; for example, this would allow users to show a warning\nbelow 60% and an error below 20%","defaultValue":"false"},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartDonutUtilization. If individual labels are required for each\ndata point, they should be created by composing ChartDonutUtilization with VictoryScatter"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nThis prop should be given as \"startAngle\", \"endAngle\", \"centroid\", or as a function that returns one of these\nvalues. When this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartDonutUtilization with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartDonutUtilization relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"subTitle","type":"string","description":"The subtitle for the donut chart label"},{"name":"subTitleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart subTitle.\n\nWhen overriding the subTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied"},{"name":"subTitlePosition","type":"'bottom' | 'center' | 'right'","description":"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartDonutUtilization as a solo component, implement the theme directly on\nChartDonutUtilization. If you are wrapping ChartDonutUtilization in ChartChart, ChartGroup, or ChartThreshold\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getDonutUtilizationTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"thresholds","type":"any[]","description":"The dynamic portion of the chart will change colors when data reaches the given threshold. Colors may be\noverridden, but defaults shall be provided.\n\n@example thresholds={[{ value: 60, color: '#F0AB00' }, { value: 90, color: '#C9190B' }]}"},{"name":"title","type":"string","description":"The title for the donut chart label"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the donut chart title.\n\nWhen centering both title and subTitle props, it's possible to override both styles via an array provided to\nChartLabel. The first item in the array is associated with title styles, while the second item in the array is\nassociated with subtitle styles.\n\n<pre>\nsubTitle=\"Pets\"\ntitle={100}\ntitleComponent={\n  <ChartLabel style={[{\n      fill: 'red', // title color\n      fontSize: 24\n    }, {\n      fill: 'blue', // subtitle color\n      fontSize: 14\n    }]}\n  />\n}\n</pre>\n\nIn this case, both title and subTitle will be centered together. However, should you also override the\nsubTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartGroup","description":"ChartGroup is a wrapper component that renders a given set of children with some shared props. ChartGroup reconciles\nthe domain and layout for all its children, and coordinates animations and shared events. ChartGroup may also be used\nto supply common data and styles to all its children. This is especially useful when adding markers to a line, or\nadding voronoi tooltips to data. ChartGroup may also be used to apply an offset to a group of children, as with\ngrouped bar charts, or may be used to stack several components on the same level, e.g., stacked area charts with\ndata markers.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-group/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"color","type":"string","description":"The color prop is an optional prop that defines a single color to be applied to the\nchildren of ChartGroup. The color prop will override colors specified via colorScale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartGroup will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartGroup: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartGroup will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartGroup events.\nSince ChartGroup only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartGroup uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartGroup. If individual labels are required for each\ndata point, they should be created by composing ChartGroup with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"offset","type":"number","description":"The offset prop determines the number of pixels each element in a group should\nbe offset from its original position of the on the independent axis. In the\ncase of groups of bars, this number should be equal to the width of the bar\nplus the desired spacing between bars."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart,\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartGroup with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartGroup. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar or ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartLegend","description":"ChartLegend renders a chart legend component.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-legend/src/index.d.ts","props":[{"name":"borderComponent","type":"React.ReactElement<any>","description":"The borderComponent prop takes a component instance which will be responsible\nfor rendering a border around the legend. The new element created from the passed\nborderComponent will be provided with the following properties calculated by\nChartLegend: x, y, width, height, and style. Any of these props may be\noverridden by passing in props to the supplied component, or modified or ignored\nwithin the custom component itself. If a borderComponent\nis not provided, ChartLegend will use its default Border component.\nPlease note that the default width and height calculated\nfor the border component is based on approximated\ntext measurements, and may need to be adjusted."},{"name":"borderPadding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The borderPadding specifies the amount of padding that should\nbe added between the legend items and the border. This prop may be given as\na number, or asanobject with values specified for top, bottom, left, and right.\nPlease note that the default width and height calculated for the border\ncomponent is based on approximated text measurements, so padding may need to be adjusted."},{"name":"centerTitle","type":"boolean","description":"The centerTitle boolean prop specifies whether a legend title should be centered."},{"name":"colorScale","type":"string[]","description":"The colorScale prop defines a color scale to be applied to each data\nsymbol in ChartLegend. This prop should be given as an array of CSS\ncolors, or as a string corresponding to one of the built in color\nscales. Colors will repeat when there are more symbols than colors in the\nprovided colorScale."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLegend: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLegend will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"{\n  name?: string;\n  labels?: {\n    fill?: string;\n  };\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array."},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes a component instance which will be\nresponsible for rendering a data element used to associate a symbol\nor color with each data series. The new element created from the\npassed dataComponent will be provided with the following properties\ncalculated by ChartLegend: x, y, size, style, and symbol. Any of\nthese props may be overridden by passing in props to the supplied\ncomponent, or modified or ignored within the custom component itself.\nIf a dataComponent is not provided, ChartLegend will use its\ndefault Point component.","defaultValue":"<ChartPoint />"},{"name":"eventKey","type":"number | string | Function | string[]","description":"ChartLegend uses the standard eventKey prop to specify how event targets\nare addressed. This prop is not commonly used."},{"name":"events","type":"object[]","description":"ChartLegend uses the standard events prop."},{"name":"externalEventMutations","type":"object[]","description":"ChartLegend uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"gutter","type":"number | { left: number; right: number }","description":"The gutter prop defines the number of pixels between legend rows or\ncolumns, depending on orientation. When orientation is horizontal,\ngutters are between columns. When orientation is vertical, gutters\nare the space between rows."},{"name":"itemsPerRow","type":"number","description":"The itemsPerRow prop determines how many items to render in each row\nof a horizontal legend, or in each column of a vertical legend. This\nprop should be given as an integer. When this prop is not given,\nlegend items will be rendered in a single row or column."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes a component instance which will be used\nto render each legend label. The new element created from the passed\nlabelComponent will be supplied with the following properties: x, y,\nstyle, and text. Any of these props may be overridden by passing in\nprops to the supplied component, or modified or ignored within the\ncustom component itself. If labelComponent is omitted, a new\nChartLabel will be created with the props described above.","defaultValue":"<ChartLabel />"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"orientation","type":"string","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container with a viewBox\nattribute, or a static container with absolute width and height.\n\nUseful when legend is located inside a chart -- default is false.\n\nNote: Not compatible with containerComponent prop","defaultValue":"true"},{"name":"rowGutter","type":"number | { top: number, bottom: number }","description":"The rowGutter prop defines the number of pixels between legend rows.\nThis prop may be given as a number, or as an object with values\nspecified for “top” and “bottom” gutters. To set spacing between columns,\nuse the gutter prop.\n\n\n@example { top: 0, bottom: 10 }"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLegend with other components within an enclosing <svg> tag."},{"name":"style","type":"{ border: object, data: object, labels: object, parent: object, title: object }","description":"The style prop specifies styles for your pie. ChartLegend relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"symbolSpacer","type":"number","description":"The symbolSpacer prop defines the number of pixels between data\ncomponents and label components."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLegend as a solo component, implement the theme directly on\nChartLegend. If you are wrapping ChartLegend in ChartChart or\nChartGroup, please call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string | string[]","description":"The title prop specifies a title to render with the legend.\nThis prop should be given as a string, or an array of strings for multi-line titles."},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The titleComponent prop takes a component instance which will be used to render\na title for the component. The new element created from the passed label\ncomponent will be supplied with the following properties: x, y, index, data,\ndatum, verticalAnchor, textAnchor, style, text, and events. Any of these props\nmay be overridden by passing in props to the supplied component, or modified\nor ignored within the custom component itself. If labelComponent is omitted,\na new ChartLabel will be created with the props described above.","defaultValue":"<ChartLabel />"},{"name":"titleOrientation","type":"string","description":"The titleOrientation prop specifies where the title should be rendered\nin relation to the rest of the legend. Possible values\nfor this prop are “top”, “bottom”, “left”, and “right”."},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"x","type":"number","description":"The x and y props define the base position of the legend element."},{"name":"y","type":"number","description":"The x and y props define the base position of the legend element."}]},{"name":"ChartLegendTooltip","description":"The ChartLegendTooltip is based on ChartCursorTooltip, which is intended to be used with a voronoi cursor\ncontainer. This works best with charts such as area and line, for example.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-tooltip/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When true, tooltip events will set the active prop on both data and label elements."},{"name":"active","type":"boolean","description":"The active prop specifies whether the tooltip component should be displayed."},{"name":"angle","type":"number","description":"The angle prop specifies the angle to rotate the tooltip around its origin point."},{"name":"center","type":"{ x: number; y: number }","description":"The center prop determines the position of the center of the tooltip flyout. This prop should be given as an object\nthat describes the desired x and y svg coordinates of the center of the tooltip. This prop is useful for\npositioning the flyout of a tooltip independent from the pointer. When ChartTooltip is used with\nChartVoronoiContainer, the center prop is what enables the mouseFollowTooltips option. When this prop is set,\nnon-zero pointerLength values will no longer be respected.","defaultValue":"{ x: 0, y: 0 }"},{"name":"centerOffset","type":"{ x: number | Function, y: number | Function }","description":"The centerOffset prop determines the position of the center of the tooltip flyout in relation to the flyout\npointer. This prop should be given as an object of x and y, where each is either a numeric offset value or a\nfunction that returns a numeric value. When this prop is set, non-zero pointerLength values will no longer be\nrespected."},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders."},{"name":"cornerRadius","type":"number | Function","description":"The cornerRadius prop determines corner radius of the flyout container. This prop may be given as a positive number\nor a function of datum."},{"name":"data","type":"any[]","description":"Victory components can pass a data prop to their label component. This can be useful in custom components that need\nto make use of the entire dataset."},{"name":"datum","type":"{}","description":"Victory components can pass a datum prop to their label component. This can be used to calculate functional styles,\nand determine text."},{"name":"dx","type":"number | Function","description":"The dx prop defines a horizontal shift from the x coordinate."},{"name":"dy","type":"number | Function","description":"The dy prop defines a vertical shift from the y coordinate."},{"name":"events","type":"object","description":"The events prop attaches arbitrary event handlers to the label component. This prop should be given as an object of\nevent names and corresponding event handlers. When events are provided via Victory’s event system, event handlers\nwill be called with the event, the props of the component is attached to, and an eventKey.\n\n\n@example events={{onClick: (evt) => alert(\"x: \" + evt.clientX)}}"},{"name":"flyoutComponent","type":"React.ReactElement<any>","description":"The flyoutComponent prop takes a component instance which will be used to create the flyout path for each tooltip.\nThe new element created from the passed flyoutComponent will be supplied with the following properties: x, y, dx, dy,\nindex, datum, cornerRadius, pointerLength, pointerWidth, width, height, orientation, style, and events.\nAny of these props may be overridden by passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If flyoutComponent is omitted, a default Flyout component will be created with props\ndescribed above.\n\n@example flyoutComponent={<Flyout x={50} y={50}/>}, flyoutComponent={<MyCustomFlyout/>}"},{"name":"flyoutHeight","type":"number | Function","description":"The flyoutHeight prop defines the height of the tooltip flyout. This prop may be given as a positive number or a function\nof datum. If this prop is not set, height will be determined based on an approximate text size calculated from the\ntext and style props provided to ChartTooltip."},{"name":"flyoutStyle","type":"number | Function","description":"The style prop applies SVG style properties to the rendered flyout container. These props will be passed to the\nflyoutComponent."},{"name":"flyoutWidth","type":"number | Function","description":"The flyoutWidth prop defines the width of the tooltip flyout. This prop may be given as a positive number or a\nfunction of datum. If this prop is not set, flyoutWidth will be determined based on an approximate text size\ncalculated from the text and style props provided to VictoryTooltip."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes a component instance which will be used to create group elements for use within\ncontainer elements. This prop defaults to a <g> tag.}"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether to plot the flyouts to the left / right of the (x, y) coordinate rather than top / bottom.\nThis is useful when an orientation prop is not provided, and data will determine the default orientation. i.e.\nnegative values result in a left orientation and positive values will result in a right orientation by default."},{"name":"index","type":"number | string","description":"The index prop represents the index of the datum in the data array."},{"name":"isCursorTooltip","type":"boolean","description":"The ChartLegendTooltip is based on ChartCursorTooltip, which is intended to be used with a voronoi cursor\ncontainer. When isCursorTooltip is true (default), ChartCursorTooltip is used. If false, ChartTooltip is used.","defaultValue":"true"},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes a component instance which will be used to render each tooltip label. The new element\ncreated from the passed labelComponent will be supplied with the following properties: x, y, index, datum,\nverticalAnchor, textAnchor, style, text, and events. Any of these props may be overridden by passing in props to\nthe supplied component, or modified or ignored within the custom component itself. If labelComponent is omitted, a\nnew ChartLabel will be created with the props described above.\n\n@example labelComponent={<ChartLabel dy={20}/>}, labelComponent={<MyCustomLabel/>}","defaultValue":"<ChartLegendTooltipContent />"},{"name":"labelTextAnchor","type":"string | Function","description":"Defines how the labelComponent text is horizontally positioned relative to its `x` and `y` coordinates. Valid\nvalues are 'start', 'middle', 'end', and 'inherit'."},{"name":"legendData","type":"{\n  childName?: string;\n  name?: string;\n  labels?: {\n    fill?: string;\n  };\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an array of objects with name (required), symbol, and\nlabels properties. The childName is used to sync the data series associated with the given chart child name.\n\nThe data prop must be given as an array.\n\n@example\n\nlegendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\nlegendData={[{ childName: `cats`, name: `Total cats` }, { childName: `dogs`, name: 'Total dogs' }]}"},{"name":"orientation","type":"string | Function","description":"The orientation prop determines which side of the (x, y) coordinate the tooltip should be rendered on.\nThis prop can be given as “top”, “bottom”, “left”, “right”, or as a function of datum that returns one of these\nvalues. If this prop is not provided it will be determined from the sign of the datum, and the value of the\nhorizontal prop."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"pointerLength","type":"number | Function","description":"The pointerLength prop determines the length of the triangular pointer extending from the flyout. This prop may be\ngiven as a positive number or a function of datum."},{"name":"pointerOrientation","type":"string | Function","description":"This prop determines which side of the tooltip flyout the pointer should originate on. When this prop is not set,\nit will be determined based on the overall orientation of the flyout in relation to its data point, and any center\nor centerOffset values. Valid values are 'top', 'bottom', 'left' and 'right."},{"name":"pointerWidth","type":"number | Function","description":"The pointerWidth prop determines the width of the base of the triangular pointer extending from\nthe flyout. This prop may be given as a positive number or a function of datum."},{"name":"renderInPortal","type":"boolean","description":"When renderInPortal is true, rendered tooltips will be wrapped in VictoryPortal and rendered within the Portal element\nwithin ChartContainer. Note: This prop should not be set to true when using a custom container element."},{"name":"style","type":"React.CSSProperties | React.CSSProperties[]","description":"The style prop applies CSS properties to the rendered `<text>` element."},{"name":"text","type":"number | string | Function | string[] | number[]","description":"The text prop defines the text ChartTooltip will render. The text prop may be given as a string, number, or\nfunction of datum. When ChartLabel is used as the labelComponent, strings may include newline characters, which\nChartLabel will split in to separate <tspan/> elements."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.\n\nNote: Theme may be overridden when flyout is rendered","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"number | string | Function | string[]","description":"The title prop specifies a title to render with the legend.\n\n\n@example title={(datum) => datum.x}"},{"name":"x","type":"number","description":"The x prop defines the x coordinate to use as a basis for horizontal positioning."},{"name":"y","type":"number","description":"The y prop defines the y coordinate to use as a basis for vertical positioning."}]},{"name":"ChartPie","description":"ChartPie renders a dataset as a pie chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartPie will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartPie: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartPie will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartPie"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of an array of data points.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartPie; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartPie; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartPie's Slice component will be used."},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartPie uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: When adding a legend, height (the overall SVG height) may need to be larger than pieHeight (the pie size)\nin order to accommodate the extra legend.\n\nBy default, pieHeight is the min. of either height or width. This covers most use cases in order to accommodate\nlegends within the same SVG. However, pieHeight (not height) may need to be set in order to adjust the pie height.\n\nTypically, the parent container is set to the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge. When this prop is set to zero\na regular pie chart is rendered."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartPie. If individual labels are required for each\ndata point, they should be created by composing ChartPie with VictoryScatter","defaultValue":"allowTooltip ? (\n  <ChartTooltip constrainToVisibleArea={constrainToVisibleArea} theme={theme} />\n) : undefined"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nThis prop should be given as \"startAngle\", \"endAngle\", \"centroid\", or as a function that returns one of these\nvalues. When this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property","defaultValue":"false"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the pie chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the final dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartPie with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartPie relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartPie as a solo component, implement the theme directly on\nChartPie. If you are wrapping ChartPie in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartScatter","description":"ChartScatter renders a dataset as a series of points. ChartScatter can be composed with Chart to create scatter plots.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-scatter/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"bubbleProperty","type":"string","description":"The bubbleProperty prop indicates which property of the data object should be used\nto scale data points in a bubble chart"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartScatter: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartScatter will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartScatter: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartScatter will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartScatter events.\nSince ChartScatter only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartScatter uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartScatter. If individual labels are required for each\ndata point, they should be created by composing ChartScatter with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxBubbleSize","type":"number","description":"The maxBubbleSize prop sets an upper limit for scaling data points in a bubble chart"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minBubbleSize","type":"number","description":"The minBubbleSize prop sets a lower limit for scaling data points in a bubble chart"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"size","type":"number | ((data: any) => number)","description":"The size prop determines how to scale each data point"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartScatter with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartScatter. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"symbol","type":"string | Function","description":"The symbol prop determines which symbol should be drawn to represent data points. Options are: \"circle\", \"cross\",\n\"diamond\", \"plus\", \"minus\", \"square\", \"star\", \"triangleDown\", \"triangleUp\"."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartScatter as a solo component, implement the theme directly on\nChartScatter. If you are wrapping ChartScatter in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartScatter.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartStack","description":"ChartStack is a wrapper component that renders a given set of children in a stacked layout. Like other wrapper\ncomponents, ChartStack also reconciles the domain and layout for all its children, and coordinates animations and\nshared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-stack/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese values for x and y. When categories are not given as an object\nWhen this prop is set on a wrapper component, it will dictate the categories of\nits the children. If this prop is not set, any categories on child component\nor catigorical data, will be merged to create a shared set of categories.\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode","description":"ChartStack works with any combination of the following children: ChartArea, ChartBar, VictoryCandlestick,\nVictoryErrorBar, ChartGroup, ChartLine, VictoryScatter, ChartStack, and ChartVoronoi. Children supplied to\nChartGroup will be cloned and rendered with new props so that all children share common props such as domain and\nscale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartStack will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na childName, target, eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, (i.e. \"data\" and \"labels\"). The childName will refer to an\nindividual child of ChartStack, either by its name prop, or by index. The eventKey\nmay optionally be used to select a single element by index or eventKey rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey and childName keys,\nand a mutation key whose value is a function. The target and eventKey and childName keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    childName: \"firstBar\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             childName: \"secondBar\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             childName: \"secondBar\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartStack uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your grouped chart. These styles will be\napplied to all grouped children"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"xOffset","type":"number","description":"The xOffset prop is used for grouping stacks of bars. This prop will be set\nby the ChartGroup component wrapper, or can be set manually."}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Tooltips":{"id":"Tooltips","title":"Tooltips","source":"react","tabName":null,"slug":"/charts/tooltips/react","propComponents":[{"name":"ChartTooltip","description":"ChartTooltip renders a tooltip component with a set of default events. When ChartTooltip is used as a label component\nfor any Victory based component that renders data, it will attach events to rendered data components that will\nactivate the tooltip when hovered or focused. ChartTooltipTooltip renders text as well as a configurable Flyout\ncontainer.\n\nNote: When providing tooltips for ChartLine or ChartArea, it is necessary to use ChartVoronoiContainer, as these\ncomponents only render a single element for the entire dataset.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-tooltip/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When true, tooltip events will set the active prop on both data and label elements."},{"name":"active","type":"boolean","description":"The active prop specifies whether the tooltip component should be displayed."},{"name":"angle","type":"number","description":"The angle prop specifies the angle to rotate the tooltip around its origin point."},{"name":"center","type":"{ x: number; y: number }","description":"The center prop determines the position of the center of the tooltip flyout. This prop should be given as an object\nthat describes the desired x and y svg coordinates of the center of the tooltip. This prop is useful for\npositioning the flyout of a tooltip independent from the pointer. When ChartTooltip is used with\nChartVoronoiContainer, the center prop is what enables the mouseFollowTooltips option. When this prop is set,\nnon-zero pointerLength values will no longer be respected."},{"name":"centerOffset","type":"{ x: number | Function, y: number | Function }","description":"The centerOffset prop determines the position of the center of the tooltip flyout in relation to the flyout\npointer. This prop should be given as an object of x and y, where each is either a numeric offset value or a\nfunction that returns a numeric value. When this prop is set, non-zero pointerLength values will no longer be\nrespected."},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"cornerRadius","type":"number | Function","description":"The cornerRadius prop determines corner radius of the flyout container. This prop may be given as a positive number\nor a function of datum."},{"name":"data","type":"any[]","description":"Victory components can pass a data prop to their label component. This can be useful in custom components that need\nto make use of the entire dataset."},{"name":"datum","type":"{}","description":"Victory components can pass a datum prop to their label component. This can be used to calculate functional styles,\nand determine text."},{"name":"dx","type":"number | Function","description":"The dx prop defines a horizontal shift from the x coordinate."},{"name":"dy","type":"number | Function","description":"The dy prop defines a vertical shift from the y coordinate."},{"name":"events","type":"object","description":"The events prop attaches arbitrary event handlers to the label component. This prop should be given as an object of\nevent names and corresponding event handlers. When events are provided via Victory’s event system, event handlers\nwill be called with the event, the props of the component is attached to, and an eventKey.\n\n\n@example events={{onClick: (evt) => alert(\"x: \" + evt.clientX)}}"},{"name":"flyoutComponent","type":"React.ReactElement<any>","description":"The flyoutComponent prop takes a component instance which will be used to create the flyout path for each tooltip.\nThe new element created from the passed flyoutComponent will be supplied with the following properties: x, y, dx, dy,\nindex, datum, cornerRadius, pointerLength, pointerWidth, width, height, orientation, style, and events.\nAny of these props may be overridden by passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If flyoutComponent is omitted, a default Flyout component will be created with props\ndescribed above.\n\n@example flyoutComponent={<Flyout x={50} y={50}/>}, flyoutComponent={<MyCustomFlyout/>}"},{"name":"flyoutHeight","type":"number | Function","description":"The flyoutHeight prop defines the height of the tooltip flyout. This prop may be given as a positive number or a function\nof datum. If this prop is not set, height will be determined based on an approximate text size calculated from the\ntext and style props provided to ChartTooltip."},{"name":"flyoutStyle","type":"number | Function","description":"The style prop applies SVG style properties to the rendered flyout container. These props will be passed to the\nflyoutComponent."},{"name":"flyoutWidth","type":"number | Function","description":"The flyoutWidth prop defines the width of the tooltip flyout. This prop may be given as a positive number or a\nfunction of datum. If this prop is not set, flyoutWidth will be determined based on an approximate text size\ncalculated from the text and style props provided to VictoryTooltip."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes a component instance which will be used to create group elements for use within\ncontainer elements. This prop defaults to a <g> tag.}"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether to plot the flyouts to the left / right of the (x, y) coordinate rather than top / bottom.\nThis is useful when an orientation prop is not provided, and data will determine the default orientation. i.e.\nnegative values result in a left orientation and positive values will result in a right orientation by default."},{"name":"index","type":"number | string","description":"The index prop represents the index of the datum in the data array."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes a component instance which will be used to render each tooltip label. The new element\ncreated from the passed labelComponent will be supplied with the following properties: x, y, index, datum,\nverticalAnchor, textAnchor, style, text, and events. Any of these props may be overridden by passing in props to\nthe supplied component, or modified or ignored within the custom component itself. If labelComponent is omitted, a\nnew ChartLabel will be created with the props described above.\n\n@example labelComponent={<ChartLabel dy={20}/>}, labelComponent={<MyCustomLabel/>}","defaultValue":"<ChartLabel />"},{"name":"labelTextAnchor","type":"string | Function","description":"Defines how the labelComponent text is horizontally positioned relative to its `x` and `y` coordinates. Valid\nvalues are 'start', 'middle', 'end', and 'inherit'."},{"name":"orientation","type":"string | Function","description":"The orientation prop determines which side of the (x, y) coordinate the tooltip should be rendered on.\nThis prop can be given as “top”, “bottom”, “left”, “right”, or as a function of datum that returns one of these\nvalues. If this prop is not provided it will be determined from the sign of the datum, and the value of the\nhorizontal prop."},{"name":"pointerLength","type":"number | Function","description":"The pointerLength prop determines the length of the triangular pointer extending from the flyout. This prop may be\ngiven as a positive number or a function of datum."},{"name":"pointerOrientation","type":"string | Function","description":"This prop determines which side of the tooltip flyout the pointer should originate on. When this prop is not set,\nit will be determined based on the overall orientation of the flyout in relation to its data point, and any center\nor centerOffset values. Valid values are 'top', 'bottom', 'left' and 'right."},{"name":"pointerWidth","type":"number | Function","description":"The pointerWidth prop determines the width of the base of the triangular pointer extending from\nthe flyout. This prop may be given as a positive number or a function of datum."},{"name":"renderInPortal","type":"boolean","description":"When renderInPortal is true, rendered tooltips will be wrapped in VictoryPortal and rendered within the Portal element\nwithin ChartContainer. Note: This prop should not be set to true when using a custom container element."},{"name":"style","type":"React.CSSProperties | React.CSSProperties[]","description":"The style prop applies CSS properties to the rendered `<text>` element."},{"name":"text","type":"number | string | Function | string[] | number[]","description":"The text prop defines the text ChartTooltip will render. The text prop may be given as a string, number, or\nfunction of datum. When ChartLabel is used as the labelComponent, strings may include newline characters, which\nChartLabel will split in to separate <tspan/> elements."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"x","type":"number","description":"The x prop defines the x coordinate to use as a basis for horizontal positioning."},{"name":"y","type":"number","description":"The y prop defines the y coordinate to use as a basis for vertical positioning."}]}]},"Threshold chart":{"id":"Threshold chart","title":"Threshold chart","source":"react","tabName":null,"slug":"/charts/threshold-chart/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartGroup","description":"ChartGroup is a wrapper component that renders a given set of children with some shared props. ChartGroup reconciles\nthe domain and layout for all its children, and coordinates animations and shared events. ChartGroup may also be used\nto supply common data and styles to all its children. This is especially useful when adding markers to a line, or\nadding voronoi tooltips to data. ChartGroup may also be used to apply an offset to a group of children, as with\ngrouped bar charts, or may be used to stack several components on the same level, e.g., stacked area charts with\ndata markers.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-group/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"color","type":"string","description":"The color prop is an optional prop that defines a single color to be applied to the\nchildren of ChartGroup. The color prop will override colors specified via colorScale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartGroup will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartGroup: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartGroup will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartGroup events.\nSince ChartGroup only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartGroup uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartGroup. If individual labels are required for each\ndata point, they should be created by composing ChartGroup with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"offset","type":"number","description":"The offset prop determines the number of pixels each element in a group should\nbe offset from its original position of the on the independent axis. In the\ncase of groups of bars, this number should be equal to the width of the bar\nplus the desired spacing between bars."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart,\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartGroup with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartGroup. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar or ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartThreshold","description":"CharThreshold renders a dataset as a threshold chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-line/src/victory-line.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLine: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartLine: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: [number, number] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartLine events.\nSince ChartLine only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartLine uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartLine. If individual labels are required for each\ndata point, they should be created by composing ChartLine with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"[number, number] | { x: [number, number], y: [number, number] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"DataGetterPropType","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLine with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartLine. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}","defaultValue":"{}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLine as a solo component, implement the theme directly on\nChartLine. If you are wrapping ChartLine in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getThresholdTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartLine.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Themes":{"id":"Themes","title":"Themes","source":"react","tabName":null,"slug":"/charts/themes/react"},"Stack chart":{"id":"Stack chart","title":"Stack chart","source":"react","tabName":null,"slug":"/charts/stack-chart/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartArea","description":"ChartArea renders a dataset as a single area path. Since ChartArea renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartArea can be composed with Chart to create area charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-area/src/victory-area.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartArea: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use its default Area component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function | string[] | number[]","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartArea events.\nSince ChartArea only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartArea uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartArea. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartBar","description":"ChartBar renders a dataset as series of bars. ChartBar can be composed with Chart to create bar charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-bar/src/index.d.ts","props":[{"name":"alignment","type":"string","description":"The alignment prop specifies how bars should be aligned relative to their data points.\nThis prop may be given as “start”, “middle” or “end”. When this prop is not specified,\nbars will have “middle” alignment relative to their data points."},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"barRatio","type":"number","description":"The barRatio prop specifies an approximate ratio between bar widths and spaces between bars.\nWhen width is not specified via the barWidth prop or in bar styles, the barRatio prop will\nbe used to calculate a default width for each bar given the total number of bars in the data series\nand the overall width of the chart."},{"name":"barWidth","type":"number | Function","description":"The barWidth prop is used to specify the width of each bar. This prop may be given as\na number of pixels or as a function that returns a number. When this prop is given as\na function, it will be evaluated with the arguments datum, and active. When this value\nis not given, a default value will be calculated based on the overall dimensions of\nthe chart, and the number of bars."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartBar: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"Function | number | { top, bottom, topLeft, topRight, bottomLeft, bottomRight }","description":"The cornerRadius prop specifies a radius to apply to each bar.\nIf this prop is given as a single number, the radius will only be applied to the top of each bar.\nWhen this prop is given as a function, it will be evaluated with the arguments datum, and active.\n\n\n@example {topLeft: ({ datum }) => datum.x * 4}"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create a bar.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartBar: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use its default Bar component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for VictoryBar events.\nThe eventKey may optionally be used to select a single element by index rather than an entire\nset. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: \"thisOne\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: \"theOtherOne\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: \"theOtherOne\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartBar uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the bar. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartBar. If individual labels are required for each\ndata point, they should be created by composing ChartBar with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartBar with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartBar. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartBar as a solo component, implement the theme directly on\nChartBar. If you are wrapping ChartBar in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartStack","description":"ChartStack is a wrapper component that renders a given set of children in a stacked layout. Like other wrapper\ncomponents, ChartStack also reconciles the domain and layout for all its children, and coordinates animations and\nshared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-stack/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese values for x and y. When categories are not given as an object\nWhen this prop is set on a wrapper component, it will dictate the categories of\nits the children. If this prop is not set, any categories on child component\nor catigorical data, will be merged to create a shared set of categories.\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode","description":"ChartStack works with any combination of the following children: ChartArea, ChartBar, VictoryCandlestick,\nVictoryErrorBar, ChartGroup, ChartLine, VictoryScatter, ChartStack, and ChartVoronoi. Children supplied to\nChartGroup will be cloned and rendered with new props so that all children share common props such as domain and\nscale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartStack will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na childName, target, eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, (i.e. \"data\" and \"labels\"). The childName will refer to an\nindividual child of ChartStack, either by its name prop, or by index. The eventKey\nmay optionally be used to select a single element by index or eventKey rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey and childName keys,\nand a mutation key whose value is a function. The target and eventKey and childName keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    childName: \"firstBar\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             childName: \"secondBar\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             childName: \"secondBar\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartStack uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your grouped chart. These styles will be\napplied to all grouped children"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"xOffset","type":"number","description":"The xOffset prop is used for grouping stacks of bars. This prop will be set\nby the ChartGroup component wrapper, or can be set manually."}]},{"name":"ChartTooltip","description":"ChartTooltip renders a tooltip component with a set of default events. When ChartTooltip is used as a label component\nfor any Victory based component that renders data, it will attach events to rendered data components that will\nactivate the tooltip when hovered or focused. ChartTooltipTooltip renders text as well as a configurable Flyout\ncontainer.\n\nNote: When providing tooltips for ChartLine or ChartArea, it is necessary to use ChartVoronoiContainer, as these\ncomponents only render a single element for the entire dataset.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-tooltip/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When true, tooltip events will set the active prop on both data and label elements."},{"name":"active","type":"boolean","description":"The active prop specifies whether the tooltip component should be displayed."},{"name":"angle","type":"number","description":"The angle prop specifies the angle to rotate the tooltip around its origin point."},{"name":"center","type":"{ x: number; y: number }","description":"The center prop determines the position of the center of the tooltip flyout. This prop should be given as an object\nthat describes the desired x and y svg coordinates of the center of the tooltip. This prop is useful for\npositioning the flyout of a tooltip independent from the pointer. When ChartTooltip is used with\nChartVoronoiContainer, the center prop is what enables the mouseFollowTooltips option. When this prop is set,\nnon-zero pointerLength values will no longer be respected."},{"name":"centerOffset","type":"{ x: number | Function, y: number | Function }","description":"The centerOffset prop determines the position of the center of the tooltip flyout in relation to the flyout\npointer. This prop should be given as an object of x and y, where each is either a numeric offset value or a\nfunction that returns a numeric value. When this prop is set, non-zero pointerLength values will no longer be\nrespected."},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"cornerRadius","type":"number | Function","description":"The cornerRadius prop determines corner radius of the flyout container. This prop may be given as a positive number\nor a function of datum."},{"name":"data","type":"any[]","description":"Victory components can pass a data prop to their label component. This can be useful in custom components that need\nto make use of the entire dataset."},{"name":"datum","type":"{}","description":"Victory components can pass a datum prop to their label component. This can be used to calculate functional styles,\nand determine text."},{"name":"dx","type":"number | Function","description":"The dx prop defines a horizontal shift from the x coordinate."},{"name":"dy","type":"number | Function","description":"The dy prop defines a vertical shift from the y coordinate."},{"name":"events","type":"object","description":"The events prop attaches arbitrary event handlers to the label component. This prop should be given as an object of\nevent names and corresponding event handlers. When events are provided via Victory’s event system, event handlers\nwill be called with the event, the props of the component is attached to, and an eventKey.\n\n\n@example events={{onClick: (evt) => alert(\"x: \" + evt.clientX)}}"},{"name":"flyoutComponent","type":"React.ReactElement<any>","description":"The flyoutComponent prop takes a component instance which will be used to create the flyout path for each tooltip.\nThe new element created from the passed flyoutComponent will be supplied with the following properties: x, y, dx, dy,\nindex, datum, cornerRadius, pointerLength, pointerWidth, width, height, orientation, style, and events.\nAny of these props may be overridden by passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If flyoutComponent is omitted, a default Flyout component will be created with props\ndescribed above.\n\n@example flyoutComponent={<Flyout x={50} y={50}/>}, flyoutComponent={<MyCustomFlyout/>}"},{"name":"flyoutHeight","type":"number | Function","description":"The flyoutHeight prop defines the height of the tooltip flyout. This prop may be given as a positive number or a function\nof datum. If this prop is not set, height will be determined based on an approximate text size calculated from the\ntext and style props provided to ChartTooltip."},{"name":"flyoutStyle","type":"number | Function","description":"The style prop applies SVG style properties to the rendered flyout container. These props will be passed to the\nflyoutComponent."},{"name":"flyoutWidth","type":"number | Function","description":"The flyoutWidth prop defines the width of the tooltip flyout. This prop may be given as a positive number or a\nfunction of datum. If this prop is not set, flyoutWidth will be determined based on an approximate text size\ncalculated from the text and style props provided to VictoryTooltip."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes a component instance which will be used to create group elements for use within\ncontainer elements. This prop defaults to a <g> tag.}"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether to plot the flyouts to the left / right of the (x, y) coordinate rather than top / bottom.\nThis is useful when an orientation prop is not provided, and data will determine the default orientation. i.e.\nnegative values result in a left orientation and positive values will result in a right orientation by default."},{"name":"index","type":"number | string","description":"The index prop represents the index of the datum in the data array."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes a component instance which will be used to render each tooltip label. The new element\ncreated from the passed labelComponent will be supplied with the following properties: x, y, index, datum,\nverticalAnchor, textAnchor, style, text, and events. Any of these props may be overridden by passing in props to\nthe supplied component, or modified or ignored within the custom component itself. If labelComponent is omitted, a\nnew ChartLabel will be created with the props described above.\n\n@example labelComponent={<ChartLabel dy={20}/>}, labelComponent={<MyCustomLabel/>}","defaultValue":"<ChartLabel />"},{"name":"labelTextAnchor","type":"string | Function","description":"Defines how the labelComponent text is horizontally positioned relative to its `x` and `y` coordinates. Valid\nvalues are 'start', 'middle', 'end', and 'inherit'."},{"name":"orientation","type":"string | Function","description":"The orientation prop determines which side of the (x, y) coordinate the tooltip should be rendered on.\nThis prop can be given as “top”, “bottom”, “left”, “right”, or as a function of datum that returns one of these\nvalues. If this prop is not provided it will be determined from the sign of the datum, and the value of the\nhorizontal prop."},{"name":"pointerLength","type":"number | Function","description":"The pointerLength prop determines the length of the triangular pointer extending from the flyout. This prop may be\ngiven as a positive number or a function of datum."},{"name":"pointerOrientation","type":"string | Function","description":"This prop determines which side of the tooltip flyout the pointer should originate on. When this prop is not set,\nit will be determined based on the overall orientation of the flyout in relation to its data point, and any center\nor centerOffset values. Valid values are 'top', 'bottom', 'left' and 'right."},{"name":"pointerWidth","type":"number | Function","description":"The pointerWidth prop determines the width of the base of the triangular pointer extending from\nthe flyout. This prop may be given as a positive number or a function of datum."},{"name":"renderInPortal","type":"boolean","description":"When renderInPortal is true, rendered tooltips will be wrapped in VictoryPortal and rendered within the Portal element\nwithin ChartContainer. Note: This prop should not be set to true when using a custom container element."},{"name":"style","type":"React.CSSProperties | React.CSSProperties[]","description":"The style prop applies CSS properties to the rendered `<text>` element."},{"name":"text","type":"number | string | Function | string[] | number[]","description":"The text prop defines the text ChartTooltip will render. The text prop may be given as a string, number, or\nfunction of datum. When ChartLabel is used as the labelComponent, strings may include newline characters, which\nChartLabel will split in to separate <tspan/> elements."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"x","type":"number","description":"The x prop defines the x coordinate to use as a basis for horizontal positioning."},{"name":"y","type":"number","description":"The y prop defines the y coordinate to use as a basis for vertical positioning."}]}]},"Scatter chart":{"id":"Scatter chart","title":"Scatter chart","source":"react","tabName":null,"slug":"/charts/scatter-chart/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartArea","description":"ChartArea renders a dataset as a single area path. Since ChartArea renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartArea can be composed with Chart to create area charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-area/src/victory-area.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartArea: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use its default Area component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function | string[] | number[]","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartArea events.\nSince ChartArea only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartArea uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartArea. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartGroup","description":"ChartGroup is a wrapper component that renders a given set of children with some shared props. ChartGroup reconciles\nthe domain and layout for all its children, and coordinates animations and shared events. ChartGroup may also be used\nto supply common data and styles to all its children. This is especially useful when adding markers to a line, or\nadding voronoi tooltips to data. ChartGroup may also be used to apply an offset to a group of children, as with\ngrouped bar charts, or may be used to stack several components on the same level, e.g., stacked area charts with\ndata markers.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-group/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"color","type":"string","description":"The color prop is an optional prop that defines a single color to be applied to the\nchildren of ChartGroup. The color prop will override colors specified via colorScale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartGroup will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartGroup: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartGroup will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartGroup events.\nSince ChartGroup only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartGroup uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartGroup. If individual labels are required for each\ndata point, they should be created by composing ChartGroup with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"offset","type":"number","description":"The offset prop determines the number of pixels each element in a group should\nbe offset from its original position of the on the independent axis. In the\ncase of groups of bars, this number should be equal to the width of the bar\nplus the desired spacing between bars."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart,\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartGroup with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartGroup. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar or ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartLine","description":"ChartLine renders a dataset as a single line path. Since ChartLine renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartLine can be composed with Chart to create line charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-line/src/victory-line.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLine: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartLine: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartLine events.\nSince ChartLine only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartLine uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartLine. If individual labels are required for each\ndata point, they should be created by composing ChartLine with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"DataGetterPropType","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLine with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartLine. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLine as a solo component, implement the theme directly on\nChartLine. If you are wrapping ChartLine in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartLine.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartScatter","description":"ChartScatter renders a dataset as a series of points. ChartScatter can be composed with Chart to create scatter plots.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-scatter/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"bubbleProperty","type":"string","description":"The bubbleProperty prop indicates which property of the data object should be used\nto scale data points in a bubble chart"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartScatter: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartScatter will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartScatter: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartScatter will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartScatter events.\nSince ChartScatter only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartScatter uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartScatter. If individual labels are required for each\ndata point, they should be created by composing ChartScatter with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxBubbleSize","type":"number","description":"The maxBubbleSize prop sets an upper limit for scaling data points in a bubble chart"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minBubbleSize","type":"number","description":"The minBubbleSize prop sets a lower limit for scaling data points in a bubble chart"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"size","type":"number | ((data: any) => number)","description":"The size prop determines how to scale each data point"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartScatter with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartScatter. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"symbol","type":"string | Function","description":"The symbol prop determines which symbol should be drawn to represent data points. Options are: \"circle\", \"cross\",\n\"diamond\", \"plus\", \"minus\", \"square\", \"star\", \"triangleDown\", \"triangleUp\"."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartScatter as a solo component, implement the theme directly on\nChartScatter. If you are wrapping ChartScatter in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartScatter.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Pie chart":{"id":"Pie chart","title":"Pie chart","source":"react","tabName":null,"slug":"/charts/pie-chart/react","propComponents":[{"name":"ChartPie","description":"ChartPie renders a dataset as a pie chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartPie will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartPie: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartPie will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartPie"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of an array of data points.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartPie; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartPie; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartPie's Slice component will be used."},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartPie uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: When adding a legend, height (the overall SVG height) may need to be larger than pieHeight (the pie size)\nin order to accommodate the extra legend.\n\nBy default, pieHeight is the min. of either height or width. This covers most use cases in order to accommodate\nlegends within the same SVG. However, pieHeight (not height) may need to be set in order to adjust the pie height.\n\nTypically, the parent container is set to the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge. When this prop is set to zero\na regular pie chart is rendered."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartPie. If individual labels are required for each\ndata point, they should be created by composing ChartPie with VictoryScatter","defaultValue":"allowTooltip ? (\n  <ChartTooltip constrainToVisibleArea={constrainToVisibleArea} theme={theme} />\n) : undefined"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nThis prop should be given as \"startAngle\", \"endAngle\", \"centroid\", or as a function that returns one of these\nvalues. When this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property","defaultValue":"false"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the pie chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the final dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartPie with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartPie relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartPie as a solo component, implement the theme directly on\nChartPie. If you are wrapping ChartPie in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]}]},"Line chart":{"id":"Line chart","title":"Line chart","source":"react","tabName":null,"slug":"/charts/line-chart/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartGroup","description":"ChartGroup is a wrapper component that renders a given set of children with some shared props. ChartGroup reconciles\nthe domain and layout for all its children, and coordinates animations and shared events. ChartGroup may also be used\nto supply common data and styles to all its children. This is especially useful when adding markers to a line, or\nadding voronoi tooltips to data. ChartGroup may also be used to apply an offset to a group of children, as with\ngrouped bar charts, or may be used to stack several components on the same level, e.g., stacked area charts with\ndata markers.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-group/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"color","type":"string","description":"The color prop is an optional prop that defines a single color to be applied to the\nchildren of ChartGroup. The color prop will override colors specified via colorScale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartGroup will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartGroup: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartGroup will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartGroup events.\nSince ChartGroup only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartGroup uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartGroup. If individual labels are required for each\ndata point, they should be created by composing ChartGroup with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"offset","type":"number","description":"The offset prop determines the number of pixels each element in a group should\nbe offset from its original position of the on the independent axis. In the\ncase of groups of bars, this number should be equal to the width of the bar\nplus the desired spacing between bars."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart,\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartGroup with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartGroup. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar or ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartLine","description":"ChartLine renders a dataset as a single line path. Since ChartLine renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartLine can be composed with Chart to create line charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-line/src/victory-line.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLine: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartLine: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartLine events.\nSince ChartLine only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartLine uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartLine. If individual labels are required for each\ndata point, they should be created by composing ChartLine with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"DataGetterPropType","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLine with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartLine. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLine as a solo component, implement the theme directly on\nChartLine. If you are wrapping ChartLine in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartLine.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Legends":{"id":"Legends","title":"Legends","source":"react","tabName":null,"slug":"/charts/legends/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartArea","description":"ChartArea renders a dataset as a single area path. Since ChartArea renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartArea can be composed with Chart to create area charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-area/src/victory-area.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartArea: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use its default Area component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function | string[] | number[]","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartArea events.\nSince ChartArea only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartArea uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartArea. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartBar","description":"ChartBar renders a dataset as series of bars. ChartBar can be composed with Chart to create bar charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-bar/src/index.d.ts","props":[{"name":"alignment","type":"string","description":"The alignment prop specifies how bars should be aligned relative to their data points.\nThis prop may be given as “start”, “middle” or “end”. When this prop is not specified,\nbars will have “middle” alignment relative to their data points."},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"barRatio","type":"number","description":"The barRatio prop specifies an approximate ratio between bar widths and spaces between bars.\nWhen width is not specified via the barWidth prop or in bar styles, the barRatio prop will\nbe used to calculate a default width for each bar given the total number of bars in the data series\nand the overall width of the chart."},{"name":"barWidth","type":"number | Function","description":"The barWidth prop is used to specify the width of each bar. This prop may be given as\na number of pixels or as a function that returns a number. When this prop is given as\na function, it will be evaluated with the arguments datum, and active. When this value\nis not given, a default value will be calculated based on the overall dimensions of\nthe chart, and the number of bars."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartBar: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"Function | number | { top, bottom, topLeft, topRight, bottomLeft, bottomRight }","description":"The cornerRadius prop specifies a radius to apply to each bar.\nIf this prop is given as a single number, the radius will only be applied to the top of each bar.\nWhen this prop is given as a function, it will be evaluated with the arguments datum, and active.\n\n\n@example {topLeft: ({ datum }) => datum.x * 4}"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create a bar.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartBar: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use its default Bar component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for VictoryBar events.\nThe eventKey may optionally be used to select a single element by index rather than an entire\nset. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: \"thisOne\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: \"theOtherOne\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: \"theOtherOne\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartBar uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the bar. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartBar. If individual labels are required for each\ndata point, they should be created by composing ChartBar with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartBar with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartBar. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartBar as a solo component, implement the theme directly on\nChartBar. If you are wrapping ChartBar in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartBullet","description":"ChartBullet renders a dataset as a bullet chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers."},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers."},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axis component to render with the chart","defaultValue":"<ChartAxis />"},{"name":"bulletSize","type":"number","description":"Specifies the size of the bullet chart. For a horizontal chart, this adjusts bar height; although, it\ntechnically scales the underlying barWidth property.\n\nNote: Values should be >= 125, the default is 140","defaultValue":"theme.chart.height"},{"name":"comparativeErrorMeasureComponent","type":"React.ReactElement<any>","description":"The comparative error measure component to render with the chart","defaultValue":"<ChartBulletComparativeErrorMeasure />"},{"name":"comparativeErrorMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example comparativeErrorMeasureData={[{ y: 50 }]}"},{"name":"comparativeErrorMeasureDataY","type":"number | string | Function | string[]","description":"The comparativeErrorMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"comparativeErrorMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"comparativeWarningMeasureComponent","type":"React.ReactElement<any>","description":"The comparative warning measure component to render with the chart","defaultValue":"<ChartBulletComparativeWarningMeasure />"},{"name":"comparativeWarningMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example comparativeWarningMeasureData={[{ y: 50 }]}"},{"name":"comparativeWarningMeasureDataY","type":"number | string | Function | string[]","description":"The comparativeWarningMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"comparativeWarningMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"comparativeZeroMeasureComponent","type":"React.ReactElement<any>","description":"The comparative zero measure component to render with the chart","defaultValue":"<ChartBulletComparativeMeasure />"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\nNote: The x domain is expected to be `x: [0, 2]` in order to position all measures properly\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n{x: [0, 2], y: [0, 100]}","defaultValue":"getBulletDomain({\n  comparativeErrorMeasureComponent,\n  comparativeErrorMeasureData,\n  comparativeWarningMeasureComponent,\n  comparativeWarningMeasureData,\n  maxDomain,\n  minDomain,\n  primaryDotMeasureComponent,\n  primaryDotMeasureData,\n  primarySegmentedMeasureComponent,\n  primarySegmentedMeasureData,\n  qualitativeRangeComponent,\n  qualitativeRangeData\n})"},{"name":"groupSubTitle","type":"string","description":"The subtitle to render for grouped bullets"},{"name":"groupTitle","type":"string","description":"The title to render for grouped bullets"},{"name":"groupTitleComponent","type":"React.ReactElement<any>","description":"The group title component to render for grouped bullets","defaultValue":"<ChartBulletGroupTitle />"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"horizontal ? theme.chart.height : theme.chart.width"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis.","defaultValue":"true"},{"name":"invert","type":"boolean","description":"Invert the color scales used to represent primary measures and qualitative ranges.","defaultValue":"false"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property","defaultValue":"false"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.","defaultValue":"<ChartLegend />"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendItemsPerRow","type":"number","description":"The legendItemsPerRow prop determines how many items to render in each row\nof a horizontal legend, or in each column of a vertical legend. This\nprop should be given as an integer. When this prop is not given,\nlegend items will be rendered in a single row or column."},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"'bottom'"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}\n\nNote: The x domain is expected to be `x: 2` in order to position all measures properly"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}\n\nNote: The x domain is expected to be `x: 0` in order to position all measures properly"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right.\n\nNote: The underlying bullet chart is a different size than height and width. For a horizontal chart, left and right\npadding may need to be applied at (approx) 2 to 1 scale."},{"name":"primaryDotMeasureComponent","type":"React.ReactElement<any>","description":"The primary dot measure component to render with the chart","defaultValue":"<ChartBulletPrimaryDotMeasure />"},{"name":"primaryDotMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example primaryDotMeasureData={[{ y: 50 }]}"},{"name":"primaryDotMeasureDataY","type":"number | string | Function | string[]","description":"The primaryDotMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"primaryDotMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"primarySegmentedMeasureComponent","type":"React.ReactElement<any>","description":"The primary segmented measure component to render with the chart","defaultValue":"<ChartBulletPrimarySegmentedMeasure />"},{"name":"primarySegmentedMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example primarySegmentedMeasureData={[{ y: 50 }]}"},{"name":"primarySegmentedMeasureDataY","type":"number | string | Function | string[]","description":"The primarySegmentedMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"primarySegmentedMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"qualitativeRangeComponent","type":"React.ReactElement<any>","description":"The qualitative range component to render with the chart","defaultValue":"<ChartBulletQualitativeRange />"},{"name":"qualitativeRangeData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example qualitativeRangeData={[{ y: 50 }]}"},{"name":"qualitativeRangeDataY","type":"number | string | Function | string[]","description":"The qualitativeRangeDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"qualitativeRangeDataY0","type":"number | string | Function | string[]","description":"Use qualitativeRangeDataY0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"},{"name":"qualitativeRangeLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"subTitle","type":"string","description":"The subtitle for the chart"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getBulletThemeWithLegendColorScale({\n  comparativeErrorMeasureData,\n  comparativeErrorMeasureLegendData,\n  comparativeWarningMeasureData,\n  comparativeWarningMeasureLegendData,\n  invert,\n  primaryDotMeasureData,\n  primaryDotMeasureLegendData,\n  primarySegmentedMeasureData,\n  primarySegmentedMeasureLegendData,\n  qualitativeRangeData,\n  qualitativeRangeLegendData,\n  themeColor\n})"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string","description":"The title for the chart"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart title.","defaultValue":"<ChartBulletTitle />"},{"name":"titlePosition","type":"'left' | 'top-left'","description":"The title position relation to the chart. Valid values are 'left', and 'top-left'\n\nNote: These properties are only valid for horizontal layouts"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"horizontal ? theme.chart.width : theme.chart.height"}]},{"name":"ChartDonut","description":"ChartDonut renders a dataset as a donut chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"capHeight","type":"number | string | Function","description":"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\nunitless number, it is assumed to be ems.","defaultValue":"1.1"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartDonut will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartDonut: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartDonut will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonut"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of an array of data points.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartDonut; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartDonut; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartDonut's Slice component will be used."},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartDonut\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartDonut uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: When adding a legend, height (the overall SVG height) may need to be larger than donutHeight (the donut size)\nin order to accommodate the extra legend.\n\nBy default, donutHeight is the min. of either height or width. This covers most use cases in order to accommodate\nlegends within the same SVG. However, donutHeight (not height) may need to be set in order to adjust the donut height.\n\nTypically, the parent container is set to the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartDonut. If individual labels are required for each\ndata point, they should be created by composing ChartDonut with VictoryScatter"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nWhen this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartDonut with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartDonut relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"subTitle","type":"string","description":"The subtitle for the donut chart"},{"name":"subTitleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart subTitle.\n\nWhen overriding the subTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied"},{"name":"subTitlePosition","type":"'bottom' | 'center' | 'right'","description":"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'","defaultValue":"ChartDonutStyles.label.subTitlePosition"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartDonut as a solo component, implement the theme directly on\nChartDonut. If you are wrapping ChartDonut in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getDonutTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string","description":"The title for the donut chart"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart title.\n\nWhen centering both title and subTitle props, it's possible to override both styles via an array provided to\nChartLabel. The first item in the array is associated with title styles, while the second item in the array is\nassociated with subtitle styles.\n\n<pre>\nsubTitle=\"Pets\"\ntitle={100}\ntitleComponent={\n  <ChartLabel style={[{\n      fill: 'red', // title color\n      fontSize: 24\n    }, {\n      fill: 'blue', // subtitle color\n      fontSize: 14\n    }]}\n  />\n}\n</pre>\n\nIn this case, both title and subTitle will be centered together. However, should you also override the\nsubTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied","defaultValue":"<ChartLabel />"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartGroup","description":"ChartGroup is a wrapper component that renders a given set of children with some shared props. ChartGroup reconciles\nthe domain and layout for all its children, and coordinates animations and shared events. ChartGroup may also be used\nto supply common data and styles to all its children. This is especially useful when adding markers to a line, or\nadding voronoi tooltips to data. ChartGroup may also be used to apply an offset to a group of children, as with\ngrouped bar charts, or may be used to stack several components on the same level, e.g., stacked area charts with\ndata markers.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-group/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"color","type":"string","description":"The color prop is an optional prop that defines a single color to be applied to the\nchildren of ChartGroup. The color prop will override colors specified via colorScale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartGroup will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartGroup: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartGroup will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartGroup events.\nSince ChartGroup only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartGroup uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartGroup. If individual labels are required for each\ndata point, they should be created by composing ChartGroup with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"offset","type":"number","description":"The offset prop determines the number of pixels each element in a group should\nbe offset from its original position of the on the independent axis. In the\ncase of groups of bars, this number should be equal to the width of the bar\nplus the desired spacing between bars."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart,\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartGroup with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartGroup. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar or ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartLabel","description":"ChartLabel renders the label components that are used across all Victory based components.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-core/src/victory-label/victory-label.tsx","props":[{"name":"active","type":"boolean","description":"The active prop specifies whether the label is active or not. The active prop is set by defaultEvents in components\nlike ChartTooltip and VictorySelectionContainer. The active prop is used when evaluating functional styles and\nprops."},{"name":"angle","type":"string | number","description":"Specifies the angle to rotate the text by."},{"name":"capHeight","type":"number | string | Function","description":"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\nunitless number, it is assumed to be ems."},{"name":"className","type":"string","description":"The className prop specifies a class name that will be applied to the rendered text element."},{"name":"data","type":"any[]","description":"Labels that apply to an entire data series will recieve the entire series as `data` instead of an individual datum\nprop."},{"name":"datum","type":"{}","description":"Victory components can pass a datum prop to their label component. This can be used to calculate functional styles,\nand determine child text"},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with accessibility for screen readers. The more\ndescriptive this title is, the more useful it will be for people using screen readers."},{"name":"direction","type":"'rtl' | 'ltr' | 'inherit'","description":"The direction prop determines which text direction to apply to the rendered text element"},{"name":"dx","type":"number | string | Function","description":"The dx prop defines a horizontal shift from the `x` coordinate."},{"name":"dy","type":"number | string | Function","description":"The dy prop defines a vertical shift from the `y` coordinate. Since this component already accounts for\n`capHeight`, `lineHeight`, and `verticalAnchor`, this will usually not be necessary."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the label component.\nEvent handlers are currently only called with their corresponding events."},{"name":"id","type":"StringOrNumberOrCallback","description":"The id prop specifies a HTML ID that will be applied to the rendered text element."},{"name":"inline","type":"boolean","description":"When the text property contains an array of strings, the inline property lets the <tspan /> elements lay out next\nto each other. If this property is not specified, the <tspan /> elements will stack vertically instead."},{"name":"labelPlacement","type":"string","description":"The labelPlacement prop is used to specify the placement of labels relative to the data point they represent.\nThis prop may be given as “vertical”, “parallel” or “perpendicular”. This props is particularly useful in polar\ncharts, where it may be desireable to position a label either parallel or perpendicular to its corresponding angle.\nWhen this prop is not set, perpendicular label placement will be used for polar charts, and vertical label\nplacement will be used for cartesian charts."},{"name":"lineHeight","type":"number | string | Function","description":"The lineHeight prop defines how much space a single line of text should take up.\nNote that SVG has no notion of line-height, so the positioning may differ slightly from what you would expect with CSS,\nbut the result is similar: a roughly equal amount of extra space is distributed above and below the line of text.\nThe value should ideally use the same units as `capHeight` and `dy`, preferably ems.\nIf given a unitless number, it is assumed to be ems."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"renderInPortal","type":"boolean","description":"The renderInPortal prop specifies whether ChartLabel should render text in place or within a VictoryPortal.\nSetting renderInPortal to true is equivalent to wrapping ChartLabel in a VictoryPortal. This prop is false by default."},{"name":"style","type":"React.CSSProperties | React.CSSProperties[]","description":"The style prop applies CSS properties to the rendered `<text>` element."},{"name":"text","type":"number | string | Function | string[]","description":"The text prop defines the text ChartLabel will render. The text prop may be given as a string, number, a function\nof datum, or an array of any of these. Strings may include newline characters, which ChartLabel will split into\nseparate <tspan/> elements. When text is given as an array, separate <tspan/> elements will be created for each\nelement in the array."},{"name":"textAnchor","type":"string | Function","description":"The textAnchor prop defines how the text is horizontally positioned relative to the given `x` and `y` coordinates.\nOptions are \"start\", \"middle\" and \"end\". Note that this overrides the style prop."},{"name":"transform","type":"string | {} | (() => string | {})","description":"The transform prop applies a transform to the rendered `<text>` element.\nIn addition to being a string, it can be an object containing transform definitions for easier authoring."},{"name":"verticalAnchor","type":"string","description":"The verticalAnchor prop defines how the text is vertically positioned relative to the given `x` and `y`\ncoordinates. Options are \"start\", \"middle\" and \"end\"."},{"name":"x","type":"number","description":"The x prop defines the x coordinate to use as a basis for horizontal positioning."},{"name":"y","type":"number","description":"The y prop defines the y coordinate to use as a basis for vertical positioning."}]},{"name":"ChartLegend","description":"ChartLegend renders a chart legend component.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-legend/src/index.d.ts","props":[{"name":"borderComponent","type":"React.ReactElement<any>","description":"The borderComponent prop takes a component instance which will be responsible\nfor rendering a border around the legend. The new element created from the passed\nborderComponent will be provided with the following properties calculated by\nChartLegend: x, y, width, height, and style. Any of these props may be\noverridden by passing in props to the supplied component, or modified or ignored\nwithin the custom component itself. If a borderComponent\nis not provided, ChartLegend will use its default Border component.\nPlease note that the default width and height calculated\nfor the border component is based on approximated\ntext measurements, and may need to be adjusted."},{"name":"borderPadding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The borderPadding specifies the amount of padding that should\nbe added between the legend items and the border. This prop may be given as\na number, or asanobject with values specified for top, bottom, left, and right.\nPlease note that the default width and height calculated for the border\ncomponent is based on approximated text measurements, so padding may need to be adjusted."},{"name":"centerTitle","type":"boolean","description":"The centerTitle boolean prop specifies whether a legend title should be centered."},{"name":"colorScale","type":"string[]","description":"The colorScale prop defines a color scale to be applied to each data\nsymbol in ChartLegend. This prop should be given as an array of CSS\ncolors, or as a string corresponding to one of the built in color\nscales. Colors will repeat when there are more symbols than colors in the\nprovided colorScale."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLegend: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLegend will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"{\n  name?: string;\n  labels?: {\n    fill?: string;\n  };\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array."},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes a component instance which will be\nresponsible for rendering a data element used to associate a symbol\nor color with each data series. The new element created from the\npassed dataComponent will be provided with the following properties\ncalculated by ChartLegend: x, y, size, style, and symbol. Any of\nthese props may be overridden by passing in props to the supplied\ncomponent, or modified or ignored within the custom component itself.\nIf a dataComponent is not provided, ChartLegend will use its\ndefault Point component.","defaultValue":"<ChartPoint />"},{"name":"eventKey","type":"number | string | Function | string[]","description":"ChartLegend uses the standard eventKey prop to specify how event targets\nare addressed. This prop is not commonly used."},{"name":"events","type":"object[]","description":"ChartLegend uses the standard events prop."},{"name":"externalEventMutations","type":"object[]","description":"ChartLegend uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"gutter","type":"number | { left: number; right: number }","description":"The gutter prop defines the number of pixels between legend rows or\ncolumns, depending on orientation. When orientation is horizontal,\ngutters are between columns. When orientation is vertical, gutters\nare the space between rows."},{"name":"itemsPerRow","type":"number","description":"The itemsPerRow prop determines how many items to render in each row\nof a horizontal legend, or in each column of a vertical legend. This\nprop should be given as an integer. When this prop is not given,\nlegend items will be rendered in a single row or column."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes a component instance which will be used\nto render each legend label. The new element created from the passed\nlabelComponent will be supplied with the following properties: x, y,\nstyle, and text. Any of these props may be overridden by passing in\nprops to the supplied component, or modified or ignored within the\ncustom component itself. If labelComponent is omitted, a new\nChartLabel will be created with the props described above.","defaultValue":"<ChartLabel />"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"orientation","type":"string","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container with a viewBox\nattribute, or a static container with absolute width and height.\n\nUseful when legend is located inside a chart -- default is false.\n\nNote: Not compatible with containerComponent prop","defaultValue":"true"},{"name":"rowGutter","type":"number | { top: number, bottom: number }","description":"The rowGutter prop defines the number of pixels between legend rows.\nThis prop may be given as a number, or as an object with values\nspecified for “top” and “bottom” gutters. To set spacing between columns,\nuse the gutter prop.\n\n\n@example { top: 0, bottom: 10 }"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLegend with other components within an enclosing <svg> tag."},{"name":"style","type":"{ border: object, data: object, labels: object, parent: object, title: object }","description":"The style prop specifies styles for your pie. ChartLegend relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"symbolSpacer","type":"number","description":"The symbolSpacer prop defines the number of pixels between data\ncomponents and label components."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLegend as a solo component, implement the theme directly on\nChartLegend. If you are wrapping ChartLegend in ChartChart or\nChartGroup, please call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string | string[]","description":"The title prop specifies a title to render with the legend.\nThis prop should be given as a string, or an array of strings for multi-line titles."},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The titleComponent prop takes a component instance which will be used to render\na title for the component. The new element created from the passed label\ncomponent will be supplied with the following properties: x, y, index, data,\ndatum, verticalAnchor, textAnchor, style, text, and events. Any of these props\nmay be overridden by passing in props to the supplied component, or modified\nor ignored within the custom component itself. If labelComponent is omitted,\na new ChartLabel will be created with the props described above.","defaultValue":"<ChartLabel />"},{"name":"titleOrientation","type":"string","description":"The titleOrientation prop specifies where the title should be rendered\nin relation to the rest of the legend. Possible values\nfor this prop are “top”, “bottom”, “left”, and “right”."},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"x","type":"number","description":"The x and y props define the base position of the legend element."},{"name":"y","type":"number","description":"The x and y props define the base position of the legend element."}]},{"name":"ChartLegendTooltip","description":"The ChartLegendTooltip is based on ChartCursorTooltip, which is intended to be used with a voronoi cursor\ncontainer. This works best with charts such as area and line, for example.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-tooltip/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When true, tooltip events will set the active prop on both data and label elements."},{"name":"active","type":"boolean","description":"The active prop specifies whether the tooltip component should be displayed."},{"name":"angle","type":"number","description":"The angle prop specifies the angle to rotate the tooltip around its origin point."},{"name":"center","type":"{ x: number; y: number }","description":"The center prop determines the position of the center of the tooltip flyout. This prop should be given as an object\nthat describes the desired x and y svg coordinates of the center of the tooltip. This prop is useful for\npositioning the flyout of a tooltip independent from the pointer. When ChartTooltip is used with\nChartVoronoiContainer, the center prop is what enables the mouseFollowTooltips option. When this prop is set,\nnon-zero pointerLength values will no longer be respected.","defaultValue":"{ x: 0, y: 0 }"},{"name":"centerOffset","type":"{ x: number | Function, y: number | Function }","description":"The centerOffset prop determines the position of the center of the tooltip flyout in relation to the flyout\npointer. This prop should be given as an object of x and y, where each is either a numeric offset value or a\nfunction that returns a numeric value. When this prop is set, non-zero pointerLength values will no longer be\nrespected."},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders."},{"name":"cornerRadius","type":"number | Function","description":"The cornerRadius prop determines corner radius of the flyout container. This prop may be given as a positive number\nor a function of datum."},{"name":"data","type":"any[]","description":"Victory components can pass a data prop to their label component. This can be useful in custom components that need\nto make use of the entire dataset."},{"name":"datum","type":"{}","description":"Victory components can pass a datum prop to their label component. This can be used to calculate functional styles,\nand determine text."},{"name":"dx","type":"number | Function","description":"The dx prop defines a horizontal shift from the x coordinate."},{"name":"dy","type":"number | Function","description":"The dy prop defines a vertical shift from the y coordinate."},{"name":"events","type":"object","description":"The events prop attaches arbitrary event handlers to the label component. This prop should be given as an object of\nevent names and corresponding event handlers. When events are provided via Victory’s event system, event handlers\nwill be called with the event, the props of the component is attached to, and an eventKey.\n\n\n@example events={{onClick: (evt) => alert(\"x: \" + evt.clientX)}}"},{"name":"flyoutComponent","type":"React.ReactElement<any>","description":"The flyoutComponent prop takes a component instance which will be used to create the flyout path for each tooltip.\nThe new element created from the passed flyoutComponent will be supplied with the following properties: x, y, dx, dy,\nindex, datum, cornerRadius, pointerLength, pointerWidth, width, height, orientation, style, and events.\nAny of these props may be overridden by passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If flyoutComponent is omitted, a default Flyout component will be created with props\ndescribed above.\n\n@example flyoutComponent={<Flyout x={50} y={50}/>}, flyoutComponent={<MyCustomFlyout/>}"},{"name":"flyoutHeight","type":"number | Function","description":"The flyoutHeight prop defines the height of the tooltip flyout. This prop may be given as a positive number or a function\nof datum. If this prop is not set, height will be determined based on an approximate text size calculated from the\ntext and style props provided to ChartTooltip."},{"name":"flyoutStyle","type":"number | Function","description":"The style prop applies SVG style properties to the rendered flyout container. These props will be passed to the\nflyoutComponent."},{"name":"flyoutWidth","type":"number | Function","description":"The flyoutWidth prop defines the width of the tooltip flyout. This prop may be given as a positive number or a\nfunction of datum. If this prop is not set, flyoutWidth will be determined based on an approximate text size\ncalculated from the text and style props provided to VictoryTooltip."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes a component instance which will be used to create group elements for use within\ncontainer elements. This prop defaults to a <g> tag.}"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether to plot the flyouts to the left / right of the (x, y) coordinate rather than top / bottom.\nThis is useful when an orientation prop is not provided, and data will determine the default orientation. i.e.\nnegative values result in a left orientation and positive values will result in a right orientation by default."},{"name":"index","type":"number | string","description":"The index prop represents the index of the datum in the data array."},{"name":"isCursorTooltip","type":"boolean","description":"The ChartLegendTooltip is based on ChartCursorTooltip, which is intended to be used with a voronoi cursor\ncontainer. When isCursorTooltip is true (default), ChartCursorTooltip is used. If false, ChartTooltip is used.","defaultValue":"true"},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes a component instance which will be used to render each tooltip label. The new element\ncreated from the passed labelComponent will be supplied with the following properties: x, y, index, datum,\nverticalAnchor, textAnchor, style, text, and events. Any of these props may be overridden by passing in props to\nthe supplied component, or modified or ignored within the custom component itself. If labelComponent is omitted, a\nnew ChartLabel will be created with the props described above.\n\n@example labelComponent={<ChartLabel dy={20}/>}, labelComponent={<MyCustomLabel/>}","defaultValue":"<ChartLegendTooltipContent />"},{"name":"labelTextAnchor","type":"string | Function","description":"Defines how the labelComponent text is horizontally positioned relative to its `x` and `y` coordinates. Valid\nvalues are 'start', 'middle', 'end', and 'inherit'."},{"name":"legendData","type":"{\n  childName?: string;\n  name?: string;\n  labels?: {\n    fill?: string;\n  };\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an array of objects with name (required), symbol, and\nlabels properties. The childName is used to sync the data series associated with the given chart child name.\n\nThe data prop must be given as an array.\n\n@example\n\nlegendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\nlegendData={[{ childName: `cats`, name: `Total cats` }, { childName: `dogs`, name: 'Total dogs' }]}"},{"name":"orientation","type":"string | Function","description":"The orientation prop determines which side of the (x, y) coordinate the tooltip should be rendered on.\nThis prop can be given as “top”, “bottom”, “left”, “right”, or as a function of datum that returns one of these\nvalues. If this prop is not provided it will be determined from the sign of the datum, and the value of the\nhorizontal prop."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"pointerLength","type":"number | Function","description":"The pointerLength prop determines the length of the triangular pointer extending from the flyout. This prop may be\ngiven as a positive number or a function of datum."},{"name":"pointerOrientation","type":"string | Function","description":"This prop determines which side of the tooltip flyout the pointer should originate on. When this prop is not set,\nit will be determined based on the overall orientation of the flyout in relation to its data point, and any center\nor centerOffset values. Valid values are 'top', 'bottom', 'left' and 'right."},{"name":"pointerWidth","type":"number | Function","description":"The pointerWidth prop determines the width of the base of the triangular pointer extending from\nthe flyout. This prop may be given as a positive number or a function of datum."},{"name":"renderInPortal","type":"boolean","description":"When renderInPortal is true, rendered tooltips will be wrapped in VictoryPortal and rendered within the Portal element\nwithin ChartContainer. Note: This prop should not be set to true when using a custom container element."},{"name":"style","type":"React.CSSProperties | React.CSSProperties[]","description":"The style prop applies CSS properties to the rendered `<text>` element."},{"name":"text","type":"number | string | Function | string[] | number[]","description":"The text prop defines the text ChartTooltip will render. The text prop may be given as a string, number, or\nfunction of datum. When ChartLabel is used as the labelComponent, strings may include newline characters, which\nChartLabel will split in to separate <tspan/> elements."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.\n\nNote: Theme may be overridden when flyout is rendered","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"number | string | Function | string[]","description":"The title prop specifies a title to render with the legend.\n\n\n@example title={(datum) => datum.x}"},{"name":"x","type":"number","description":"The x prop defines the x coordinate to use as a basis for horizontal positioning."},{"name":"y","type":"number","description":"The y prop defines the y coordinate to use as a basis for vertical positioning."}]},{"name":"ChartLine","description":"ChartLine renders a dataset as a single line path. Since ChartLine renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartLine can be composed with Chart to create line charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-line/src/victory-line.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLine: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartLine: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartLine events.\nSince ChartLine only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartLine uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartLine. If individual labels are required for each\ndata point, they should be created by composing ChartLine with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"DataGetterPropType","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLine with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartLine. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLine as a solo component, implement the theme directly on\nChartLine. If you are wrapping ChartLine in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartLine.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartPie","description":"ChartPie renders a dataset as a pie chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartPie will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartPie: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartPie will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartPie"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of an array of data points.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartPie; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartPie; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartPie's Slice component will be used."},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartPie uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: When adding a legend, height (the overall SVG height) may need to be larger than pieHeight (the pie size)\nin order to accommodate the extra legend.\n\nBy default, pieHeight is the min. of either height or width. This covers most use cases in order to accommodate\nlegends within the same SVG. However, pieHeight (not height) may need to be set in order to adjust the pie height.\n\nTypically, the parent container is set to the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge. When this prop is set to zero\na regular pie chart is rendered."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartPie. If individual labels are required for each\ndata point, they should be created by composing ChartPie with VictoryScatter","defaultValue":"allowTooltip ? (\n  <ChartTooltip constrainToVisibleArea={constrainToVisibleArea} theme={theme} />\n) : undefined"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nThis prop should be given as \"startAngle\", \"endAngle\", \"centroid\", or as a function that returns one of these\nvalues. When this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property","defaultValue":"false"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the pie chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the final dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartPie with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartPie relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartPie as a solo component, implement the theme directly on\nChartPie. If you are wrapping ChartPie in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartScatter","description":"ChartScatter renders a dataset as a series of points. ChartScatter can be composed with Chart to create scatter plots.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-scatter/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"bubbleProperty","type":"string","description":"The bubbleProperty prop indicates which property of the data object should be used\nto scale data points in a bubble chart"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartScatter: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartScatter will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartScatter: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartScatter will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartScatter events.\nSince ChartScatter only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartScatter uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartScatter. If individual labels are required for each\ndata point, they should be created by composing ChartScatter with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxBubbleSize","type":"number","description":"The maxBubbleSize prop sets an upper limit for scaling data points in a bubble chart"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minBubbleSize","type":"number","description":"The minBubbleSize prop sets a lower limit for scaling data points in a bubble chart"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"size","type":"number | ((data: any) => number)","description":"The size prop determines how to scale each data point"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartScatter with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartScatter. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"symbol","type":"string | Function","description":"The symbol prop determines which symbol should be drawn to represent data points. Options are: \"circle\", \"cross\",\n\"diamond\", \"plus\", \"minus\", \"square\", \"star\", \"triangleDown\", \"triangleUp\"."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartScatter as a solo component, implement the theme directly on\nChartScatter. If you are wrapping ChartScatter in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartScatter.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Donut utilization chart":{"id":"Donut utilization chart","title":"Donut utilization chart","source":"react","tabName":null,"slug":"/charts/donut-utilization-chart/react","propComponents":[{"name":"ChartDonutThreshold","description":"ChartDonutThreshold renders a dataset as a donut threshold chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartDonutThreshold will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartDonutThreshold: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartDonutThreshold will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonutThreshold"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of a single data point.\nThe data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\nNote: The Y-value is expected to represent a percentage\n\n@example data={[{ x: 'Warning at 60%', y: 60 }, { x: 'Danger at 90%', y: 90 }]}","defaultValue":"[]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartDonutThreshold; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartDonutThreshold; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartDonutThreshold's Slice component will be used."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\nNote: Overridden by containerComponent\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartDonutThreshold\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartDonutThreshold uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same height in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge."},{"name":"invert","type":"boolean","description":"Invert the threshold color scale used to represent warnings, errors, etc.","defaultValue":"false"},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title","defaultValue":"[]"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartDonutThreshold with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartDonutThreshold relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"subTitle","type":"string","description":"The subtitle for the donut chart"},{"name":"subTitlePosition","type":"'bottom' | 'center' | 'right'","description":"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'","defaultValue":"ChartDonutStyles.label.subTitlePosition"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartDonutThreshold as a solo component, implement the theme directly on\nChartDonutThreshold. If you are wrapping ChartDonutThreshold in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getDonutThresholdStaticTheme(themeColor, invert)"},{"name":"title","type":"string","description":"The title for the donut chart"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]},{"name":"ChartDonutUtilization","description":"ChartDonutUtilization renders a dataset as a donut utilization chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"capHeight","type":"number | string | Function","description":"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\nunitless number, it is assumed to be ems."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartDonutUtilization will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartDonutUtilization: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartDonutUtilization will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonutUtilization"},{"name":"data","type":"any","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of a single data point.\nThe data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\nNote: The Y-value is expected to represent a percentage\n\n@example data={{ x: 'GBps capacity', y: 75 }}"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartDonutUtilization; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartDonutUtilization; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartDonutUtilization's Slice component will be used."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\nNote: Overridden by containerComponent\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartDonutUtilization\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartDonutUtilization uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge."},{"name":"invert","type":"boolean","description":"Invert the threshold color scale used to represent warnings, errors, etc.\n\nInstead of showing a warning at 60% and an error at 90%; for example, this would allow users to show a warning\nbelow 60% and an error below 20%","defaultValue":"false"},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartDonutUtilization. If individual labels are required for each\ndata point, they should be created by composing ChartDonutUtilization with VictoryScatter"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nThis prop should be given as \"startAngle\", \"endAngle\", \"centroid\", or as a function that returns one of these\nvalues. When this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartDonutUtilization with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartDonutUtilization relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"subTitle","type":"string","description":"The subtitle for the donut chart label"},{"name":"subTitleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart subTitle.\n\nWhen overriding the subTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied"},{"name":"subTitlePosition","type":"'bottom' | 'center' | 'right'","description":"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartDonutUtilization as a solo component, implement the theme directly on\nChartDonutUtilization. If you are wrapping ChartDonutUtilization in ChartChart, ChartGroup, or ChartThreshold\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getDonutUtilizationTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"thresholds","type":"any[]","description":"The dynamic portion of the chart will change colors when data reaches the given threshold. Colors may be\noverridden, but defaults shall be provided.\n\n@example thresholds={[{ value: 60, color: '#F0AB00' }, { value: 90, color: '#C9190B' }]}"},{"name":"title","type":"string","description":"The title for the donut chart label"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the donut chart title.\n\nWhen centering both title and subTitle props, it's possible to override both styles via an array provided to\nChartLabel. The first item in the array is associated with title styles, while the second item in the array is\nassociated with subtitle styles.\n\n<pre>\nsubTitle=\"Pets\"\ntitle={100}\ntitleComponent={\n  <ChartLabel style={[{\n      fill: 'red', // title color\n      fontSize: 24\n    }, {\n      fill: 'blue', // subtitle color\n      fontSize: 14\n    }]}\n  />\n}\n</pre>\n\nIn this case, both title and subTitle will be centered together. However, should you also override the\nsubTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]}]},"Donut chart":{"id":"Donut chart","title":"Donut chart","source":"react","tabName":null,"slug":"/charts/donut-chart/react","propComponents":[{"name":"ChartDonut","description":"ChartDonut renders a dataset as a donut chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-pie/src/index.d.ts","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"capHeight","type":"number | string | Function","description":"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\nunitless number, it is assumed to be ems.","defaultValue":"1.1"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the pie\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartDonut will automatically assign\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\ndata object"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartDonut: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartDonut will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"number | Function","description":"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonut"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted,\nwhere data X-value is the slice label (string or number),\nand Y-value is the corresponding number value represented by the slice\nData should be in the form of an array of data points.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire, HTML-complete data component which will be used to\ncreate slices for each datum in the pie chart. The new element created from the passed\ndataComponent will have the property datum set by the pie chart for the point it renders;\nproperties style and pathFunction calculated by ChartDonut; an index property set\ncorresponding to the location of the datum in the data provided to the pie; events bound to\nthe ChartDonut; and the d3 compatible slice object.\nIf a dataComponent is not provided, ChartDonut's Slice component will be used."},{"name":"endAngle","type":"number","description":"The overall end angle of the pie in degrees. This prop is used in conjunction with\nstartAngle to create a pie that spans only a segment of a circle."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartDonut\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartDonut uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: When adding a legend, height (the overall SVG height) may need to be larger than donutHeight (the donut size)\nin order to accommodate the extra legend.\n\nBy default, donutHeight is the min. of either height or width. This covers most use cases in order to accommodate\nlegends within the same SVG. However, donutHeight (not height) may need to be set in order to adjust the donut height.\n\nTypically, the parent container is set to the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.height"},{"name":"innerRadius","type":"number | Function","description":"When creating a donut chart, this prop determines the number of pixels between\nthe center of the chart and the inner edge."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartDonut. If individual labels are required for each\ndata point, they should be created by composing ChartDonut with VictoryScatter"},{"name":"labelPosition","type":"string | Function","description":"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\nWhen this prop is not given, the label will be positioned at the centroid of each slice."},{"name":"labelRadius","type":"number | Function","description":"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\nIf this prop is not set, the label radius will default to the radius of the pie + label padding."},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data."},{"name":"legendPosition","type":"'bottom' | 'right'","description":"The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padAngle","type":"number | Function","description":"The padAngle prop determines the amount of separation between adjacent data slices\nin number of degrees"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"radius","type":"number | Function","description":"Specifies the radius of the chart. If this property is not provided it is computed\nfrom width, height, and padding props"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartDonut with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"startAngle","type":"number","description":"The overall start angle of the pie in degrees. This prop is used in conjunction with\nendAngle to create a pie that spans only a segment of a circle."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your pie. ChartDonut relies on Radium,\nso valid Radium style objects should work for this prop. Height, width, and\npadding should be specified via the height, width, and padding props.\n\n\n@example {data: {stroke: \"black\"}, label: {fontSize: 10}}"},{"name":"subTitle","type":"string","description":"The subtitle for the donut chart"},{"name":"subTitleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart subTitle.\n\nWhen overriding the subTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied"},{"name":"subTitlePosition","type":"'bottom' | 'center' | 'right'","description":"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'","defaultValue":"ChartDonutStyles.label.subTitlePosition"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartDonut as a solo component, implement the theme directly on\nChartDonut. If you are wrapping ChartDonut in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getDonutTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string","description":"The title for the donut chart"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart title.\n\nWhen centering both title and subTitle props, it's possible to override both styles via an array provided to\nChartLabel. The first item in the array is associated with title styles, while the second item in the array is\nassociated with subtitle styles.\n\n<pre>\nsubTitle=\"Pets\"\ntitle={100}\ntitleComponent={\n  <ChartLabel style={[{\n      fill: 'red', // title color\n      fontSize: 24\n    }, {\n      fill: 'blue', // subtitle color\n      fontSize: 14\n    }]}\n  />\n}\n</pre>\n\nIn this case, both title and subTitle will be centered together. However, should you also override the\nsubTitleComponent prop, title and subTitle will be centered independently. You may choose to\nuse the x and y props of ChartLabel to adjust the center position. For example:\n\n<pre>\nsubTitle=\"Pets\"\nsubTitleComponent={<ChartLabel y={130} />}\ntitle={100}\ntitleComponent={<ChartLabel y={107} />}\n</pre>\n\nNote: Default label properties may be applied","defaultValue":"<ChartLabel />"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.pie.width"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"}]}]},"Bullet chart":{"id":"Bullet chart","title":"Bullet chart","source":"react","tabName":null,"slug":"/charts/bullet-chart/react","propComponents":[{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartBullet","description":"ChartBullet renders a dataset as a bullet chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"allowTooltip","type":"boolean","description":"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\nproperty is also provided.","defaultValue":"true"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers."},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers."},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axis component to render with the chart","defaultValue":"<ChartAxis />"},{"name":"bulletSize","type":"number","description":"Specifies the size of the bullet chart. For a horizontal chart, this adjusts bar height; although, it\ntechnically scales the underlying barWidth property.\n\nNote: Values should be >= 125, the default is 140","defaultValue":"theme.chart.height"},{"name":"comparativeErrorMeasureComponent","type":"React.ReactElement<any>","description":"The comparative error measure component to render with the chart","defaultValue":"<ChartBulletComparativeErrorMeasure />"},{"name":"comparativeErrorMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example comparativeErrorMeasureData={[{ y: 50 }]}"},{"name":"comparativeErrorMeasureDataY","type":"number | string | Function | string[]","description":"The comparativeErrorMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"comparativeErrorMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"comparativeWarningMeasureComponent","type":"React.ReactElement<any>","description":"The comparative warning measure component to render with the chart","defaultValue":"<ChartBulletComparativeWarningMeasure />"},{"name":"comparativeWarningMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example comparativeWarningMeasureData={[{ y: 50 }]}"},{"name":"comparativeWarningMeasureDataY","type":"number | string | Function | string[]","description":"The comparativeWarningMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"comparativeWarningMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"comparativeZeroMeasureComponent","type":"React.ReactElement<any>","description":"The comparative zero measure component to render with the chart","defaultValue":"<ChartBulletComparativeMeasure />"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\nNote: The x domain is expected to be `x: [0, 2]` in order to position all measures properly\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n{x: [0, 2], y: [0, 100]}","defaultValue":"getBulletDomain({\n  comparativeErrorMeasureComponent,\n  comparativeErrorMeasureData,\n  comparativeWarningMeasureComponent,\n  comparativeWarningMeasureData,\n  maxDomain,\n  minDomain,\n  primaryDotMeasureComponent,\n  primaryDotMeasureData,\n  primarySegmentedMeasureComponent,\n  primarySegmentedMeasureData,\n  qualitativeRangeComponent,\n  qualitativeRangeData\n})"},{"name":"groupSubTitle","type":"string","description":"The subtitle to render for grouped bullets"},{"name":"groupTitle","type":"string","description":"The title to render for grouped bullets"},{"name":"groupTitleComponent","type":"React.ReactElement<any>","description":"The group title component to render for grouped bullets","defaultValue":"<ChartBulletGroupTitle />"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"horizontal ? theme.chart.height : theme.chart.width"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis.","defaultValue":"true"},{"name":"invert","type":"boolean","description":"Invert the color scales used to represent primary measures and qualitative ranges.","defaultValue":"false"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property","defaultValue":"false"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.","defaultValue":"<ChartLegend />"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendItemsPerRow","type":"number","description":"The legendItemsPerRow prop determines how many items to render in each row\nof a horizontal legend, or in each column of a vertical legend. This\nprop should be given as an integer. When this prop is not given,\nlegend items will be rendered in a single row or column."},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"'bottom'"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}\n\nNote: The x domain is expected to be `x: 2` in order to position all measures properly"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}\n\nNote: The x domain is expected to be `x: 0` in order to position all measures properly"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right.\n\nNote: The underlying bullet chart is a different size than height and width. For a horizontal chart, left and right\npadding may need to be applied at (approx) 2 to 1 scale."},{"name":"primaryDotMeasureComponent","type":"React.ReactElement<any>","description":"The primary dot measure component to render with the chart","defaultValue":"<ChartBulletPrimaryDotMeasure />"},{"name":"primaryDotMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example primaryDotMeasureData={[{ y: 50 }]}"},{"name":"primaryDotMeasureDataY","type":"number | string | Function | string[]","description":"The primaryDotMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"primaryDotMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"primarySegmentedMeasureComponent","type":"React.ReactElement<any>","description":"The primary segmented measure component to render with the chart","defaultValue":"<ChartBulletPrimarySegmentedMeasure />"},{"name":"primarySegmentedMeasureData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example primarySegmentedMeasureData={[{ y: 50 }]}"},{"name":"primarySegmentedMeasureDataY","type":"number | string | Function | string[]","description":"The primarySegmentedMeasureDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"primarySegmentedMeasureLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"qualitativeRangeComponent","type":"React.ReactElement<any>","description":"The qualitative range component to render with the chart","defaultValue":"<ChartBulletQualitativeRange />"},{"name":"qualitativeRangeData","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `comparativeErrorMeasureDataY` accessor prop),\nbut by default, an object with y properties is expected.\n\n@example qualitativeRangeData={[{ y: 50 }]}"},{"name":"qualitativeRangeDataY","type":"number | string | Function | string[]","description":"The qualitativeRangeDataY prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"qualitativeRangeDataY0","type":"number | string | Function | string[]","description":"Use qualitativeRangeDataY0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"},{"name":"qualitativeRangeLegendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag.","defaultValue":"true"},{"name":"subTitle","type":"string","description":"The subtitle for the chart"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getBulletThemeWithLegendColorScale({\n  comparativeErrorMeasureData,\n  comparativeErrorMeasureLegendData,\n  comparativeWarningMeasureData,\n  comparativeWarningMeasureLegendData,\n  invert,\n  primaryDotMeasureData,\n  primaryDotMeasureLegendData,\n  primarySegmentedMeasureData,\n  primarySegmentedMeasureLegendData,\n  qualitativeRangeData,\n  qualitativeRangeLegendData,\n  themeColor\n})"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string","description":"The title for the chart"},{"name":"titleComponent","type":"React.ReactElement<any>","description":"The label component to render the chart title.","defaultValue":"<ChartBulletTitle />"},{"name":"titlePosition","type":"'left' | 'top-left'","description":"The title position relation to the chart. Valid values are 'left', and 'top-left'\n\nNote: These properties are only valid for horizontal layouts"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"horizontal ? theme.chart.width : theme.chart.height"}]},{"name":"ChartContainer","description":"ChartContainer provides a top-level <svg> element for other Victory based components to render within. By default,\nChartContainer renders responsive SVGs.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-core/src/victory-container/victory-container.tsx","props":[{"name":"children","type":"React.ReactElement | React.ReactElement[]","description":"The children prop specifies the child or children that will be rendered within the container. It will be set by\nwhatever Victory component is rendering the container."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by ChartContainer"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"containerRef","type":"React.RefObject<HTMLElement>","description":"The containerRef prop may be used to attach a ref to the outermost element rendered by the container.\n\n@example containerRef={(ref) => { this.chartRef = ref; }}"},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. VictoryTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height."},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"title","type":"string","description":"The title prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers. The more descriptive this title is, the more\nuseful it will be. If no title prop is passed, it will default to Chart.\n\n@example \"Popularity of Dog Breeds by Percentage\""},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Box plot chart":{"id":"Box plot chart","title":"Box plot chart","source":"react","tabName":null,"slug":"/charts/box-plot-chart/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartBoxPlot","description":"ChartBoxPlot renders a box plot to describe the distribution of a set of data. Data for ChartBoxPlot may be given\nwith summary statistics pre-calculated (min, median, max, q1, q3), or as an array of raw data. ChartBoxPlot can be\ncomposed with Chart to create box plot charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-bar/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"boxWidth","type":"number","description":"The boxWidth prop specifies how wide each box should be. If the whiskerWidth prop is not set, this prop will also\ndetermine the width of the whisker crosshair."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartBoxPlot: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBoxPlot will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop for ChartBoxPlot may be given in a variety of formats:\n\n@example\nAs an array of standard data objects with values specified for x and y When given in this format, repeated values\nfor x will be used for calculating summary statistics\n\ndata={[\n  { x: 1, y: 2 },\n  { x: 1, y: 3 },\n  { x: 1, y: 5 },\n  { x: 2, y: 1 },\n  { x: 2, y: 4 },\n  { x: 2, y: 5 },\n  ...\n]}\n\n@example As an array of data objects where y is given as an array of values When given in this format, array values\nare used for calculating summary statistics.\n\ndata={[\n  { x: 1, y: [1, 2, 3, 5] },\n  { x: 2, y: [3, 2, 8, 10] },\n  { x: 3, y: [2, 8, 6, 5] },\n  { x: 4, y: [1, 3, 2, 9] }\n]}\n\n@example As an array of data objects with pre-calculated summary statistics(min, median, max, q1, q3) When given in\nthis format, ChartBoxPlot will not perform statistical analysis. Pre-calculating summary statistics for large\ndatasets will improve performance.\n\ndata={[\n  { x: 1, min: 2, median: 5, max: 10, q1: 3, q3: 7 },\n  { x: 2, min: 1, median: 4, max: 9, q1: 3, q3: 6 },\n  { x: 3, min: 1, median: 6, max: 12, q1: 4, q3: 10 },\n]}\n\nUse the x, y, min, max, median, q1, and q3 data accessor props to specify custom data formats."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartBoxPlot events.\nThe eventKey may optionally be used to select a single element by index rather than an entire\nset. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\n\nevents={[\n  {\n    target: \"data\",\n    eventKey: \"thisOne\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: \"theOtherOne\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: \"theOtherOne\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartBoxPlot uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelOrientation","type":"OrientationTypes | VictoryBoxPlotLabelOrientationInterface","description":"The labelOrientation prop determines where labels are placed relative to their corresponding data. If this prop is\nnot set, it will be set to \"top\" for horizontal charts, and \"right\" for vertical charts."},{"name":"labels","type":"boolean","description":"When the boolean labels prop is set to true, the values for min, max, median, q1, and q3 will be displayed for\neach box. For more granular label control, use the individual minLabels, maxLabels, medianLabels, q1Labels, and\nq3Labels props."},{"name":"max","type":"string | array[string] | function","description":"Use the max data accessor prop to define the max value of a box plot.\n\n\n@example Specify which property in an array of data objects should be used as the max value\n\nmax=\"max_value\"\n\n@example Use a function to translate each element in a data array into a max value\n\nmax={() => 10}\n\n@example Specify which property in an array of nested data objects should be used as a max value\n\nmax=\"bonds.max\", max={[\"bonds\", \"max\"]}"},{"name":"maxComponent","type":"React.ReactElement","description":"The maxComponent prop takes a component instance which will be responsible for rendering an element to represent\nthe maximum value of the box plot. The new element created from the passed maxComponent will be provided with the\nfollowing props calculated by ChartBoxPlot: datum, index, scale, style, events, majorWhisker and minorWhisker.\nThe majorWhisker and minorWhisker props are given as objects with values for x1, y1, x2 and y2 that describes the\nlines that make up the major and minor whisker. Any of these props may be overridden by passing in props to the\nsupplied component, or modified or ignored within the custom component itself. If a maxComponent is not provided,\nChartBoxPlot will use its default Whisker component."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"maxLabelComponent","type":"React.ReactElement","description":"The maxLabelComponent prop takes a component instance which will be used to render the label corresponding to the\nmaximum value for each box. The new element created from the passed maxLabelComponent will be supplied with the\nfollowing props: x, y, datum, index, scale, verticalAnchor, textAnchor, angle, transform, style and events. Any of\nthese props may be overridden by passing in props to the supplied component, or modified or ignored within the\ncustom component itself. If maxLabelComponent is omitted, a new ChartLabel will be created with props described\nabove."},{"name":"maxLabels","type":"VictoryBoxPlotLabelType","description":"The maxLabels prop defines the labels that will appear above each point. This prop should be given as a boolean,\nan array or as a function of the props corresponding to that label. When given as a boolean value, the max value\nof each datum will be used for the label.\n\n@example\n\nmaxLabels={[\"first\", \"second\", \"third\"]}\nmaxLabels={({ datum }) => Math.round(datum.max)}"},{"name":"median","type":"string | array[string] | function","description":"Use the median data accessor prop to define the median value of a box plot.\n\n\n@example Specify which property in an array of data objects should be used as the median value\n\nmedian=\"median_value\"\n\n@example Use a function to translate each element in a data array into a median value\n\nmedian={() => 10}\n\n@example Specify which property in an array of nested data objects should be used as a median value\n\nmedian=\"bonds.median\", median={[\"bonds\", \"median\"]}"},{"name":"medianComponent","type":"React.ReactElement","description":"The medianComponent prop takes a component instance which will be responsible for rendering an element to represent\nthe median value of the box plot. The new element created from the passed medianComponent will be provided with the\nfollowing props calculated by ChartBoxPlot: datum, index, scale, style, events, x1, y1, x2 and y2 Any of these\nprops may be overridden by passing in props to the supplied component, or modified or ignored within the custom\ncomponent itself. If a medianComponent is not provided, ChartBoxPlot will use its default Line component."},{"name":"medianLabelComponent","type":"React.ReactElement","description":"The medianLabelComponent prop takes a component instance which will be used to render the label corresponding to\nthe median value for each box. The new element created from the passed medianLabelComponent will be supplied with\nthe following props: x, y, datum, index, scale, verticalAnchor, textAnchor, angle, transform, style and events. Any\nof these props may be overridden by passing in props to the supplied component, or modified or ignored within the\ncustom component itself. If medianLabelComponent is omitted, a new ChartLabel will be created with props\ndescribed above."},{"name":"medianLabels","type":"string | function | boolean","description":"The medianLabels prop defines the labels that will appear above each point. This prop should be given as a boolean,\nan array or as a function of the props corresponding to that label. When given as a boolean value, the median value\nof each datum will be used for the label.\n\n\n@example\n\nmedianLabels={[\"first\", \"second\", \"third\"]}\nmedianLabels={({ datum }) => Math.round(datum.median)}"},{"name":"min","type":"string | array[string] | function","description":"Use the min data accessor prop to define the min value of a box plot.\n\n\n@example Specify which property in an array of data objects should be used as the min value\n\nmin=\"min_value\"\n\n@example Use a function to translate each element in a data array into a min value\n\nmin={() => 10}\n\n@example Specify which property in an array of nested data objects should be used as a min value\n\nmin=\"bonds.min\", min={[\"bonds\", \"min\"]}"},{"name":"minComponent","type":"React.ReactElement","description":"The minComponent prop takes a component instance which will be responsible for rendering an element to represent\nthe minimum value of the box plot. The new element created from the passed minComponent will be provided with the\nfollowing props calculated by ChartBoxPlot: datum, index, scale, style, events, majorWhisker and minorWhisker.\nThe majorWhisker and minorWhisker props are given as objects with values for x1, y1, x2 and y2 that describes the\nlines that make up the major and minor whisker. Any of these props may be overridden by passing in props to the\nsupplied component, or modified or ignored within the custom component itself. If a minComponent is not provided,\nChartBoxPlot will use its default Whisker component."},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"minLabelComponent","type":"React.ReactElement","description":"The minLabelComponent prop takes a component instance which will be used to render the label corresponding to the\nminimum value for each box. The new element created from the passed minLabelComponent will be supplied with the\nfollowing props: x, y, datum, index, scale, verticalAnchor, textAnchor, angle, transform, style and events. Any of\nthese props may be overridden by passing in props to the supplied component, or modified or ignored within the\ncustom component itself. If minLabelComponent is omitted, a new ChartLabel will be created with props described\nabove."},{"name":"minLabels","type":"string | function | boolean","description":"The minLabels prop defines the labels that will appear above each point. This prop should be given as a boolean, an\narray or as a function of the props corresponding to that label. When given as a boolean value, the min value of\neach datum will be used for the label.\n\n\n@example\n\nminLabels={[\"first\", \"second\", \"third\"]}\nminLabels={({ datum }) => Math.round(datum.min)}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"q1","type":"string | array[string] | function","description":"Use the q1 data accessor prop to define the q1 value of a box plot.\n\n\n@example Specify which property in an array of data objects should be used as the q1 value\n\nq1=\"q1_value\"\n\n@example Use a function to translate each element in a data array into a q1 value\n\nq1={() => 10}\n\n@example Specify which property in an array of nested data objects should be used as a q1 value\n\nq1=\"bonds.q1\", q1={[\"bonds\", \"q1\"]}"},{"name":"q1Component","type":"React.ReactElement","description":"The q1Component prop takes a component instance which will be responsible for rendering an element to represent the\nq1 value of the box plot. The new element created from the passed q1Component will be provided with the following\nprops calculated by ChartBoxPlot: datum, index, scale, style, events, x, y, width and height Any of these props\nmay be overridden by passing in props to the supplied component, or modified or ignored within the custom component\nitself. If a q1Component is not provided, ChartBoxPlot will use its default Box component."},{"name":"q1LabelComponent","type":"React.ReactElement","description":"The q1LabelComponent prop takes a component instance which will be used to render the label corresponding to the q1\nvalue for each box. The new element created from the passed q1LabelComponent will be supplied with the following\nprops: x, y, datum, index, scale, verticalAnchor, textAnchor, angle, transform, style and events. Any of these\nprops may be overridden by passing in props to the supplied component, or modified or ignored within the custom\ncomponent itself. If q1LabelComponent is omitted, a new ChartLabel will be created with props described above."},{"name":"q1Labels","type":"string | function | boolean","description":"The q1Labels prop defines the labels that will appear above each point. This prop should be given as a boolean, an\narray or as a function of the props corresponding to that label. When given as a boolean value, the q1 value of\neach datum will be used for the label.\n\n\n@example\n\nq1Labels={[\"first\", \"second\", \"third\"]}\nq1Labels={({ datum }) => Math.round(datum.q1)}"},{"name":"q3","type":"string | array[string] | function","description":"Use the q3 data accessor prop to define the q3 value of a box plot.\n\n\n@example Specify which property in an array of data objects should be used as the q3 value\n\nq3=\"q3_value\"\n\n@example Use a function to translate each element in a data array into a q3 value\n\nq3={() => 10}\n\n@example Specify which property in an array of nested data objects should be used as a q3 value\n\nq3=\"bonds.q3\", q3={[\"bonds\", \"q3\"]}"},{"name":"q3Component","type":"React.ReactElement","description":"The q3Component prop takes a component instance which will be responsible for rendering an element to represent the\nq3 value of the box plot. The new element created from the passed q3Component will be provided with the following\nprops calculated by ChartBoxPlot: datum, index, scale, style, events, x, y, width and height Any of these props\nmay be overridden by passing in props to the supplied component, or modified or ignored within the custom component\nitself. If a q3Component is not provided, ChartBoxPlot will use its default Box component."},{"name":"q3LabelComponent","type":"React.ReactElement","description":"The q3LabelComponent prop takes a component instance which will be used to render the label corresponding to the q3\nvalue for each box. The new element created from the passed q3LabelComponent will be supplied with the following\nprops: x, y, datum, index, scale, verticalAnchor, textAnchor, angle, transform, style and events. Any of these\nprops may be overridden by passing in props to the supplied component, or modified or ignored within the custom\ncomponent itself. If q3LabelComponent is omitted, a new ChartLabel will be created with props described above."},{"name":"q3Labels","type":"string | function | boolean","description":"The q3Labels prop defines the labels that will appear above each point. This prop should be given as a boolean, an\narray or as a function of the props corresponding to that label. When given as a boolean value, the q3 value of\neach datum will be used for the label.\n\n\n@example\n\nq3Labels={[\"first\", \"second\", \"third\"]}\nq3Labels={({ datum }) => Math.round(datum.q3)}"},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartBoxPlot with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartBoxPlot. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartBoxPlot as a solo component, implement the theme directly on\nChartBoxPlot. If you are wrapping ChartBoxPlot in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"whiskerWidth","type":"number","description":"The whiskerWidth prop specifies how wide each whisker crosshair should be. If the whiskerWidth prop is not set, the\nwidth of the whisker crosshair will match the width of the box."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBoxPlot.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartCursorFlyout","description":"","props":[{"name":"center","type":"{\n  x: number;\n  y: number;\n}","description":""},{"name":"cornerRadius","type":"number","description":""},{"name":"datum","type":"object","description":""},{"name":"dx","type":"number","description":""},{"name":"dy","type":"number","description":""},{"name":"height","type":"number","description":""},{"name":"orientation","type":"OrientationTypes","description":""},{"name":"pathComponent","type":"React.ReactElement","description":"","defaultValue":"<Path />"},{"name":"pointerLength","type":"number","description":""},{"name":"pointerWidth","type":"number","description":""},{"name":"role","type":"No type info","defaultValue":"'presentation'"},{"name":"shapeRendering","type":"No type info","defaultValue":"'auto'"},{"name":"width","type":"number","description":""},{"name":"x","type":"number","description":""},{"name":"y","type":"number","description":""}]},{"name":"ChartCursorTooltip","description":"This tooltip has default values intended for use with a cursor container.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-tooltip/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When true, tooltip events will set the active prop on both data and label elements."},{"name":"active","type":"boolean","description":"The active prop specifies whether the tooltip component should be displayed."},{"name":"angle","type":"number","description":"The angle prop specifies the angle to rotate the tooltip around its origin point."},{"name":"center","type":"{ x: number; y: number }","description":"The center prop determines the position of the center of the tooltip flyout. This prop should be given as an object\nthat describes the desired x and y svg coordinates of the center of the tooltip. This prop is useful for\npositioning the flyout of a tooltip independent from the pointer. When ChartTooltip is used with\nChartVoronoiContainer, the center prop is what enables the mouseFollowTooltips option. When this prop is set,\nnon-zero pointerLength values will no longer be respected."},{"name":"centerOffset","type":"{ x: number | Function, y: number | Function }","description":"The centerOffset prop determines the position of the center of the tooltip flyout in relation to the flyout\npointer. This prop should be given as an object of x and y, where each is either a numeric offset value or a\nfunction that returns a numeric value. When this prop is set, non-zero pointerLength values will no longer be\nrespected.","defaultValue":"getCursorTooltipCenterOffset({ offsetCursorDimensionX: true, theme })"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"true"},{"name":"cornerRadius","type":"number | Function","description":"The cornerRadius prop determines corner radius of the flyout container. This prop may be given as a positive number\nor a function of datum."},{"name":"data","type":"any[]","description":"Victory components can pass a data prop to their label component. This can be useful in custom components that need\nto make use of the entire dataset."},{"name":"datum","type":"{}","description":"Victory components can pass a datum prop to their label component. This can be used to calculate functional styles,\nand determine text."},{"name":"dx","type":"number | Function","description":"The dx prop defines a horizontal shift from the x coordinate."},{"name":"dy","type":"number | Function","description":"The dy prop defines a vertical shift from the y coordinate."},{"name":"events","type":"object","description":"The events prop attaches arbitrary event handlers to the label component. This prop should be given as an object of\nevent names and corresponding event handlers. When events are provided via Victory’s event system, event handlers\nwill be called with the event, the props of the component is attached to, and an eventKey.\n\n\n@example events={{onClick: (evt) => alert(\"x: \" + evt.clientX)}}"},{"name":"flyoutComponent","type":"React.ReactElement<any>","description":"The flyoutComponent prop takes a component instance which will be used to create the flyout path for each tooltip.\nThe new element created from the passed flyoutComponent will be supplied with the following properties: x, y, dx, dy,\nindex, datum, cornerRadius, pointerLength, pointerWidth, width, height, orientation, style, and events.\nAny of these props may be overridden by passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If flyoutComponent is omitted, a default Flyout component will be created with props\ndescribed above.\n\n@example flyoutComponent={<Flyout x={50} y={50}/>}, flyoutComponent={<MyCustomFlyout/>}","defaultValue":"<ChartCursorFlyout />"},{"name":"flyoutHeight","type":"number | Function","description":"The flyoutHeight prop defines the height of the tooltip flyout. This prop may be given as a positive number or a function\nof datum. If this prop is not set, height will be determined based on an approximate text size calculated from the\ntext and style props provided to ChartTooltip."},{"name":"flyoutStyle","type":"object","description":"The style prop applies SVG style properties to the rendered flyout container. These props will be passed to the\nflyoutComponent."},{"name":"flyoutWidth","type":"number | Function","description":"The flyoutWidth prop defines the width of the tooltip flyout. This prop may be given as a positive number or a\nfunction of datum. If this prop is not set, flyoutWidth will be determined based on an approximate text size\ncalculated from the text and style props provided to VictoryTooltip."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes a component instance which will be used to create group elements for use within\ncontainer elements. This prop defaults to a <g> tag.}"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether to plot the flyouts to the left / right of the (x, y) coordinate rather than top / bottom.\nThis is useful when an orientation prop is not provided, and data will determine the default orientation. i.e.\nnegative values result in a left orientation and positive values will result in a right orientation by default."},{"name":"index","type":"number | string","description":"The index prop represents the index of the datum in the data array."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes a component instance which will be used to render each tooltip label. The new element\ncreated from the passed labelComponent will be supplied with the following properties: x, y, index, datum,\nverticalAnchor, textAnchor, style, text, and events. Any of these props may be overridden by passing in props to\nthe supplied component, or modified or ignored within the custom component itself. If labelComponent is omitted, a\nnew ChartLabel will be created with the props described above.\n\n@example labelComponent={<ChartLabel dy={20}/>}, labelComponent={<MyCustomLabel/>}"},{"name":"labelTextAnchor","type":"string | Function","description":"Defines how the labelComponent text is horizontally positioned relative to its `x` and `y` coordinates. Valid\nvalues are 'start' (default), 'middle', 'end', and 'inherit'. Note that this overrides the style prop.","defaultValue":"'start'"},{"name":"orientation","type":"string | Function","description":"The orientation prop determines which side of the (x, y) coordinate the tooltip should be rendered on.\nThis prop can be given as “top”, “bottom”, “left”, “right”, or as a function of datum that returns one of these\nvalues. If this prop is not provided it will be determined from the sign of the datum, and the value of the\nhorizontal prop."},{"name":"pointerLength","type":"number | Function","description":"The pointerLength prop determines the length of the triangular pointer extending from the flyout. This prop may be\ngiven as a positive number or a function of datum.","defaultValue":"showPointer && theme && theme.tooltip ? theme.tooltip.pointerLength : 0"},{"name":"pointerOrientation","type":"string | Function","description":"This prop determines which side of the tooltip flyout the pointer should originate on. When this prop is not set,\nit will be determined based on the overall orientation of the flyout in relation to its data point, and any center\nor centerOffset values. Valid values are 'top', 'bottom', 'left' and 'right.","defaultValue":"getCursorTooltipPoniterOrientation({ horizontal: true, theme })"},{"name":"pointerWidth","type":"number | Function","description":"The pointerWidth prop determines the width of the base of the triangular pointer extending from\nthe flyout. This prop may be given as a positive number or a function of datum.","defaultValue":"(theme.tooltip as any).pointerWidth"},{"name":"renderInPortal","type":"boolean","description":"When renderInPortal is true, rendered tooltips will be wrapped in VictoryPortal and rendered within the Portal element\nwithin ChartContainer. Note: This prop should not be set to true when using a custom container element."},{"name":"showPointer","type":"boolean","description":"Flag to force flyout pointer to be shown. Victory provides pointerLength=0 when using a voronoi container with\nvoronoiDimension=\"x\"","defaultValue":"true"},{"name":"style","type":"React.CSSProperties | React.CSSProperties[]","description":"The style prop applies CSS properties to the rendered `<text>` element."},{"name":"text","type":"number | string | Function | string[] | number[]","description":"The text prop defines the text ChartTooltip will render. The text prop may be given as a string, number, or\nfunction of datum. When ChartLabel is used as the labelComponent, strings may include newline characters, which\nChartLabel will split in to separate <tspan/> elements."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"x","type":"number","description":"The x prop defines the x coordinate to use as a basis for horizontal positioning."},{"name":"y","type":"number","description":"The y prop defines the y coordinate to use as a basis for vertical positioning."}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Bar chart":{"id":"Bar chart","title":"Bar chart","source":"react","tabName":null,"slug":"/charts/bar-chart/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartBar","description":"ChartBar renders a dataset as series of bars. ChartBar can be composed with Chart to create bar charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-bar/src/index.d.ts","props":[{"name":"alignment","type":"string","description":"The alignment prop specifies how bars should be aligned relative to their data points.\nThis prop may be given as “start”, “middle” or “end”. When this prop is not specified,\nbars will have “middle” alignment relative to their data points."},{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"barRatio","type":"number","description":"The barRatio prop specifies an approximate ratio between bar widths and spaces between bars.\nWhen width is not specified via the barWidth prop or in bar styles, the barRatio prop will\nbe used to calculate a default width for each bar given the total number of bars in the data series\nand the overall width of the chart."},{"name":"barWidth","type":"number | Function","description":"The barWidth prop is used to specify the width of each bar. This prop may be given as\na number of pixels or as a function that returns a number. When this prop is given as\na function, it will be evaluated with the arguments datum, and active. When this value\nis not given, a default value will be calculated based on the overall dimensions of\nthe chart, and the number of bars."},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartBar: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"cornerRadius","type":"Function | number | { top, bottom, topLeft, topRight, bottomLeft, bottomRight }","description":"The cornerRadius prop specifies a radius to apply to each bar.\nIf this prop is given as a single number, the radius will only be applied to the top of each bar.\nWhen this prop is given as a function, it will be evaluated with the arguments datum, and active.\n\n\n@example {topLeft: ({ datum }) => datum.x * 4}"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create a bar.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartBar: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartBar will use its default Bar component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for VictoryBar events.\nThe eventKey may optionally be used to select a single element by index rather than an entire\nset. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: \"thisOne\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: \"theOtherOne\",\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: \"theOtherOne\",\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartBar uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether the bars will be laid vertically or\nhorizontally. The bars will be vertical if this prop is false or unspecified,\nor horizontal if the prop is set to true."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the bar. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartBar. If individual labels are required for each\ndata point, they should be created by composing ChartBar with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartBar with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartBar. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartBar as a solo component, implement the theme directly on\nChartBar. If you are wrapping ChartBar in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartGroup","description":"ChartGroup is a wrapper component that renders a given set of children with some shared props. ChartGroup reconciles\nthe domain and layout for all its children, and coordinates animations and shared events. ChartGroup may also be used\nto supply common data and styles to all its children. This is especially useful when adding markers to a line, or\nadding voronoi tooltips to data. ChartGroup may also be used to apply an offset to a group of children, as with\ngrouped bar charts, or may be used to stack several components on the same level, e.g., stacked area charts with\ndata markers.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-group/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"color","type":"string","description":"The color prop is an optional prop that defines a single color to be applied to the\nchildren of ChartGroup. The color prop will override colors specified via colorScale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartGroup will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartGroup: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartGroup will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartGroup events.\nSince ChartGroup only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartGroup uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartGroup. If individual labels are required for each\ndata point, they should be created by composing ChartGroup with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"offset","type":"number","description":"The offset prop determines the number of pixels each element in a group should\nbe offset from its original position of the on the independent axis. In the\ncase of groups of bars, this number should be equal to the width of the bar\nplus the desired spacing between bars."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart,\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartGroup with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartGroup. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar or ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Area chart":{"id":"Area chart","title":"Area chart","source":"react","tabName":null,"slug":"/charts/area-chart/react","propComponents":[{"name":"Chart","description":"Chart is a wrapper component that reconciles the domain for all its children, controls the layout of the chart,\nand coordinates animations and shared events.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-chart/src/victory-chart.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"backgroundComponent","type":"React.ReactElement","description":"The backgroundComponent prop takes a component instance which will be responsible for rendering a background if the\nChart's style component includes background styles. The new element created from the passed backgroundComponent\nwill be provided with the following properties calculated by Chart: height, polar, scale, style, x, y, width.\nAll of these props on Background should take prececence over what VictoryChart is trying to set."},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will include. This prop can be\ngiven as a array of the minimum and maximum expected values for your chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"endAngle","type":"number","description":"The endAngle props defines the overall end angle of a polar chart in degrees. This prop is used in conjunction with\nstartAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the chart.\nThis prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position, and\nproceeding counterclockwise."},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop takes an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartPie\nevents. The eventKey may optionally be used to select a single element by index rather than\nan entire set. The eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a single bar), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventKey: 1,\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             eventKey: 2,\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             eventKey: 2,\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"Chart uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.height"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally. When this prop is set to true, the\nindependent variable will be plotted on the y axis and the dependent variable will be plotted on the x axis."},{"name":"innerRadius","type":"number | Function","description":"When the innerRadius prop is set, polar charts will be hollow rather than circular."},{"name":"legendAllowWrap","type":"boolean | ((extraHeight: number) => void)","description":"Allows legend items to wrap onto the next line if the chart is not wide enough.\n\nNote that the chart's SVG height and width are 100% by default, so it can be responsive itself. However, if you\ndefine the height and width of the chart's parent container, you must accommodate for extra legend height due to\nlegend items wrapping onto the next line. When the height of the chart's parent container is too small, some legend\nitems may not be visible.\n\nAlternatively, a callback function may be provided, which will be called after the legend's itemsPerRow property\nhas been calculated. The value provided can be used to increase the chart's parent container height as legend\nitems wrap onto the next line. If no adjustment is necessary, the value will be zero.\n\nNote: This is overridden by the legendItemsPerRow property"},{"name":"legendComponent","type":"React.ReactElement<any>","description":"The legend component to render with chart.\n\nNote: Use legendData so the legend width can be calculated and positioned properly.\nDefault legend properties may be applied","defaultValue":"<ChartLegend />"},{"name":"legendData","type":"{\n  name?: string;\n  symbol?: {\n    fill?: string;\n    type?: string;\n  };\n}[]","description":"Specify data via the data prop. ChartLegend expects data as an\narray of objects with name (required), symbol, and labels properties.\nThe data prop must be given as an array.\n\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}"},{"name":"legendDirection","type":"'ltr' | 'rtl'","description":"Text direction of the legend labels.","defaultValue":"'ltr'"},{"name":"legendOrientation","type":"'horizontal' | 'vertical'","description":"The orientation prop takes a string that defines whether legend data\nare displayed in a row or column. When orientation is \"horizontal\",\nlegend items will be displayed in a single row. When orientation is\n\"vertical\", legend items will be displayed in a single column. Line\nand text-wrapping is not currently supported, so \"vertical\"\norientation is both the default setting and recommended for\ndisplaying many series of data.","defaultValue":"theme.legend.orientation"},{"name":"legendPosition","type":"'bottom' | 'bottom-left' | 'right'","description":"The legend position relation to the chart. Valid values are 'bottom', 'bottom-left', and 'right'\n\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\ncases, the legend may not be visible until enough padding is applied.","defaultValue":"ChartCommonStyles.legend.position"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showAxis","type":"boolean","description":"Convenience prop to hide both x and y axis, which are shown by default. Alternatively, the axis can be hidden via\nchart styles.","defaultValue":"true"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose Chart with other components within an enclosing <svg> tag."},{"name":"startAngle","type":"number","description":"The startAngle props defines the overall start angle of a polar chart in degrees. This prop is used in conjunction\nwith endAngle to create polar chart that spans only a segment of a circle, or to change overall rotation of the\nchart. This prop should be given as a number of degrees. Degrees are defined as starting at the 3 o'clock position,\nand proceeding counterclockwise."},{"name":"style","type":"{ parent: object, background: object }","description":"The style prop defines the style of the component. The style prop should be given as an object with styles defined\nfor data, labels and parent. Any valid svg styles are supported, but width, height, and padding should be specified\nvia props as they determine relative layout for components in Chart.\n\n\n@propType { parent: object, background: object }"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getChartTheme(themeColor, showAxis)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\nto the same width in order to maintain the aspect ratio.","defaultValue":"theme.chart.width"}]},{"name":"ChartArea","description":"ChartArea renders a dataset as a single area path. Since ChartArea renders only a single element to represent a\ndataset rather than individual elements for each data point, some of its behavior is different from other Victory\nbased components. Pay special attention to style and events props, and take advantage of ChartVoronoiContainer to\nenable tooltips. ChartArea can be composed with Chart to create area charts.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-area/src/victory-area.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartArea: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example\n\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartArea: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartArea will use its default Area component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function | string[] | number[]","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartArea events.\nSince ChartArea only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartArea uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartArea. If individual labels are required for each\ndata point, they should be created by composing ChartArea with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartArea with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartArea. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartArea as a solo component, implement the theme directly on\nChartArea. If you are wrapping ChartArea in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartAxis","description":"ChartAxis renders a single axis which can be used on its own or composed with Chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-axis/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"axisComponent","type":"React.ReactElement<any>","description":"The axisComponent prop takes in an entire component which will be used\nto create the axis line. The new element created from the passed axisComponent\nwill be supplied with the following properties: x1, y1, x2, y2, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If an axisComponent\nis not supplied, ChartAxis will render its default AxisLine component."},{"name":"axisLabelComponent","type":"React.ReactElement<any>","description":"The axisLabelComponent prop takes in an entire component which will be used\nto create the axis label. The new element created from the passed axisLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, transform, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an axisLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"axisValue","type":"number | string | object | Date","description":"The axisValue prop may be used instead of axisAngle to position the dependent axis. Ths prop is useful when\ndependent axes should line up with values on the independent axis."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartAxis: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartAxis will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows ...\" />","defaultValue":"<ChartContainer />"},{"name":"crossAxis","type":"boolean","description":"This prop specifies whether a given axis is intended to cross another axis."},{"name":"dependentAxis","type":"boolean","description":"The dependentAxis prop specifies whether the axis corresponds to the\ndependent variable (usually y). This prop is useful when composing axis\nwith other components to form a chart."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your axis will include. This prop should be\ngiven as a array of the minimum and maximum expected values for your axis.\nIf this value is not given it will be calculated based on the scale or tickValues.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"axis\", \"axisLabel\", \"ticks\", \"tickLabels\", and \"grid\" are\nall valid targets for ChartAxis events. The eventKey may optionally be used to select a\nsingle element by index rather than an entire set. The eventHandlers object\nshould be given as an object whose keys are standard event names (i.e. onClick)\nand whose values are event callbacks. The return value of an event handler\nbe used to modify other elemnts. The return value should be given as an object or\nan array of objects with optional target and eventKey keys, and a mutation\nkey whose value is a function. The target and eventKey keys will default to those\ncorresponding to the element the event handler was attached to. The mutation\nfunction will be called with the calculated props for the individual selected\nelement (i.e. a single tick), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"grid\",\n    eventKey: 2,\n    eventHandlers: {\n      onClick: () => {\n        return [\n          {\n            mutation: (props) => {\n              return {style: merge({}, props.style, {stroke: \"orange\"})};\n            }\n          }, {\n            target: \"tickLabels\",\n            mutation: () => {\n              return {text: \"hey\"};\n            }\n          }\n        ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartAxis uses the standard externalEventMutations prop."},{"name":"fixLabelOverlap","type":"boolean","description":"When true, this prop reduces the number of tick labels to fit the length of the axis.\nLabels are removed at approximately even intervals from the original array of labels.\nThis feature only works well for labels that are approximately evenly spaced."},{"name":"gridComponent","type":"React.ReactElement<any>","description":"The gridComponent prop takes in an entire component which will be used\nto create grid lines. The new element created from the passed gridComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a gridComponent\nis not supplied, ChartAxis will render its default GridLine component."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"Specifies the height the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into."},{"name":"invertAxis","type":"boolean","description":"If true, this value will flip the domain of a given axis."},{"name":"label","type":"any","description":"The label prop defines the label that will appear along the axis. This\nprop should be given as a value or an entire, HTML-complete label\ncomponent. If a label component is given, it will be cloned. The new\nelement's properties x, y, textAnchor, verticalAnchor, and transform\nwill have defaults provided by the axis; styles filled out with\ndefaults provided by the axis, and overrides from the label component.\nIf a value is given, a new ChartLabel will be created with props and\nstyles from the axis."},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is typically used to reference a component instance when defining shared events. However, this\noptional prop may also be applied to child elements as an ID prefix. This is a workaround to ensure Victory\nbased components output unique IDs when multiple charts appear in a page."},{"name":"offsetX","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the x-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"offsetY","type":"number","description":"This value describes how far from the \"edge\" of its permitted area each axis\nwill be set back in the y-direction.  If this prop is not given,\nthe offset is calculated based on font size, axis orientation, and label padding."},{"name":"orientation","type":"string","description":"The orientation prop specifies the position and orientation of your axis.\nValid values are 'top', 'bottom', 'left' and 'right'."},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart, ChartStack, or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"showGrid","type":"boolean","description":"Show axis grid and ticks","defaultValue":"false"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartAxis with other components within an enclosing <svg> tag."},{"name":"style","type":"{ axis: object, axisLabel: object, grid: object, ticks: object, tickLabels: object }","description":"The style prop defines the style of the component. The style prop should be given as an object\nwith styles defined for parent, axis, axisLabel, grid, ticks, and tickLabels. Any valid svg\nstyles are supported, but width, height, and padding should be specified via props as they\ndetermine relative layout for components in Chart. Functional styles may be defined for\ngrid, tick, and tickLabel style properties, and they will be evaluated with each tick.\n\nNote: When a component is rendered as a child of another Victory component, or within a custom\n<svg> element with standalone={false} parent styles will be applied to the enclosing <g> tag.\nMany styles that can be applied to a parent <svg> will not be expressed when applied to a <g>.\n\nNote: custom angle and verticalAnchor properties may be included in labels styles."},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartAxis as a solo component, implement the theme directly on\nChartAxis. If you are wrapping ChartAxis in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"tickComponent","type":"React.ReactElement<any>","description":"The tickComponent prop takes in an entire component which will be used\nto create tick lines. The new element created from the passed tickComponent\nwill be supplied with the following properties: x1, y1, x2, y2, tick, style and events.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a tickComponent\nis not supplied, ChartAxis will render its default Tick component."},{"name":"tickCount","type":"number","description":"The tickCount prop specifies approximately how many ticks should be drawn on the axis if\ntickValues are not explicitly provided. This value is calculated by d3 scale and\nprioritizes returning \"nice\" values and evenly spaced ticks over an exact number of ticks.\nIf you need an exact number of ticks, please specify them via the tickValues prop.\nThis prop must have a value greater than zero."},{"name":"tickFormat","type":"any[] | ((tick: any, index: number, ticks: any[]) => string | number)","description":"The tickFormat prop specifies how tick values should be expressed visually.\ntickFormat can be given as a function to be applied to every tickValue, or as\nan array of display values for each tickValue.\n\n@example d3.time.format(\"%Y\"), (x) => x.toPrecision(2), [\"first\", \"second\", \"third\"]"},{"name":"tickLabelComponent","type":"React.ReactElement<any>","description":"The tickLabelComponent prop takes in an entire component which will be used\nto create the tick labels. The new element created from the passed tickLabelComponent\nwill be supplied with the following properties: x, y, verticalAnchor, textAnchor,\nangle, tick, style and events. Any of these props may be overridden by\npassing in props to the supplied component, or modified or ignored within\nthe custom component itself. If an tickLabelComponent is not supplied, a new\nChartLabel will be created with props described above","defaultValue":"<ChartLabel />"},{"name":"tickValues","type":"any[]","description":"The tickValues prop explicitly specifies which tick values to draw on the axis.\n\n@example [\"apples\", \"bananas\", \"oranges\"], [2, 4, 6, 8]"},{"name":"width","type":"number","description":"Specifies the width of the svg viewBox of the chart container. This value should be given as a\nnumber of pixels.\n\nBecause Victory renders responsive containers, the width and height props do not determine the width and\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\npixels will depend on the size of the container the chart is rendered into.\n\nNote: innerRadius may need to be set when using this property."}]},{"name":"ChartGroup","description":"ChartGroup is a wrapper component that renders a given set of children with some shared props. ChartGroup reconciles\nthe domain and layout for all its children, and coordinates animations and shared events. ChartGroup may also be used\nto supply common data and styles to all its children. This is especially useful when adding markers to a line, or\nadding voronoi tooltips to data. ChartGroup may also be used to apply an offset to a group of children, as with\ngrouped bar charts, or may be used to stack several components on the same level, e.g., stacked area charts with\ndata markers.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-group/src/index.d.ts","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"ariaDesc","type":"string","description":"The ariaDesc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers.\n\nNote: Overridden by the desc prop of containerComponent"},{"name":"ariaTitle","type":"string","description":"The ariaTitle prop specifies the title to be applied to the SVG to assist\naccessibility for screen readers.\n\nNote: Overridden by the title prop of containerComponent"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"children","type":"React.ReactNode | React.ReactNode[]","description":"The children to render with the chart"},{"name":"color","type":"string","description":"The color prop is an optional prop that defines a single color to be applied to the\nchildren of ChartGroup. The color prop will override colors specified via colorScale."},{"name":"colorScale","type":"string[]","description":"The colorScale prop is an optional prop that defines the color scale the chart's bars\nwill be created on. This prop should be given as an array of CSS colors, or as a string\ncorresponding to one of the built in color scales. ChartGroup will automatically assign\nvalues from this color scale to the bars unless colors are explicitly provided in the\n`dataAttributes` prop."},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartGroup: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartGroup will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />","defaultValue":"<ChartContainer />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: number[] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartGroup events.\nSince ChartGroup only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. an area), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {fill: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartGroup uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"hasPatterns","type":"boolean | boolean[]","description":"The hasPatterns prop is an optional prop that indicates whether a pattern is shown for a chart.\nSVG patterns are dynamically generated (unique to each chart) in order to apply colors from the selected\ncolor theme or custom color scale. Those generated patterns are applied in a specific order (via a URL), similar\nto the color theme ordering defined by PatternFly. If the multi-color theme was in use; for example, colorized\npatterns would be displayed in that same order. Create custom patterns via the patternScale prop.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example hasPatterns={ true }\n@example hasPatterns={[ true, true, false ]}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartGroup. If individual labels are required for each\ndata point, they should be created by composing ChartGroup with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"offset","type":"number","description":"The offset prop determines the number of pixels each element in a group should\nbe offset from its original position of the on the independent axis. In the\ncase of groups of bars, this number should be equal to the width of the bar\nplus the desired spacing between bars."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"patternScale","type":"string[]","description":"The patternScale prop is an optional prop that defines patterns to apply, where applicable. This prop should be\ngiven as a string array of pattern URLs. Patterns will be assigned to children by index and will repeat when there\nare more children than patterns in the provided patternScale. Use null to omit the pattern for a given index.\n\nNote: Not all components are supported; for example, ChartLine, ChartBullet, ChartThreshold, etc.\n\n@example patternScale={[ 'url(\"#pattern1\")', 'url(\"#pattern2\")', null ]}"},{"name":"polar","type":"boolean","description":"Victory components can pass a boolean polar prop to specify whether a label is part of a polar chart."},{"name":"range","type":"number[] | { x: number[], y: number[] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart,\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"number | string | Function | string[]","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartGroup with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartGroup. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}"},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartBar or ChartArea.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartThreshold","description":"CharThreshold renders a dataset as a threshold chart.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-line/src/victory-line.tsx","props":[{"name":"animate","type":"boolean | object","description":"The animate prop specifies props for VictoryAnimation to use.\nThe animate prop should also be used to specify enter and exit\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\n\n\n@example\n{duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}"},{"name":"categories","type":"string[] | { x: string[], y: string[] }","description":"The categories prop specifies how categorical data for a chart should be ordered.\nThis prop should be given as an array of string values, or an object with\nthese arrays of values specified for x and y. If this prop is not set,\ncategorical data will be plotted in the order it was given in the data array\n\n\n@example [\"dogs\", \"cats\", \"mice\"]"},{"name":"containerComponent","type":"React.ReactElement<any>","description":"The containerComponent prop takes an entire component which will be used to\ncreate a container element for standalone charts.\nThe new element created from the passed containerComponent wil be provided with\nthese props from ChartLine: height, width, children\n(the chart itself) and style. Props that are not provided by the\nchild chart component include title and desc, both of which\nare intended to add accessibility to Victory components. The more descriptive these props\nare, the more accessible your data will be for people using screen readers.\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use the default ChartContainer component.\n\n@example <ChartContainer title=\"Chart of Dog Breeds\" desc=\"This chart shows...\" />"},{"name":"data","type":"any[]","description":"The data prop specifies the data to be plotted. Data should be in the form of an array\nof data points, or an array of arrays of data points for multiple datasets.\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\nbut by default, an object with x and y properties is expected.\n\n@example [{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\n[[{x: \"a\", y: 1}, {x: \"b\", y: 2}], [{x: \"a\", y: 2}, {x: \"b\", y: 3}]]"},{"name":"dataComponent","type":"React.ReactElement<any>","description":"The dataComponent prop takes an entire component which will be used to create an area.\nThe new element created from the passed dataComponent will be provided with the\nfollowing properties calculated by ChartLine: a scale, style, events, interpolation,\nand an array of modified data objects (including x, y, and calculated y0 and y1).\nAny of these props may be overridden by passing in props to the supplied component,\nor modified or ignored within the custom component itself. If a dataComponent is\nnot provided, ChartLine will use its default Line component."},{"name":"domain","type":"number[] | { x: number[], y: number[] }","description":"The domain prop describes the range of values your chart will cover. This prop can be\ngiven as a array of the minimum and maximum expected values for your bar chart,\nor as an object that specifies separate arrays for x and y.\nIf this prop is not provided, a domain will be calculated from data, or other\navailable information.\n\n\n@example [low, high], { x: [low, high], y: [low, high] }\n\n[-1, 1], {x: [0, 100], y: [0, 1]}"},{"name":"domainPadding","type":"number | number[] | { x: number[], y: [number, number] }","description":"The domainPadding prop specifies a number of pixels of padding to add to the\nbeginning and end of a domain. This prop is useful for explicitly spacing ticks farther\nfrom the origin to prevent crowding. This prop should be given as an object with\nnumbers specified for x and y.\n\n\n@example [left, right], { x: [left, right], y: [bottom, top] }\n\n{x: [10, -10], y: 5}"},{"name":"eventKey","type":"number | string | Function","description":"Similar to data accessor props `x` and `y`, this prop may be used to functionally\nassign eventKeys to data"},{"name":"events","type":"object[]","description":"The event prop take an array of event objects. Event objects are composed of\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\nfor a given component, so \"data\" and \"labels\" are all valid targets for ChartLine events.\nSince ChartLine only renders a single element, the eventKey property is not used.\nThe eventHandlers object should be given as an object whose keys are standard\nevent names (i.e. onClick) and whose values are event callbacks. The return value\nof an event handler is used to modify elemnts. The return value should be given\nas an object or an array of objects with optional target and eventKey keys,\nand a mutation key whose value is a function. The target and eventKey keys\nwill default to those corresponding to the element the event handler was attached to.\nThe mutation function will be called with the calculated props for the individual selected\nelement (i.e. a line), and the object returned from the mutation function\nwill override the props of the selected element via object assignment.\n\n\n@example\nevents={[\n  {\n    target: \"data\",\n    eventHandlers: {\n      onClick: () => {\n        return [\n           {\n             mutation: (props) => {\n               return {style: merge({}, props.style, {stroke: \"orange\"})};\n             }\n           }, {\n             target: \"labels\",\n             mutation: () => {\n               return {text: \"hey\"};\n             }\n           }\n         ];\n      }\n    }\n  }\n]}"},{"name":"externalEventMutations","type":"object[]","description":"ChartLine uses the standard externalEventMutations prop."},{"name":"groupComponent","type":"React.ReactElement<any>","description":"The groupComponent prop takes an entire component which will be used to\ncreate group elements for use within container elements. This prop defaults\nto a <g> tag on web, and a react-native-svg <G> tag on mobile"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the chart container.\nThis value should be given as a number of pixels"},{"name":"horizontal","type":"boolean","description":"The horizontal prop determines whether data will be plotted horizontally.\nWhen this prop is set to true, the independent variable will be plotted on the y axis\nand the dependent variable will be plotted on the x axis."},{"name":"interpolation","type":"string | Function","description":"The interpolation prop determines how data points should be connected when plotting a line.\nPolar area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\".\nCartesian area charts may use the following interpolation options: \"basis\", \"cardinal\", \"catmullRom\", \"linear\",\n\"monotoneX\", \"monotoneY\", \"natural\", \"step\", \"stepAfter\", \"stepBefore\"."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop takes in an entire label component which will be used\nto create a label for the area. The new element created from the passed labelComponent\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\ntextAnchor, angle, style, text, and events. any of these props may be overridden\nby passing in props to the supplied component, or modified or ignored within\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\nwill be created with props described above. This labelComponent prop should be used to\nprovide a series label for ChartLine. If individual labels are required for each\ndata point, they should be created by composing ChartLine with VictoryScatter"},{"name":"labels","type":"string[] | number[] | ((data: any) => string | number | null)","description":"The labels prop defines labels that will appear above each bar in your chart.\nThis prop should be given as an array of values or as a function of data.\nIf given as an array, the number of elements in the array should be equal to\nthe length of the data array. Labels may also be added directly to the data object\nlike data={[{x: 1, y: 1, label: \"first\"}]}.\n\n@example [\"spring\", \"summer\", \"fall\", \"winter\"], (datum) => datum.title"},{"name":"maxDomain","type":"number | { x?: number; y?: number }","description":"The maxDomain prop defines a maximum domain value for a chart. This prop is useful in situations where the maximum\ndomain of a chart is static, while the minimum value depends on data or other variable information. If the domain\nprop is set in addition to maximumDomain, domain will be used.\n\nNote: The x value supplied to the maxDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nmaxDomain={0}\nmaxDomain={{ y: 0 }}"},{"name":"minDomain","type":"number | { x?: number; y?: number }","description":"The minDomain prop defines a minimum domain value for a chart. This prop is useful in situations where the minimum\ndomain of a chart is static, while the maximum value depends on data or other variable information. If the domain\nprop is set in addition to minimumDomain, domain will be used.\n\nNote: The x value supplied to the minDomain prop refers to the independent variable, and the y value refers to the\ndependent variable. This may cause confusion in horizontal charts, as the independent variable will corresponds to\nthe y axis.\n\n@example\n\nminDomain={0}\nminDomain={{ y: 0 }}"},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"padding","type":"number | { top: number, bottom: number, left: number, right: number }","description":"The padding props specifies the amount of padding in number of pixels between\nthe edge of the chart and any rendered child components. This prop can be given\nas a number or as an object with padding specified for top, bottom, left\nand right."},{"name":"range","type":"[number, number] | { x: [number, number], y: [number, number] }","description":"The range prop describes the dimensions over which data may be plotted. For cartesian coordinate systems, this\ncorresponds to minimum and maximum svg coordinates in the x and y dimension. In polar coordinate systems this\ncorresponds to a range of angles and radii. When this value is not given it will be calculated from the width,\nheight, and padding, or from the startAngle and endAngle in the case of polar charts. All components in a given\nchart must share the same range, so setting this prop on children nested within Chart or\nChartGroup will have no effect. This prop is usually not set manually.\n\n\n@example [low, high] | { x: [low, high], y: [low, high] }\n\nCartesian: range={{ x: [50, 250], y: [50, 250] }}\nPolar: range={{ x: [0, 360], y: [0, 250] }}"},{"name":"samples","type":"number","description":"The samples prop specifies how many individual points to plot when plotting\ny as a function of x. Samples is ignored if x props are provided instead."},{"name":"scale","type":"string | { x: string, y: string }","description":"The scale prop determines which scales your chart should use. This prop can be\ngiven as a string specifying a supported scale (\"linear\", \"time\", \"log\", \"sqrt\"),\nas a d3 scale function, or as an object with scales specified for x and y\n\n\n@example d3Scale.time(), {x: \"linear\", y: \"log\"}"},{"name":"singleQuadrantDomainPadding","type":"boolean | { x?: boolean; y?: boolean }","description":"By default domainPadding is coerced to existing quadrants. This means that if a given domain only includes positive\nvalues, no amount of padding applied by domainPadding will result in a domain with negative values. This is the\ndesired behavior in most cases. For users that need to apply padding without regard to quadrant, the\nsingleQuadrantDomainPadding prop may be used. This prop may be given as a boolean or an object with boolean values\nspecified for \"x\" and/or \"y\". When this prop is false (or false for a given dimension), padding will be applied\nwithout regard to quadrant. If this prop is not specified, domainPadding will be coerced to existing quadrants.\n\nNote: The x value supplied to the singleQuadrantDomainPadding prop refers to the independent variable, and the y\nvalue refers to the dependent variable. This may cause confusion in horizontal charts, as the independent variable\nwill corresponds to the y axis.\n\n@example\n\nsingleQuadrantDomainPadding={false}\nsingleQuadrantDomainPadding={{ x: false }}"},{"name":"sortKey","type":"DataGetterPropType","description":"Use the sortKey prop to indicate how data should be sorted. This prop\nis given directly to the lodash sortBy function to be executed on the\nfinal dataset."},{"name":"sortOrder","type":"string","description":"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order."},{"name":"standalone","type":"boolean","description":"The standalone prop determines whether the component will render a standalone svg\nor a <g> tag that will be included in an external svg. Set standalone to false to\ncompose ChartLine with other components within an enclosing <svg> tag."},{"name":"style","type":"{ parent: object, data: object, labels: object }","description":"The style prop specifies styles for your ChartLine. Any valid inline style properties\nwill be applied. Height, width, and padding should be specified via the height,\nwidth, and padding props, as they are used to calculate the alignment of\ncomponents within chart.\n\n\n@example {data: {fill: \"red\"}, labels: {fontSize: 12}}","defaultValue":"{}"},{"name":"theme","type":"object","description":"The theme prop takes a style object with nested data, labels, and parent objects.\nYou can create this object yourself, or you can use a theme provided by\nWhen using ChartLine as a solo component, implement the theme directly on\nChartLine. If you are wrapping ChartLine in ChartChart or ChartGroup,\nplease call the theme on the outermost wrapper component instead.","defaultValue":"getThresholdTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the chart container\nThis value should be given as a number of pixels"},{"name":"x","type":"number | string | Function | string[]","description":"The x prop specifies how to access the X value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)"},{"name":"y","type":"number | string | Function | string[]","description":"The y prop specifies how to access the Y value of each data point.\nIf given as a function, it will be run on each data point, and returned value will be used.\nIf given as an integer, it will be used as an array index for array-type data points.\nIf given as a string, it will be used as a property key for object-type data points.\nIf given as an array of strings, or a string containing dots or brackets,\nit will be used as a nested object property path (for details see Lodash docs for _.get).\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\n\n\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)"},{"name":"y0","type":"number | string | Function | string[]","description":"Use y0 data accessor prop to determine how the component defines the baseline y0 data.\nThis prop is useful for defining custom baselines for components like ChartLine.\nThis prop may be given in a variety of formats.\n\n\n@example 'last_quarter_profit', () => 10, 1, 'employees.salary', [\"employees\", \"salary\"]"}]},{"name":"ChartVoronoiContainer","description":"ChartVoronoiContainer adds the ability to associate a mouse position with the data point(s) closest to it. When this\ncontainer is added to a chart, changes in mouse position will add the active prop to data and label components\nclosest to the current mouse position. The closeness of data points to a given position is determined by calculating\na voronoi diagram based on the data of every child VictoryVoronoiContainer renders. This container is useful for\nadding hover interactions, like tooltips, to small data points, or charts with dense or overlapping data.\n\nSee https://github.com/FormidableLabs/victory/blob/main/packages/victory-voronoi-container/src/index.d.ts","props":[{"name":"activateData","type":"boolean","description":"When the activateData prop is set to true, the active prop will be set to true on all\ndata components within a voronoi area. When this prop is set to false, the onActivated\nand onDeactivated callbacks will still fire, but no mutations to data components will\noccur via Victory’s event system."},{"name":"activateLabels","type":"boolean","description":"When the activateLabels prop is set to true, the active prop will be set to true on all\nlabels corresponding to points within a voronoi area. When this prop is set to false,\nthe onActivated and onDeactivated callbacks will still fire, but no mutations to label\ncomponents will occur via Victory’s event system. Labels defined directly on\nChartVoronoiContainer via the labels prop will still appear when this prop is set to false."},{"name":"className","type":"string","description":"The className prop specifies a className that will be applied to the outer-most div rendered by the container"},{"name":"constrainToVisibleArea","type":"boolean","description":"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.","defaultValue":"false"},{"name":"containerId","type":"number | string","description":"The containerId prop may be used to set a deterministic id for the container. When a containerId is not manually\nset, a unique id will be generated. It is usually necessary to set deterministic ids for automated testing."},{"name":"desc","type":"string","description":"The desc prop specifies the description of the chart/SVG to assist with\naccessibility for screen readers. The more info about the chart provided in\nthe description, the more usable it will be for people using screen readers.\nThis prop defaults to an empty string.\n\n@example \"Golden retreivers make up 30%, Labs make up 25%, and other dog breeds are\nnot represented above 5% each.\""},{"name":"disable","type":"boolean","description":"When the disable prop is set to true, ChartVoronoiContainer events will not fire."},{"name":"events","type":"React.DOMAttributes<any>","description":"The events prop attaches arbitrary event handlers to the container component.\nEvent handlers passed from other Victory components are called with their\ncorresponding events as well as scale, style, width, height, and data when\napplicable. Use the invert method to convert event coordinate information to\ndata. `scale.x.invert(evt.offsetX)`.\n\n@example {onClick: (evt) => alert(`x: ${evt.clientX}, y: ${evt.clientY}`)}"},{"name":"height","type":"number","description":"The height props specifies the height the svg viewBox of the container.\nThis value should be given as a number of pixels. If no height prop\nis given, the height prop from the child component passed will be used."},{"name":"labelComponent","type":"React.ReactElement<any>","description":"The labelComponent prop specified the component that will be rendered when labels are defined\non ChartVoronoiContainer. If the labels prop is omitted, no label component will be rendered.","defaultValue":"<ChartTooltip />"},{"name":"labels","type":"(point: any, index: number, points: any[]) => string","description":"When a labels prop is provided to ChartVoronoiContainer it will render a label component\nrather than activating labels on the child components it renders. This is useful for\ncreating multi- point tooltips. This prop should be given as a function which will be called\nonce for each active point. The labels function will be called with the arguments point,\nindex, and points, where point refers to a single active point, index refers to the position\nof that point in the array of active points, and points is an array of all active points."},{"name":"mouseFollowTooltips","type":"boolean","description":"When the mouseFollowTooltip prop is set on ChartVoronoiContainer, The position of the center of the tooltip\nfollows the position of the mouse."},{"name":"name","type":"string","description":"The name prop is used to reference a component instance when defining shared events."},{"name":"onActivated","type":"Function","description":"The onActivated prop accepts a function to be called whenever new data points are activated.\nThe function is called with the parameters points (an array of active data objects) and props\n(the props used by ChartVoronoiContainer)."},{"name":"onDeactivated","type":"Function","description":"The onDeactivated prop accepts a function to be called whenever points are deactivated. The\nfunction is called with the parameters points (an array of the newly-deactivated data objects)\nand props (the props used by ChartVoronoiContainer)."},{"name":"origin","type":"{ x: number, y: number }","description":"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\n\nNote: It will not typically be necessary to set an origin prop manually"},{"name":"portalComponent","type":"React.ReactElement","description":"The portalComponent prop takes a component instance which will be used as a container for children that should\nrender inside a top-level container so that they will always appear above other elements. ChartTooltip renders\ninside a portal so that tooltips always render above data. VictoryPortal is used to define elements that should\nrender in the portal container. This prop defaults to Portal, and should only be overridden when changing rendered\nelements from SVG to another type of element e.g., react-native-svg elements."},{"name":"portalZIndex","type":"number","description":"The portalZIndex prop determines the z-index of the div enclosing the portal component. If a portalZIndex prop is\nnot set, the z-index of the enclosing div will be set to 99."},{"name":"radius","type":"number","description":"When the radius prop is set, the voronoi areas associated with each data point will be no larger\nthan the given radius. This prop should be given as a number."},{"name":"responsive","type":"boolean","description":"The responsive prop specifies whether the rendered container should be a responsive container\nwith a viewBox attribute, or a static container with absolute width and height.\n\n@default true"},{"name":"style","type":"React.CSSProperties","description":"The style prop specifies styles for your ChartContainer. Any valid inline style properties\nwill be applied. Height and width should be specified via the height\nand width props, as they are used to calculate the alignment of\ncomponents within the container. Styles from the child component will\nalso be passed, if any exist.\n\n@example {border: 1px solid red}"},{"name":"tabIndex","type":"number","description":"The tabIndex prop specifies the description of the chart/SVG to assist with accessibility."},{"name":"theme","type":"object","description":"The theme prop specifies a theme to use for determining styles and layout properties for a component. Any styles or\nprops defined in theme may be overwritten by props specified on the component instance.","defaultValue":"getTheme(themeColor)"},{"name":"themeColor","type":"string","description":"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\n\nNote: Not compatible with theme prop\n\n@example themeColor={ChartThemeColor.blue}"},{"name":"voronoiBlacklist","type":"string[]","description":"The voronoiBlacklist prop is used to specify a list of components to ignore when calculating a\nshared voronoi diagram. Components with a name prop matching an element in the voronoiBlacklist\narray will be ignored by ChartVoronoiContainer. Ignored components will never be flagged as\nactive, and will not contribute date to shared tooltips or labels."},{"name":"voronoiDimension","type":"'x' | 'y'","description":"When the voronoiDimension prop is set, voronoi selection will only take the given dimension into\naccount. For example, when dimension is set to “x”, all data points matching a particular x mouse\nposition will be activated regardless of y value. When this prop is not given, voronoi selection\nis determined by both x any y values."},{"name":"voronoiPadding","type":"number","description":"When the voronoiPadding prop is given, the area of the chart that will trigger voronoi events is\nreduced by the given padding on every side. By default, no padding is applied, and the entire range\nof a given chart may trigger voronoi events. This prop should be given as a number."},{"name":"width","type":"number","description":"The width props specifies the width of the svg viewBox of the container\nThis value should be given as a number of pixels. If no width prop\nis given, the width prop from the child component passed will be used."}]}]},"Code editor":{"id":"Code editor","title":"Code editor","source":"react","tabName":null,"slug":"/components/code-editor/react","propComponents":[{"name":"CodeEditor","description":"The main code editor component.","props":[{"name":"className","type":"string","description":"Additional classes added to the code editor.","defaultValue":"''"},{"name":"code","type":"string","description":"Code displayed in code editor.","defaultValue":"''"},{"name":"copyButtonAriaLabel","type":"string","description":"Accessible label for the copy button.","defaultValue":"'Copy code to clipboard'"},{"name":"copyButtonSuccessTooltipText","type":"string","description":"Text to display in the tooltip on the copy button after code is copied to clipboard.","defaultValue":"'Content added to clipboard'"},{"name":"copyButtonToolTipText","type":"string","description":"Text to display in the tooltip on the copy button before code is copied.","defaultValue":"'Copy to clipboard'"},{"name":"customControls","type":"React.ReactNode | React.ReactNode[]","description":"A single node or array of nodes - ideally the code editor controls component - to display\nabove code editor.","defaultValue":"null"},{"name":"downloadButtonAriaLabel","type":"string","description":"Accessible label for the download button.","defaultValue":"'Download code'"},{"name":"downloadButtonToolTipText","type":"string","description":"Text to display in the tooltip on the download button.","defaultValue":"'Download'"},{"name":"downloadFileName","type":"string","description":"Name of the file if user downloads code to local file.","defaultValue":"Date.now().toString()"},{"name":"editorProps","type":"EditorProps","description":"Additional props to pass to the monaco editor."},{"name":"emptyState","type":"React.ReactNode","description":"Content to display in space of the code editor when there is no code to display.","defaultValue":"''"},{"name":"emptyStateBody","type":"React.ReactNode","description":"Override default empty state body text.","defaultValue":"'Drag and drop a file or upload one.'"},{"name":"emptyStateButton","type":"React.ReactNode","description":"Override default empty state button text.","defaultValue":"'Browse'"},{"name":"emptyStateLink","type":"React.ReactNode","description":"Override default empty state link text.","defaultValue":"'Start from scratch'"},{"name":"emptyStateTitle","type":"React.ReactNode","description":"Override default empty state title text.","defaultValue":"'Start editing'"},{"name":"headerMainContent","type":"string","description":"Editor header main content title.","defaultValue":"''"},{"name":"height","type":"string | 'sizeToFit'","description":"Height of code editor. Defaults to 100%. 'sizeToFit' will automatically change the height\nto the height of the content.","defaultValue":"''"},{"name":"isCopyEnabled","type":"boolean","description":"Flag to add copy button to code editor actions.","defaultValue":"false"},{"name":"isDarkTheme","type":"boolean","description":"Flag indicating the editor is styled using monaco's dark theme.","defaultValue":"false"},{"name":"isDownloadEnabled","type":"boolean","description":"Flag to add download button to code editor actions.","defaultValue":"false"},{"name":"isHeaderPlain","type":"boolean","description":"Flag indicating the editor has a plain header.","defaultValue":"false"},{"name":"isLanguageLabelVisible","type":"boolean","description":"Flag to include a label indicating the currently configured editor language.","defaultValue":"false"},{"name":"isLineNumbersVisible","type":"boolean","description":"Flag indicating the editor is displaying line numbers.","defaultValue":"true"},{"name":"isMinimapVisible","type":"boolean","description":"Flag to add the minimap to the code editor.","defaultValue":"false"},{"name":"isReadOnly","type":"boolean","description":"Flag indicating the editor is read only.","defaultValue":"false"},{"name":"isUploadEnabled","type":"boolean","description":"Flag to add upload button to code editor actions. Also makes the code editor accept a\nfile using drag and drop.","defaultValue":"false"},{"name":"language","type":"Language","description":"Language displayed in the editor.","defaultValue":"Language.plaintext"},{"name":"loading","type":"React.ReactNode","description":"The loading screen before the editor will be loaded. Defaults to 'loading...'.","defaultValue":"''"},{"name":"onChange","type":"(value: string, event: editor.IModelContentChangedEvent) => void","description":"Function which fires each time the content of the code editor is manually changed. Does\nnot fire when a file is uploaded."},{"name":"onCodeChange","type":"(value: string) => void","description":"Function which fires each time the code changes in the code editor.","defaultValue":"() => {}"},{"name":"onEditorDidMount","type":"(editor: editor.IStandaloneCodeEditor, monaco: Monaco) => void","description":"Callback which fires after the code editor is mounted containing a reference to the\nmonaco editor and the monaco instance.","defaultValue":"() => {}"},{"name":"options","type":"editor.IStandaloneEditorConstructionOptions","description":"Refer to Monaco interface {monaco.editor.IStandaloneEditorConstructionOptions}.","defaultValue":"{}"},{"name":"overrideServices","type":"editor.IEditorOverrideServices","description":"Refer to Monaco interface {monaco.editor.IEditorOverrideServices}.","defaultValue":"{}"},{"name":"shortcutsPopoverButtonText","type":"string","description":"Text to show in the button to open the shortcut popover.","defaultValue":"'View Shortcuts'"},{"name":"shortcutsPopoverProps","type":"PopoverProps","description":"Properties for the shortcut popover.","defaultValue":"{\n  bodyContent: '',\n  'aria-label': 'Keyboard Shortcuts',\n  ...Popover.defaultProps\n}"},{"name":"showEditor","type":"boolean","description":"Flag to show the editor.","defaultValue":"true"},{"name":"toolTipCopyExitDelay","type":"number","description":"The delay before tooltip fades after code copied.","defaultValue":"1600"},{"name":"toolTipDelay","type":"number","description":"The entry and exit delay for all tooltips.","defaultValue":"300"},{"name":"toolTipMaxWidth","type":"string","description":"The max width of the tooltips on all button.","defaultValue":"'100px'"},{"name":"toolTipPosition","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"The position of tooltips on all buttons.","defaultValue":"'top'"},{"name":"uploadButtonAriaLabel","type":"string","description":"Accessible label for the upload button.","defaultValue":"'Upload code'"},{"name":"uploadButtonToolTipText","type":"string","description":"Text to display in the tooltip on the upload button.","defaultValue":"'Upload'"},{"name":"width","type":"string","description":"Width of code editor. Defaults to 100%.","defaultValue":"''"}]},{"name":"CodeEditorControl","description":"Allows customizing the code editor controls by passing this sub-component into the\ncode editor's customControl property.","props":[{"name":"aria-label","type":"string","description":"Accessible label for the code editor control"},{"name":"className","type":"string","description":"Additional classes added to the code editor control."},{"name":"icon","type":"React.ReactNode","description":"Icon rendered inside the code editor control.","required":true},{"name":"isVisible","type":"boolean","description":"Flag indicating that the button is visible above the code editor.","defaultValue":"true"},{"name":"onClick","type":"(code: string, event?: any) => void","description":"Event handler for the click of the button","defaultValue":"() => {}"},{"name":"tooltipProps","type":"any","description":"Additional tooltip props forwarded to the Tooltip component","defaultValue":"{}"}]},{"name":"Popover","description":"The main popover component. The following properties can also be passed into another component\nthat has a property specifically for passing in popover properties.","props":[{"name":"alertSeverityScreenReaderText","type":"string","description":"Text announced by screen reader when alert severity variant is set to indicate\nseverity level."},{"name":"alertSeverityVariant","type":"'custom' | 'info' | 'warning' | 'success' | 'danger'","description":"Severity variants for an alert popover. This modifies the color of the header to\nmatch the severity."},{"name":"animationDuration","type":"number","description":"The duration of the CSS fade transition animation.","defaultValue":"300"},{"name":"appendTo","type":"HTMLElement | ((ref?: HTMLElement) => HTMLElement) | 'inline'","description":"The element to append the popover to. Defaults to \"inline\".","defaultValue":"() => document.body"},{"name":"aria-label","type":"string","description":"Accessible label for the popover, required when header is not present.","defaultValue":"''"},{"name":"bodyContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Body content of the popover. If you want to close the popover after an action within the\nbody content, you can use the isVisible prop for manual control, or you can provide a\nfunction which will receive a callback as an argument to hide the popover, i.e.\nbodyContent={hide => <Button onClick={() => hide()}>Close</Button>}","required":true},{"name":"children","type":"ReactElement<any>","description":"The trigger reference element to which the popover is relatively placed to. If you cannot wrap\nthe element with the Popover, you can use the triggerRef prop instead.\nUsage: <Popover><Button>Reference</Button></Popover>"},{"name":"className","type":"string","description":"Additional classes added to the popover.","defaultValue":"''"},{"name":"closeBtnAriaLabel","type":"string","description":"Accessible label for the close button.","defaultValue":"'Close'"},{"name":"distance","type":"number","description":"Distance of the popover to its target. Defaults to 25.","defaultValue":"25"},{"name":"elementToFocus","type":"HTMLElement | SVGElement | string","description":"The element to focus when the popover becomes visible. By default the first\nfocusable element will receive focus."},{"name":"enableFlip","type":"boolean","description":"If true, tries to keep the popover in view by flipping it if necessary.\nIf the position is set to 'auto', this prop is ignored.","defaultValue":"true"},{"name":"flipBehavior","type":"| 'flip'\n| (\n    | 'top'\n    | 'bottom'\n    | 'left'\n    | 'right'\n    | 'top-start'\n    | 'top-end'\n    | 'bottom-start'\n    | 'bottom-end'\n    | 'left-start'\n    | 'left-end'\n    | 'right-start'\n    | 'right-end'\n  )[]","description":"The desired position to flip the popover to if the initial position is not possible.\nBy setting this prop to 'flip' it attempts to flip the popover to the opposite side if\nthere is no space.\nYou can also pass an array of positions that determines the flip order. It should contain\nthe initial position followed by alternative positions if that position is unavailable.\nExample: Initial position is 'top'. Button with popover is in the top right corner.\n'flipBehavior' is set to ['top', 'right', 'left']. Since there is no space to the top, it\nchecks if right is available. There's also no space to the right, so it finally shows the\npopover on the left.","defaultValue":"[\n  'top',\n  'bottom',\n  'left',\n  'right',\n  'top-start',\n  'top-end',\n  'bottom-start',\n  'bottom-end',\n  'left-start',\n  'left-end',\n  'right-start',\n  'right-end'\n]"},{"name":"footerContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Footer content of the popover. If you want to close the popover after an action within the\nfooter content, you can use the isVisible prop for manual control, or you can provide a\nfunction which will receive a callback as an argument to hide the popover, i.e.\nfooterContent={hide => <Button onClick={() => hide()}>Close</Button>}","defaultValue":"null"},{"name":"hasAutoWidth","type":"boolean","description":"Removes fixed-width and allows width to be defined by contents.","defaultValue":"false"},{"name":"hasNoPadding","type":"boolean","description":"Allows content to touch edges of popover container.","defaultValue":"false"},{"name":"headerComponent","type":"'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'","description":"Sets the heading level to use for the popover header. Defaults to h6.","defaultValue":"'h6'"},{"name":"headerContent","type":"React.ReactNode | ((hide: () => void) => React.ReactNode)","description":"Simple header content to be placed within a title. If you want to close the popover after\nan action within the header content, you can use the isVisible prop for manual control,\nor you can provide a function which will receive a callback as an argument to hide the\npopover, i.e. headerContent={hide => <Button onClick={() => hide()}>Close</Button>}","defaultValue":"null"},{"name":"headerIcon","type":"React.ReactNode","description":"Icon to be displayed in the popover header. *","defaultValue":"null"},{"name":"hideOnOutsideClick","type":"boolean","description":"Hides the popover when a click occurs outside (only works if isVisible is not controlled\nby the user).","defaultValue":"true"},{"name":"id","type":"string","description":"Id used as part of the various popover elements (popover-${id}-header/body/footer)."},{"name":"isVisible","type":"boolean","description":"True to show the popover programmatically. Used in conjunction with the shouldClose prop.\nBy default, the popover child element handles click events automatically. If you want to\ncontrol this programmatically, the popover will not auto-close if the close button is\nclicked, the escape key is used, or if a click occurs outside the popover. Instead, the\nconsumer is responsible for closing the popover themselves by adding a callback listener\nfor the shouldClose prop.","defaultValue":"null"},{"name":"maxWidth","type":"string","description":"Maximum width of the popover (default 18.75rem).","defaultValue":"popoverMaxWidth && popoverMaxWidth.value"},{"name":"minWidth","type":"string","description":"Minimum width of the popover (default 6.25rem).","defaultValue":"popoverMinWidth && popoverMinWidth.value"},{"name":"onHidden","type":"() => void","description":"Lifecycle function invoked when the popover has fully transitioned out.","defaultValue":"(): void => null"},{"name":"onHide","type":"(event: MouseEvent | KeyboardEvent) => void","description":"Lifecycle function invoked when the popover begins to transition out.","defaultValue":"(): void => null"},{"name":"onMount","type":"() => void","description":"Lifecycle function invoked when the popover has been mounted to the DOM.","defaultValue":"(): void => null"},{"name":"onShow","type":"(event: MouseEvent | KeyboardEvent) => void","description":"Lifecycle function invoked when the popover begins to transition in.","defaultValue":"(): void => null"},{"name":"onShown","type":"() => void","description":"Lifecycle function invoked when the popover has fully transitioned in.","defaultValue":"(): void => null"},{"name":"position","type":"| PopoverPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Popover position. Note: With the enableFlip property set to true, it will change the\nposition if there is not enough space for the starting position. The behavior of where it\nflips to can be controlled through the flipBehavior property.","defaultValue":"'top'"},{"name":"shouldClose","type":"(event: MouseEvent | KeyboardEvent, hideFunction?: () => void) => void","description":"Callback function that is only invoked when isVisible is also controlled. Called when the\npopover close button is clicked, the enter key was used on it, or the escape key is used.","defaultValue":"(): void => null"},{"name":"shouldOpen","type":"(event: MouseEvent | KeyboardEvent, showFunction?: () => void) => void","description":"Callback function that is only invoked when isVisible is also controlled. Called when the\nenter key is used on the focused trigger.","defaultValue":"(): void => null"},{"name":"showClose","type":"boolean","description":"Flag indicating whether the close button should be shown.","defaultValue":"true"},{"name":"triggerAction","type":"'click' | 'hover'","description":"Sets an interaction to open popover, defaults to \"click\"","defaultValue":"'click'"},{"name":"triggerRef","type":"HTMLElement | (() => HTMLElement) | React.RefObject<any>","description":"The trigger reference element to which the popover is relatively placed to. If you can wrap the\nelement with the popover, you can use the children prop instead, or both props together.\nWhen passed along with the trigger prop, the div element that wraps the trigger will be removed.\nUsage: <Popover triggerRef={() => document.getElementById('reference-element')} />"},{"name":"withFocusTrap","type":"boolean","description":"Whether to trap focus in the popover."},{"name":"zIndex","type":"number","description":"The z-index of the popover.","defaultValue":"9999"}]}]},"Drag and drop":{"id":"Drag and drop","title":"Drag and drop","source":"react","tabName":null,"hideNavItem":true,"slug":"/components/drag-and-drop/react","propComponents":[{"name":"DragDropSort","description":"DragDropSortProps extends dnd-kit's props which may be viewed at https://docs.dndkit.com/api-documentation/context-provider#props.","props":[{"name":"children","type":"React.ReactElement","description":"Custom defined content wrapper for draggable items. By default, draggable items are wrapped in a styled div.\nIntended to be a 'DataList' or 'DualListSelectorList' without children."},{"name":"items","type":"DraggableObject[]","description":"Sorted array of draggable objects","required":true},{"name":"onDrag","type":"(event: DragDropSortDragStartEvent, oldIndex: number) => void","description":"Callback when use begins dragging a draggable object","defaultValue":"() => {}"},{"name":"onDrop","type":"(event: DragDropSortDragEndEvent, items: DraggableObject[], oldIndex?: number, newIndex?: number) => void","description":"Callback when user drops a draggable object","defaultValue":"() => {}"},{"name":"overlayProps","type":"any","description":"Additional classes to apply to the drag overlay"},{"name":"variant","type":"'default' | 'DataList' | 'DualListSelectorList'","description":"The variant determines which component wraps the draggable object.\nDefault variant wraps the draggable object in a div.\nDataList variant wraps the draggable object in a DataListItem\nDualListSelectorList variant wraps the draggable objects in a DualListSelectorListItem and a div.pf-c-dual-list-selector__item-text element","defaultValue":"'default'"}]},{"name":"DraggableObject","description":"","props":[{"name":"content","type":"React.ReactNode","description":"Content rendered in the draggable object","required":true},{"name":"id","type":"string | number","description":"Unique id of the draggable object","required":true},{"name":"props","type":"any","description":"Props spread to the rendered wrapper of the draggable object"}]}]},"Open UI Automation":{"id":"Open UI Automation","title":"Open UI Automation","source":"react","tabName":null,"slug":"/developer-resources/open-ui-automation/react"}},"react-deprecated":{"Wizard":{"id":"Wizard","title":"Wizard","source":"react-deprecated","tabName":null,"deprecated":true,"slug":"/components/wizard/react-deprecated","propComponents":[{"name":"Wizard","description":"","props":[{"name":"appendTo","type":"HTMLElement | (() => HTMLElement)","description":"The parent container to append the modal to. Defaults to document.body","defaultValue":"null"},{"name":"backButtonText","type":"React.ReactNode","description":"(Unused if footer is controlled) The Back button text","defaultValue":"'Back'"},{"name":"cancelButtonText","type":"React.ReactNode","description":"(Unused if footer is controlled) The Cancel button text","defaultValue":"'Cancel'"},{"name":"className","type":"string","description":"Additional classes spread to the Wizard","defaultValue":"''"},{"name":"closeButtonAriaLabel","type":"string","description":"(Unused if footer is controlled) aria-label for the close button","defaultValue":"'Close'"},{"name":"description","type":"React.ReactNode","description":"The wizard description","defaultValue":"''"},{"name":"descriptionComponent","type":"'div' | 'p'","description":"Component type of the description","defaultValue":"'p'"},{"name":"descriptionId","type":"string","description":"An optional id for the description"},{"name":"footer","type":"React.ReactNode","description":"(Use to control the footer) Passing in a footer component lets you control the buttons yourself","defaultValue":"null"},{"name":"hasDrawer","type":"boolean","description":"Flag indicating the wizard has a drawer for at least one of the wizard steps","defaultValue":"false"},{"name":"hasNoBodyPadding","type":"boolean","description":"Can remove the default padding around the main body content by setting this to true","defaultValue":"false"},{"name":"height","type":"number | string","description":"Custom height of the wizard","defaultValue":"null"},{"name":"hideClose","type":"boolean","description":"Flag indicating whether the close button should be in the header","defaultValue":"false"},{"name":"isDrawerExpanded","type":"boolean","description":"Flag indicating the wizard drawer is expanded","defaultValue":"false"},{"name":"isNavExpandable","type":"boolean","description":"Flag indicating nav items with sub steps are expandable","defaultValue":"false"},{"name":"isOpen","type":"boolean","description":"Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided","defaultValue":"undefined"},{"name":"mainAriaLabel","type":"string","description":"Adds an accessible name to the wizard body when the body content overflows and renders\na scrollbar.","defaultValue":"null"},{"name":"mainAriaLabelledBy","type":"string","description":"Adds an accessible name to the wizard body by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the body content overflows and renders a scrollbar.","defaultValue":"null"},{"name":"navAriaLabel","type":"string","description":"Aria-label for the Nav","defaultValue":"null"},{"name":"navAriaLabelledBy","type":"string","description":"Sets aria-labelledby on nav element","defaultValue":"null"},{"name":"nextButtonText","type":"React.ReactNode","description":"(Unused if footer is controlled) The Next button text","defaultValue":"'Next'"},{"name":"onBack","type":"(\n  newStep: { id?: string | number; name: React.ReactNode },\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\n) => void","description":"(Unused if footer is controlled) Callback function after Back button is clicked","defaultValue":"null"},{"name":"onClose","type":"() => void","description":"Callback function to close the wizard","defaultValue":"() => undefined as any"},{"name":"onCurrentStepChanged","type":"(step: WizardStep) => void","description":"Callback function to signal the current step in the wizard"},{"name":"onExpandDrawer","type":"() => void","description":"Callback function for when the drawer is toggled. Can be used to set browser focus in the drawer.","defaultValue":"() => undefined as any"},{"name":"onGoToStep","type":"(\n  newStep: { id?: string | number; name: React.ReactNode },\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\n) => void","description":"Callback function when a step in the nav is clicked","defaultValue":"null"},{"name":"onNext","type":"(\n  newStep: { id?: string | number; name: React.ReactNode },\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\n) => void","description":"(Unused if footer is controlled) Callback function after Next button is clicked","defaultValue":"null"},{"name":"onSave","type":"() => void","description":"(Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose"},{"name":"startAtStep","type":"number","description":"The current step the wizard is on (1 or higher)","defaultValue":"1"},{"name":"steps","type":"WizardStep[]","description":"The wizard steps configuration object","required":true},{"name":"title","type":"string","description":"The wizard title to display if header is desired","defaultValue":"null"},{"name":"titleId","type":"string","description":"An optional id for the title"},{"name":"width","type":"number | string","description":"Custom width of the wizard","defaultValue":"null"}]},{"name":"WizardNav","description":"","props":[{"name":"aria-label","type":"string","description":"Aria-label applied to the nav element"},{"name":"aria-labelledby","type":"string","description":"Sets the aria-labelledby attribute on the nav element"},{"name":"children","type":"any","description":"children should be WizardNavItem components"},{"name":"isOpen","type":"boolean","description":"Whether the nav is expanded","defaultValue":"false"},{"name":"ouiaSafe","type":"No type info","defaultValue":"true"},{"name":"returnList","type":"boolean","description":"True to return the inner list without the wrapping nav element","defaultValue":"false"}]},{"name":"WizardNavItem","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Can nest a WizardNav component for substeps","defaultValue":"null"},{"name":"content","type":"React.ReactNode","description":"The content to display in the nav item","defaultValue":"''"},{"name":"href","type":"string","description":"An optional url to use for when using an anchor component","defaultValue":"null"},{"name":"id","type":"string | number","description":"The id for the nav item"},{"name":"isCurrent","type":"boolean","description":"Whether the nav item is the currently active item","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Whether the nav item is disabled","defaultValue":"false"},{"name":"isExpandable","type":"boolean","description":"Flag indicating that this NavItem has child steps and is expandable","defaultValue":"false"},{"name":"navItemComponent","type":"'button' | 'a'","description":"Component used to render WizardNavItem","defaultValue":"'button'"},{"name":"onNavItemClick","type":"(step: number) => any","description":"Callback for when the nav item is clicked","defaultValue":"() => undefined"},{"name":"ouiaSafe","type":"No type info","defaultValue":"true"},{"name":"step","type":"number","description":"The step passed into the onNavItemClick callback","required":true}]},{"name":"WizardHeader","description":"","props":[{"name":"closeButtonAriaLabel","type":"string","description":"Aria-label applied to the X (Close) button"},{"name":"description","type":"React.ReactNode","description":"Description of the wizard"},{"name":"descriptionComponent","type":"'div' | 'p'","description":"Component type of the description","defaultValue":"'div'"},{"name":"descriptionId","type":"string","description":"id for the description"},{"name":"hideClose","type":"boolean","description":"Flag indicating whether the close button should be in the header"},{"name":"onClose","type":"() => void","description":"Callback function called when the X (Close) button is clicked","defaultValue":"() => undefined"},{"name":"title","type":"string","description":"Title of the wizard","required":true},{"name":"titleId","type":"string","description":"id for the title"}]},{"name":"WizardBody","description":"","props":[{"name":"activeStep","type":"WizardStep","description":"The currently active WizardStep","required":true},{"name":"aria-label","type":"string","description":"Adds an accessible name to the wizard body when the body content overflows and renders\na scrollbar."},{"name":"aria-labelledby","type":"string","description":"Adds an accessible name to the wizard body by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the body content overflows and renders a scrollbar.","required":true},{"name":"children","type":"any","description":"Anything that can be rendered in the Wizard body","required":true},{"name":"hasDrawer","type":"boolean","description":""},{"name":"hasNoBodyPadding","type":"boolean","description":"Set to true to remove the default body padding","defaultValue":"false"},{"name":"isDrawerExpanded","type":"boolean","description":"Flag indicating the wizard drawer is expanded"},{"name":"mainComponent","type":"React.ElementType","description":"Component used as the primary content container","defaultValue":"'div'"},{"name":"onExpandDrawer","type":"() => void","description":"Callback function for when the drawer is toggled"}]},{"name":"WizardFooter","description":"","props":[{"name":"children","type":"any","description":"Buttons in the footer","required":true}]},{"name":"WizardToggle","description":"","props":[{"name":"activeStep","type":"WizardStep","description":"The currently active WizardStep","required":true},{"name":"aria-label","type":"string","description":"The button's aria-label","defaultValue":"'Wizard Toggle'"},{"name":"children","type":"React.ReactNode","description":"The WizardFooter"},{"name":"hasDrawer","type":"boolean","description":"Flag indicating the wizard has a drawer for at least one of the wizard steps"},{"name":"hasNoBodyPadding","type":"boolean","description":"Set to true to remove body padding","defaultValue":"false"},{"name":"isDrawerExpanded","type":"boolean","description":"Flag indicating the wizard drawer is expanded"},{"name":"isInPage","type":"boolean","description":"If the wizard is in-page","defaultValue":"true"},{"name":"isNavOpen","type":"boolean","description":"If the nav is open","required":true},{"name":"mainAriaLabel","type":"string","description":"Adds an accessible name to the wizard body when the body content overflows and renders\na scrollbar.","defaultValue":"null"},{"name":"mainAriaLabelledBy","type":"string","description":"Adds an accessible name to the wizard body by passing the the id of one or more elements.\nThe aria-labelledby will only be applied when the body content overflows and renders a scrollbar.","defaultValue":"null"},{"name":"nav","type":"(isWizardNavOpen: boolean) => React.ReactElement","description":"Function that returns the WizardNav component","required":true},{"name":"onExpandDrawer","type":"() => void","description":"Callback function for when the drawer is toggled"},{"name":"onNavToggle","type":"(isOpen: boolean) => void","description":"Callback function for when the nav is toggled","required":true},{"name":"steps","type":"WizardStep[]","description":"The wizard steps","required":true}]},{"name":"WizardStep","description":"","props":[{"name":"canJumpTo","type":"boolean","description":"Enables or disables the step in the navigation. Enabled by default."},{"name":"component","type":"any","description":"The component to render in the main body"},{"name":"drawerPanelContent","type":"any","description":"The content to render in the drawer panel (use when hasDrawer prop is set on the wizard)."},{"name":"drawerToggleButton","type":"React.ReactNode","description":"Custom drawer toggle button that opens the drawer."},{"name":"enableNext","type":"boolean","description":"(Unused if footer is controlled) The condition needed to enable the Next button"},{"name":"hideBackButton","type":"boolean","description":"(Unused if footer is controlled) True to hide the Back button"},{"name":"hideCancelButton","type":"boolean","description":"(Unused if footer is controlled) True to hide the Cancel button"},{"name":"id","type":"string | number","description":"Optional identifier"},{"name":"isDisabled","type":"boolean","description":"Flag to disable the step in the navigation"},{"name":"isFinishedStep","type":"boolean","description":"Setting to true hides the side nav and footer"},{"name":"name","type":"React.ReactNode","description":"The name of the step","required":true},{"name":"nextButtonText","type":"React.ReactNode","description":"(Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it."},{"name":"stepNavItemProps","type":"React.HTMLProps<HTMLButtonElement | HTMLAnchorElement> | WizardNavItemProps","description":"Props to pass to the WizardNavItem"},{"name":"steps","type":"WizardStep[]","description":"Sub steps"}]}]},"Modal":{"id":"Modal","title":"Modal","source":"react-deprecated","tabName":null,"deprecated":true,"slug":"/components/modal/react-deprecated","propComponents":[{"name":"Modal","description":"","props":[{"name":"actions","type":"any","description":"Action buttons to add to the standard modal footer. Ignored if the footer property\nis passed in.","defaultValue":"[]"},{"name":"appendTo","type":"HTMLElement | (() => HTMLElement)","description":"The parent container to append the modal to. Defaults to \"document.body\".","defaultValue":"() => document.body"},{"name":"aria-describedby","type":"string","description":"Id to use for the modal box descriptor.","defaultValue":"''"},{"name":"aria-label","type":"string","description":"Accessible descriptor of the modal.","defaultValue":"''"},{"name":"aria-labelledby","type":"string","description":"Id to use for the modal box label.","defaultValue":"''"},{"name":"bodyAriaLabel","type":"string","description":"Accessible label applied to the modal box body. This should be used to communicate\nimportant information about the modal box body div element if needed, such as that it\nis scrollable."},{"name":"bodyAriaRole","type":"string","description":"Accessible role applied to the modal box body. This will default to \"region\" if the\nbodyAriaLabel property is passed in. Set to a more appropriate role as applicable\nbased on the modal content and context."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the modal.","required":true},{"name":"className","type":"string","description":"Additional classes added to the modal.","defaultValue":"''"},{"name":"description","type":"React.ReactNode","description":"Description of the modal."},{"name":"disableFocusTrap","type":"boolean","description":"Flag to disable focus trap."},{"name":"elementToFocus","type":"HTMLElement | SVGElement | string","description":"The element to focus when the modal opens. By default the first\nfocusable element will receive focus."},{"name":"footer","type":"React.ReactNode","description":"Custom footer."},{"name":"hasNoBodyWrapper","type":"boolean","description":"Flag indicating if modal content should be placed in a modal box body wrapper.","defaultValue":"false"},{"name":"header","type":"React.ReactNode","description":"Complex header (more than just text), supersedes the title property for header content."},{"name":"help","type":"React.ReactNode","description":"Optional help section for the modal header."},{"name":"id","type":"string","description":"An id to use for the modal box container.","defaultValue":"undefined"},{"name":"isOpen","type":"boolean","description":"Flag to show the modal.","defaultValue":"false"},{"name":"maxWidth","type":"number | string","description":"Maximum width of the modal."},{"name":"onClose","type":"(event: KeyboardEvent | React.MouseEvent) => void","description":"A callback for when the close button is clicked.","defaultValue":"() => undefined as any"},{"name":"onEscapePress","type":"(event: KeyboardEvent) => void","description":"Modal handles pressing of the escape key and closes the modal. If you want to handle\nthis yourself you can use this callback function."},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"position","type":"'default' | 'top'","description":"Position of the modal. By default a modal will be positioned vertically and horizontally centered.","defaultValue":"'default'"},{"name":"positionOffset","type":"string","description":"Offset from alternate position. Can be any valid CSS length/percentage."},{"name":"showClose","type":"boolean","description":"Flag to show the close button in the header area of the modal.","defaultValue":"true"},{"name":"title","type":"React.ReactNode","description":"Text content of the modal header.","defaultValue":"''"},{"name":"titleIconVariant","type":"'success' | 'danger' | 'warning' | 'info' | 'custom' | React.ComponentType<any>","description":"Optional alert icon (or other) to show before the title of the modal header. When the\npredefined alert types are used the default styling will be automatically applied.","defaultValue":"null"},{"name":"titleLabel","type":"string","description":"Optional title label text for screen readers.","defaultValue":"''"},{"name":"variant","type":"'small' | 'medium' | 'large' | 'default'","description":"Variant of the modal.","defaultValue":"'default'"},{"name":"width","type":"number | string","description":"Default width of the modal."}]}]},"Dual list selector":{"id":"Dual list selector","title":"Dual list selector","source":"react-deprecated","tabName":null,"deprecated":true,"slug":"/components/dual-list-selector/react-deprecated","propComponents":[{"name":"DualListSelector","description":"Acts as a container for all other DualListSelector sub-components when using a\ncomposable dual list selector.","props":[{"name":"addAll","type":"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void","description":"Optional callback for the dynamically built add all button"},{"name":"addAllAriaLabel","type":"string","description":"Accessible label for the dynamically built add all button","defaultValue":"'Add all'"},{"name":"addAllTooltip","type":"React.ReactNode","description":"Tooltip content for the dynamically built add all button"},{"name":"addAllTooltipProps","type":"any","description":"Additonal tooltip properties for the dynamically built add all tooltip"},{"name":"addSelected","type":"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void","description":"Optional callback for the dynamically built add selected button"},{"name":"addSelectedAriaLabel","type":"string","description":"Accessible label for the dynamically built add selected button","defaultValue":"'Add selected'"},{"name":"addSelectedTooltip","type":"React.ReactNode","description":"Tooltip content for the dynamically built add selected button"},{"name":"addSelectedTooltipProps","type":"any","description":"Additonal tooltip properties for the dynamically built add selected tooltip"},{"name":"availableOptions","type":"React.ReactNode[] | DualListSelectorTreeItemData[]","description":"Options to display in the dynamically built available options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format.","defaultValue":"[]"},{"name":"availableOptionsActions","type":"React.ReactNode[]","description":"Actions to be displayed above the dynamically built available options pane."},{"name":"availableOptionsSearchAriaLabel","type":"string","description":"Accessible label for the search input on the dynamically built available options pane.","defaultValue":"'Available search input'"},{"name":"availableOptionsStatus","type":"string","description":"Status message to display above the dynamically built available options pane."},{"name":"availableOptionsTitle","type":"string","description":"Title applied to the dynamically built available options pane.","defaultValue":"'Available options'"},{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the dual list selector. Panes & controls will not be built dynamically when children are provided.","defaultValue":"''"},{"name":"chosenOptions","type":"React.ReactNode[] | DualListSelectorTreeItemData[]","description":"Options to display in the dynamically built chosen options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format.","defaultValue":"[]"},{"name":"chosenOptionsActions","type":"React.ReactNode[]","description":"Actions to be displayed above the dynamically built chosen options pane."},{"name":"chosenOptionsSearchAriaLabel","type":"string","description":"Accessible label for the search input on the dynamically built chosen options pane.","defaultValue":"'Chosen search input'"},{"name":"chosenOptionsStatus","type":"string","description":"Status message to display above the dynamically built chosen options pane."},{"name":"chosenOptionsTitle","type":"string","description":"Title applied to the dynamically built chosen options pane.","defaultValue":"'Chosen options'"},{"name":"className","type":"string","description":"Additional classes applied to the dual list selector."},{"name":"controlsAriaLabel","type":"string","description":"Accessible label for the dynamically built controls between the two panes.","defaultValue":"'Selector controls'"},{"name":"filterOption","type":"(option: React.ReactNode, input: string) => boolean","description":"Optional filter function for custom filtering based on search string. Used with a dynamically built search input."},{"name":"id","type":"string","description":"Id of the dual list selector."},{"name":"isDisabled","type":"boolean","description":"Flag indicating if the dual list selector is in a disabled state","defaultValue":"false"},{"name":"isSearchable","type":"boolean","description":"Flag indicating a search bar should be included above both the dynamically built available and chosen panes."},{"name":"isTree","type":"boolean","description":"Flag indicating if the dual list selector uses trees instead of simple lists","defaultValue":"false"},{"name":"onAvailableOptionsSearchInputChanged","type":"(event: React.FormEvent<HTMLInputElement>, value: string) => void","description":"A callback for when the search input value for the dynamically built available options changes."},{"name":"onChosenOptionsSearchInputChanged","type":"(event: React.FormEvent<HTMLInputElement>, value: string) => void","description":"A callback for when the search input value for the dynamically built chosen options changes."},{"name":"onListChange","type":"(\n  event: React.MouseEvent<HTMLElement>,\n  newAvailableOptions: React.ReactNode[],\n  newChosenOptions: React.ReactNode[]\n) => void","description":"Callback fired every time dynamically built options are chosen or removed"},{"name":"onOptionCheck","type":"(\n  event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n  checked: boolean,\n  checkedId: string,\n  newCheckedItems: string[]\n) => void","description":"Optional callback fired when a dynamically built option is checked"},{"name":"onOptionSelect","type":"(\n  event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\n  index: number,\n  isChosen: boolean,\n  id: string,\n  itemData: any,\n  parentData: any\n) => void","description":"Optional callback fired when a dynamically built option is selected"},{"name":"removeAll","type":"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void","description":"Optional callback for the dynamically built remove all button"},{"name":"removeAllAriaLabel","type":"string","description":"Accessible label for the dynamically built remove all button","defaultValue":"'Remove all'"},{"name":"removeAllTooltip","type":"React.ReactNode","description":"Tooltip content for the dynamically built remove all button"},{"name":"removeAllTooltipProps","type":"any","description":"Additonal tooltip properties for the dynamically built remove all tooltip"},{"name":"removeSelected","type":"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void","description":"Optional callback for the dynamically built remove selected button"},{"name":"removeSelectedAriaLabel","type":"string","description":"Accessible label for the dynamically built remove selected button","defaultValue":"'Remove selected'"},{"name":"removeSelectedTooltip","type":"React.ReactNode","description":"Tooltip content for the dynamically built remove selected button"},{"name":"removeSelectedTooltipProps","type":"any","description":"Additonal tooltip properties for the dynamically built remove selected tooltip"}]},{"name":"DualListSelectorPane","description":"Acts as the container for a list of options that are either available or chosen,\ndepending on the pane type (available or chosen). A search input and other actions,\nsuch as sorting, can also be passed into this sub-component.","props":[{"name":"actions","type":"React.ReactNode[]","description":"Actions to place above the pane."},{"name":"children","type":"React.ReactNode","description":"A dual list selector list or dual list selector tree to be rendered in the pane."},{"name":"className","type":"string","description":"Additional classes applied to the dual list selector pane.","defaultValue":"''"},{"name":"id","type":"string","description":"Id of the pane.","defaultValue":"getUniqueId('dual-list-selector-pane')"},{"name":"isChosen","type":"boolean","description":"Flag indicating if this pane is the chosen pane.","defaultValue":"false"},{"name":"isDisabled","type":"boolean","description":"Flag indicating whether the component is disabled.","defaultValue":"false"},{"name":"listMinHeight","type":"string","description":"Minimum height of the list of options rendered in the pane. *"},{"name":"onSearch","type":"(event: React.ChangeEvent<HTMLInputElement>) => void","description":"Callback for search input. To be used when isSearchable is true."},{"name":"searchInput","type":"React.ReactNode","description":"A search input placed above the list at the top of the pane, before actions."},{"name":"status","type":"string","description":"Status to display above the pane.","defaultValue":"''"},{"name":"title","type":"React.ReactNode","description":"Title of the pane.","defaultValue":"''"}]},{"name":"DualListSelectorList","description":"Acts as the container for DualListSelectorListItem sub-components.","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the dual list selector list"}]},{"name":"DualListSelectorListItem","description":"Creates an individual option that can be selected and moved between the\ndual list selector panes. This is contained within the DualListSelectorList sub-component.","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside the dual list selector."},{"name":"className","type":"string","description":"Additional classes applied to the dual list selector."},{"name":"draggableButtonAriaLabel","type":"string","description":"Accessible label for the draggable button on draggable list items"},{"name":"id","type":"string","description":"ID of the option."},{"name":"isDisabled","type":"boolean","description":"Flag indicating if the dual list selector is in a disabled state"},{"name":"isDraggable","type":"boolean","description":"Flag indicating this item is draggable for reordring"},{"name":"isSelected","type":"boolean","description":"Flag indicating the list item is currently selected."},{"name":"onOptionSelect","type":"(event: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent, id?: string) => void","description":"Callback fired when an option is selected."}]},{"name":"DualListSelectorControlsWrapper","description":"Acts as the container for the DualListSelectorControl sub-components.","props":[{"name":"aria-label","type":"string","description":"Accessible label for the dual list selector controls wrapper."},{"name":"children","type":"React.ReactNode","description":"Anything that can be rendered inside of the wrapper."},{"name":"className","type":"string","description":"Additional classes added to the wrapper."}]},{"name":"DualListSelectorControl","description":"Renders an individual control button for moving selected options between each\ndual list selector pane.","props":[{"name":"aria-label","type":"string","description":"Accessible label for the dual list selector control."},{"name":"children","type":"React.ReactNode","description":"Content to be rendered in the dual list selector control."},{"name":"className","type":"string","description":"Additional classes applied to the dual list selector control."},{"name":"isDisabled","type":"boolean","description":"Flag indicating the control is disabled."},{"name":"onClick","type":"(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void","description":"Callback fired when dual list selector control is selected."},{"name":"tooltipContent","type":"React.ReactNode","description":"Content to be displayed in a tooltip on hover of control."},{"name":"tooltipProps","type":"any","description":"Additional tooltip properties passed to the tooltip."}]},{"name":"DualListSelectorTree","description":"Used in place of the DualListSelectorListItem sub-component when building a\ncomposable dual list selector with a tree.","props":[{"name":"data","type":"DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[])","description":"Data of the tree view","required":true},{"name":"defaultAllExpanded","type":"boolean","description":"Sets the default expanded behavior","defaultValue":"false"},{"name":"hasBadges","type":"boolean","description":"Flag indicating if all options should have badges","defaultValue":"false"},{"name":"id","type":"string","description":"ID of the tree view"},{"name":"isDisabled","type":"boolean","description":"Flag indicating if the dual list selector tree is in the disabled state","defaultValue":"false"},{"name":"onOptionCheck","type":"(\n  event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n  isChecked: boolean,\n  itemData: DualListSelectorTreeItemData\n) => void","description":"Callback fired when an option is checked"}]},{"name":"DualListSelectorTreeItemData","description":"","props":[{"name":"badgeProps","type":"any","description":"Additional properties to pass to the option badge"},{"name":"checkProps","type":"any","description":"Additional properties to pass to the option checkbox"},{"name":"children","type":"DualListSelectorTreeItemData[]","description":"Content rendered inside the dual list selector."},{"name":"className","type":"string","description":"Additional classes applied to the dual list selector."},{"name":"defaultExpanded","type":"boolean","description":"Flag indicating this option is expanded by default."},{"name":"hasBadge","type":"boolean","description":"Flag indicating this option has a badge"},{"name":"id","type":"string","description":"ID of the option","required":true},{"name":"isChecked","type":"boolean","description":"Checked state of the option","required":true},{"name":"isDisabled","type":"boolean","description":"Flag indicating whether the component is disabled."},{"name":"onOptionCheck","type":"(\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\n    isChecked: boolean,\n    isChosen: boolean,\n    itemData: DualListSelectorTreeItemData\n  ) => void","description":"Callback fired when an option is checked"},{"name":"parentId","type":"string","description":"Parent id of an option"},{"name":"text","type":"string","description":"Text of the option","required":true}]}]},"Drag and drop":{"id":"Drag and drop","title":"Drag and drop","source":"react-deprecated","tabName":null,"deprecated":true,"slug":"/components/drag-and-drop/react-deprecated","propComponents":[{"name":"DragDrop","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Potentially Droppable and Draggable children"},{"name":"onDrag","type":"(source: DraggableItemPosition) => boolean","description":"Callback for drag event. Return true to allow drag, false to disallow.","defaultValue":"() => true"},{"name":"onDragMove","type":"(source: DraggableItemPosition, dest?: DraggableItemPosition) => void","description":"Callback on mouse move while dragging.","defaultValue":"() => {}"},{"name":"onDrop","type":"(source: DraggableItemPosition, dest?: DraggableItemPosition) => boolean","description":"Callback for drop event. Return true to allow drop, false to disallow.","defaultValue":"() => false"}]},{"name":"Draggable","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside DragDrop"},{"name":"className","type":"string","description":"Class to add to outer div"},{"name":"hasNoWrapper","type":"boolean","description":"Don't wrap the component in a div. Requires passing a single child.","defaultValue":"false"},{"name":"style","type":"No type info","defaultValue":"{}"}]},{"name":"Droppable","description":"","props":[{"name":"children","type":"React.ReactNode","description":"Content rendered inside DragDrop"},{"name":"className","type":"string","description":"Class to add to outer div"},{"name":"droppableId","type":"string","description":"Id to be passed back on drop events","defaultValue":"'defaultId'"},{"name":"hasNoWrapper","type":"boolean","description":"Don't wrap the component in a div. Requires passing a single child.","defaultValue":"false"},{"name":"zone","type":"string","description":"Name of zone that items can be dragged between. Should specify if there is more than one Droppable on the page.","defaultValue":"'defaultZone'"}]},{"name":"DraggableItemPosition","description":"","props":[{"name":"droppableId","type":"string","description":"Parent droppableId","required":true},{"name":"index","type":"number","description":"Index of item in parent Droppable","required":true}]}]},"Chip":{"id":"Chip","title":"Chip","source":"react-deprecated","tabName":null,"deprecated":true,"slug":"/components/chip/react-deprecated","propComponents":[{"name":"Chip","description":"","props":[{"name":"badge","type":"React.ReactNode","description":"Badge to add to the chip. The badge will be rendered after the chip text."},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the chip text"},{"name":"className","type":"string","description":"Additional classes added to the chip item","defaultValue":"''"},{"name":"closeBtnAriaLabel","type":"string","description":"Aria Label for close button"},{"name":"component","type":"React.ReactNode","description":"Component that will be used for chip. It is recommended that <button> or <li>  are used when the chip is an overflow chip.","deprecated":true},{"name":"isOverflowChip","type":"boolean","description":"Flag indicating if the chip is an overflow chip","defaultValue":"false"},{"name":"isReadOnly","type":"boolean","description":"Flag indicating if chip is read only","defaultValue":"false"},{"name":"onClick","type":"(event: React.MouseEvent) => void","description":"Function that is called when clicking on the chip close button","defaultValue":"(_e: React.MouseEvent) => undefined as any"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"textMaxWidth","type":"string","description":"Css property expressed in percentage or any css unit that overrides the default value of the max-width of the chip's text","defaultValue":"'16ch'"},{"name":"tooltipPosition","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Position of the tooltip which is displayed if text is longer","defaultValue":"'top'"}]},{"name":"ChipGroup","description":"","props":[{"name":"aria-label","type":"string","description":"Aria label for chip group that does not have a category name","defaultValue":"'Chip group category'"},{"name":"categoryName","type":"string","description":"Category name text for the chip group category.  If this prop is supplied the chip group with have a label and category styling applied","defaultValue":"''"},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the chip group. Should be <Chip> elements."},{"name":"className","type":"string","description":"Additional classes added to the chip item"},{"name":"closeBtnAriaLabel","type":"string","description":"Aria label for close button","defaultValue":"'Close chip group'"},{"name":"collapsedText","type":"string","description":"Customizeable template string. Use variable \"${remaining}\" for the overflow chip count.","defaultValue":"'${remaining} more'"},{"name":"defaultIsOpen","type":"boolean","description":"Flag for having the chip group default to expanded","defaultValue":"false"},{"name":"expandedText","type":"string","description":"Customizable \"Show Less\" text string","defaultValue":"'Show Less'"},{"name":"isClosable","type":"boolean","description":"Flag if chip group can be closed","defaultValue":"false"},{"name":"numChips","type":"number","description":"Set number of chips to show before overflow","defaultValue":"3"},{"name":"onClick","type":"(event: React.MouseEvent) => void","description":"Function that is called when clicking on the chip group close button or on an overflow chip"},{"name":"onOverflowChipClick","type":"(event: React.MouseEvent) => void","description":"Function that is called when clicking on the overflow (expand/collapse) chip button","deprecated":true},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"tooltipPosition","type":"| TooltipPosition\n| 'auto'\n| 'top'\n| 'bottom'\n| 'left'\n| 'right'\n| 'top-start'\n| 'top-end'\n| 'bottom-start'\n| 'bottom-end'\n| 'left-start'\n| 'left-end'\n| 'right-start'\n| 'right-end'","description":"Position of the tooltip which is displayed if the category name text is longer","defaultValue":"'top'"}]}]},"Table":{"id":"Table","title":"Table","source":"react-deprecated","tabName":null,"deprecated":true,"slug":"/components/table/react-deprecated","propComponents":[{"name":"Table","description":"","props":[{"name":"actionResolver","type":"IActionsResolver","description":"Resolver for the given action"},{"name":"actions","type":"IActions","description":"Actions to add to the Table"},{"name":"actionsMenuAppendTo","type":"HTMLElement | (() => HTMLElement) | 'inline' | 'parent'","description":"The container to append the dropdown menu to. Defaults to 'inline'.\nIf your menu is being cut off you can append it to an element higher up the DOM tree.\nSome examples:\nactionsMenuAppendTo=\"parent\"\nactionsMenuAppendTo={() => document.body}\nactionsMenuAppendTo={document.getElementById('target')}","defaultValue":"'inline'"},{"name":"actionsToggle","type":"(props: CustomActionsToggleProps) => React.ReactNode","description":"The toggle of the actions menu dropdown. A KebabToggle or DropdownToggle component"},{"name":"areActionsDisabled","type":"IAreActionsDisabled","description":"Specifies if the Kebab for actions is disabled"},{"name":"aria-label","type":"string","description":"Adds an accessible name for the Table","defaultValue":"undefined"},{"name":"bodyWrapper","type":"Function","description":"Wrapper for the body"},{"name":"borders","type":"boolean","description":"Render borders\nBorders can only currently be disabled if the variant is set to 'compact'\nhttps://github.com/patternfly/patternfly/issues/3650","defaultValue":"true"},{"name":"canCollapseAll","type":"boolean","description":"Enables or disables the ability to expand all","defaultValue":"false"},{"name":"canSelectAll","type":"boolean","description":"Enables or disables the ability to select all - this is mutually exclusive with radio button select variant","defaultValue":"true"},{"name":"canSortFavorites","type":"boolean","description":"Along with the onSort prop, enables favorites sorting, defaults to true","defaultValue":"true"},{"name":"caption","type":"React.ReactNode","description":"Component used for caption","defaultValue":"undefined"},{"name":"cells","type":"(ICell | string)[]","description":"Cell/column data","required":true},{"name":"children","type":"React.ReactNode","description":"Content rendered inside the Table","defaultValue":"null"},{"name":"className","type":"string","description":"Additional classes added to the Table","defaultValue":"''"},{"name":"collapseAllAriaLabel","type":"string","description":"An optional alternative aria label for the expand collapse all table header","defaultValue":"''"},{"name":"contentId","type":"string","description":"ID for content","defaultValue":"'expanded-content'"},{"name":"dropdownDirection","type":"'up' | 'down'","description":"The desired direction to show the dropdown when clicking on the actions Kebab. Can only be used together with `actions` property","defaultValue":"'down'"},{"name":"dropdownPosition","type":"'right' | 'left'","description":"The desired position to show the dropdown when clicking on the actions Kebab. Can only be used together with `actions` property","defaultValue":"'right'"},{"name":"expandId","type":"string","description":"ID for expand","defaultValue":"'expandable-toggle'"},{"name":"gridBreakPoint","type":"'' | 'grid' | 'grid-md' | 'grid-lg' | 'grid-xl' | 'grid-2xl'","description":"Specifies the grid breakpoints","defaultValue":"TableGridBreakpoint.gridMd"},{"name":"header","type":"React.ReactNode","description":"Component to place in the header","defaultValue":"undefined"},{"name":"isExpandable","type":"boolean","description":"Flag indicating this table contains expandable rows to maintain proper striping"},{"name":"isHeaderSelectDisabled","type":"boolean","description":"Flag indicating the select all checkbox is disabled","defaultValue":"false"},{"name":"isNested","type":"boolean","description":"Flag indicating this table is nested within another table","defaultValue":"false"},{"name":"isStickyHeader","type":"boolean","description":"If set to true, the table header sticks to the top of its container","defaultValue":"false"},{"name":"isStriped","type":"boolean","description":"Flag indicating this table is striped"},{"name":"isTreeTable","type":"boolean","description":"Flag indicating table is a tree table","defaultValue":"false"},{"name":"onCollapse","type":"OnCollapse","description":"Function triggered when an expandable content is collapsed. When this is used, one expandable toggle button will be positioned in the first cell of a non-expandable row, preceding an expandable row"},{"name":"onExpand","type":"OnExpand","description":"Function triggered when a compound expandable item is clicked"},{"name":"onFavorite","type":"OnFavorite","description":"Enables favorites column\nCallback triggered when a row is favorited/unfavorited"},{"name":"onRowEdit","type":"OnRowEdit","description":"Function triggered when a row's inline edit is activated. Adds a column for inline edit when present."},{"name":"onSelect","type":"OnSelect","description":"Function triggered when a row's checkbox is selected. When this is used, one checkbox/radio button will be positioned in the first or second cell of a non-expandable row"},{"name":"onSort","type":"OnSort","description":"Function triggered when sort icon is clicked"},{"name":"ouiaId","type":"number | string","description":"Value to overwrite the randomly generated data-ouia-component-id."},{"name":"ouiaSafe","type":"boolean","description":"Set the value of data-ouia-safe. Only set to true when the component is in a static state, i.e. no animations are occurring. At all other times, this value must be false.","defaultValue":"true"},{"name":"role","type":"string","description":"A valid WAI-ARIA role to be applied to the table element","defaultValue":"'grid'"},{"name":"rowLabeledBy","type":"string","description":"label for row","defaultValue":"'simple-node'"},{"name":"rows","type":"(IRow | string[])[]","description":"Row data","required":true},{"name":"rowWrapper","type":"(props: RowWrapperProps) => JSX.Element","description":"Wrapper for the row"},{"name":"selectVariant","type":"'checkbox' | 'radio'","description":"Specifies the type of the select element variant - can be one of checkbox or radio button","defaultValue":"'checkbox'"},{"name":"sortBy","type":"ISortBy","description":"Specifies the initial sorting pattern for the table - asc/desc and the index of the column to sort by"},{"name":"variant","type":"literal","description":"Style variant for the Table","defaultValue":"null"}]},{"name":"TableHeader","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the TableHeader"}]},{"name":"TableBody","description":"","props":[{"name":"className","type":"string","description":"Additional classes added to the TableBody","defaultValue":"''"},{"name":"isEvenStriped","type":"boolean","description":"Flag indicating the <tbody> contains evenly striped rows."},{"name":"isOddStriped","type":"boolean","description":"Flag indicating the <tbody> contains oddly striped rows."},{"name":"onRowClick","type":"(\n  event: React.KeyboardEvent | React.MouseEvent,\n  row: IRow,\n  rowProps: IExtraRowData,\n  computedData: IComputedData\n) => void","description":"A click handler for the row","defaultValue":"(\n  event: React.MouseEvent | React.KeyboardEvent,\n  row: IRow,\n  rowProps: IExtraRowData,\n  computedData: IComputedData\n) =>\n  /* eslint-enable @typescript-eslint/no-unused-vars */\n  undefined as OnRowClick"}]}]}},"react-templates":{"Select":{"id":"Select","title":"Select","source":"react-templates","tabName":null,"beta":true,"slug":"/components/menus/select/react-templates","propComponents":[{"name":"SimpleSelect","description":"","props":[{"name":"initialOptions","type":"SimpleSelectOption[]","description":"Initial options of the select."},{"name":"isDisabled","type":"boolean","description":"Flag indicating the select should be disabled."},{"name":"onSelect","type":"(_event: React.MouseEvent<Element, MouseEvent>, selection: string | number) => void","description":"Callback triggered on selection."},{"name":"onToggle","type":"(nextIsOpen: boolean) => void","description":"Callback triggered when the select opens or closes."},{"name":"placeholder","type":"string","description":"Placeholder text for the select input."},{"name":"toggleContent","type":"React.ReactNode","description":"Content of the toggle. Defaults to the selected option."},{"name":"toggleProps","type":"MenuToggleProps","description":"Additional props passed to the toggle."},{"name":"toggleWidth","type":"string","description":"Width of the toggle."}]},{"name":"CheckboxSelect","description":"","props":[{"name":"initialOptions","type":"CheckboxSelectOption[]","description":"Initial options of the select."},{"name":"isDisabled","type":"boolean","description":"Flag indicating the select should be disabled."},{"name":"onSelect","type":"(_event: React.MouseEvent<Element, MouseEvent>, value?: string | number) => void","description":"Callback triggered on selection."},{"name":"onToggle","type":"(nextIsOpen: boolean) => void","description":"Callback triggered when the select opens or closes."},{"name":"toggleContent","type":"React.ReactNode","description":"Content of the toggle. Defaults to a string with badge count of selected options."},{"name":"toggleProps","type":"MenuToggleProps","description":"Additional props passed to the toggle."},{"name":"toggleWidth","type":"string","description":"Width of the toggle."}]},{"name":"TypeaheadSelect","description":"","props":[{"name":"createOptionMessage","type":"string | ((newValue: string) => string)","description":"Message to display to create a new option"},{"name":"initialOptions","type":"TypeaheadSelectOption[]","description":"Initial options of the select.","required":true},{"name":"isCreatable","type":"boolean","description":"Flag to indicate if the typeahead select allows new items"},{"name":"isCreateOptionOnTop","type":"boolean","description":"Flag to indicate if create option should be at top of typeahead"},{"name":"isDisabled","type":"boolean","description":"Flag indicating the select should be disabled."},{"name":"noOptionsAvailableMessage","type":"string","description":"Message to display when no options are available."},{"name":"noOptionsFoundMessage","type":"string | ((filter: string) => string)","description":"Message to display when no options match the filter."},{"name":"onClearSelection","type":"() => void","description":"Callback triggered when the clear button is selected"},{"name":"onInputChange","type":"(newValue: string) => void","description":"Callback triggered when the text in the input field changes."},{"name":"onSelect","type":"(\n  _event: React.MouseEvent<Element, MouseEvent> | React.KeyboardEvent<HTMLInputElement> | undefined,\n  selection: string | number\n) => void","description":"Callback triggered on selection."},{"name":"onToggle","type":"(nextIsOpen: boolean) => void","description":"Callback triggered when the select opens or closes."},{"name":"placeholder","type":"string","description":"Placeholder text for the select input."},{"name":"toggleProps","type":"MenuToggleProps","description":"Additional props passed to the toggle."},{"name":"toggleWidth","type":"string","description":"Width of the toggle."}]}]},"Dropdown":{"id":"Dropdown","title":"Dropdown","source":"react-templates","tabName":null,"beta":true,"slug":"/components/menus/dropdown/react-templates","propComponents":[{"name":"SimpleDropdown","description":"","props":[{"name":"initialItems","type":"SimpleDropdownItem[]","description":"Initial items of the dropdown."},{"name":"isDisabled","type":"boolean","description":"Flag indicating the dropdown should be disabled."},{"name":"isToggleFullWidth","type":"boolean","description":"Flag indicated whether the dropdown toggle should take up the full width of its parent."},{"name":"onSelect","type":"(event?: React.MouseEvent<Element, MouseEvent>, value?: string | number) => void","description":"Callback triggered when any dropdown item is clicked."},{"name":"onToggle","type":"(nextIsOpen: boolean) => void","description":"Callback triggered when the dropdown toggle opens or closes."},{"name":"shouldFocusToggleOnSelect","type":"boolean","description":"Flag indicating the dropdown toggle should be focused after a dropdown item is clicked."},{"name":"toggleAriaLabel","type":"string","description":"Adds an accessible name to the dropdown toggle. Required when the dropdown toggle does not\nhave any text content."},{"name":"toggleContent","type":"React.ReactNode","description":"Content of the toggle.","required":true},{"name":"toggleProps","type":"MenuToggleProps","description":"Additional props passed to the toggle."},{"name":"toggleVariant","type":"'default' | 'plain' | 'plainText'","description":"Variant style of the dropdown toggle."},{"name":"toggleWidth","type":"string","description":"Width of the toggle."}]},{"name":"SimpleDropdownItem","description":"","props":[{"name":"content","type":"React.ReactNode","description":"Content of the dropdown item. If the isDivider prop is true, this prop will be ignored."},{"name":"isDivider","type":"boolean","description":"Flag indicating whether the dropdown item should render as a divider. If true, the item will be rendered without\nthe dropdown item wrapper."},{"name":"onClick","type":"(event?: any) => void","description":"Callback for when the dropdown item is clicked."},{"name":"to","type":"string","description":"URL to redirect to when the dropdown item is clicked."},{"name":"value","type":"string | number","description":"Unique identifier for the dropdown item, which is used in the dropdown onSelect callback","required":true}]}]}}}